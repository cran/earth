> # test.glm.R: tests glm and factors added for earth release 2.0
> 
> library(earth)
Loading required package: plotmo
Loading required package: plotrix
> if(!interactive())
+     postscript(paper="letter")
> data(ozone1)
> data(trees)
> data(etitanic)
> source("check.models.equal.R")
> options(warn=1) # print warnings as they occur
> 
> expect.err <- function(obj) # test that we got an error as expected from a try() call
+ {
+     if(class(obj)[1] == "try-error")
+         cat("Got error as expected\n")
+     else
+         stop("did not get expected try error")
+ }
> printh <- function(x, expect.warning=FALSE, max.print=0) # like print but with a header
+ {
+     cat("===", deparse(substitute(x)))
+     if(expect.warning)
+         cat(" expect warning -->")
+     else if (NROW(x) > 1)
+         cat("\n")
+     if (max.print > 0)
+         print(head(x, n=max.print))
+     else
+         print(x)
+ }
> 
> count <- 0
> 
> show.earth.models <- function(a, nresponse=NA)
+ {
+     model.name <- deparse(substitute(a))
+     cat("\nPrint", model.name, "\n\n")
+     print(a)
+     cat("\nSummary", model.name, "\n\n")
+     print(summary(a))
+     count <<- count + 1
+     if (count %% 2 == 0) {  # an attempt at trying different parameters without combin explosion.
+         cat("\nSummary", model.name, "decomp=\"none\", digits=5, fixed.point=FALSE, details=TRUE\n\n")
+         print(summary(a, decomp="none", digits=5, fixed.point=FALSE, details=TRUE))
+     } else {
+         cat("\nSummary", model.name, "digits=3, details=TRUE\n\n")
+         print(summary(a, decomp="none", digits=3, details=TRUE))
+     }
+     cat("\nevimp", model.name, "\n\n")
+     print(evimp(a))
+     cat("\nevimp", model.name, "trim=FALSE\n\n")
+     ev <- evimp(a, trim=FALSE)
+     print(ev)
+     plot(a, caption=model.name)
+     plot(ev)
+     if (!is.null(a$glm.list)) {
+         control <- a$glm.list[[1]]$control
+         family <- a$glm.list[[1]]$family
+         cat("\nglm params: epsilon", control$epsilon,
+             "maxit", control$maxit, "trace", control$trace,
+             "family", family$family, "link", family$link, "\n")
+     }
+     cat("\nplotmo", model.name, "\n")
+     if(is.na(nresponse))
+         plotmo(a, trace=2)
+     else
+         plotmo(a, trace=2, nresponse=nresponse)
+     cat("-------------------------------------------------------------------------------\n\n")
+ }
> 
> # print contents of earth.model, for sanity checking that all fields are present as usual
> # but strip big fields to reduce amount of printing
> 
> print.stripped.earth.model <- function(a, model.name)
+ {
+     a$bx <- NULL
+     a$fitted.values <- NULL
+     a$residuals <- NULL
+     cat("print.stripped.earth.model(", model.name, ")\n", sep="")
+     print.default(a)
+     cat("-------------------------------------------------------------------------------\n\n")
+ }
> 
> # binomial models
> 
> ldose  <- rep(0:5, 2) - 2
> # ldose1 <- c(0.1, 1.2, 2.3, 3.4, 4.5, 5.6, 0.3, 1.4, 2.5, 3.6, 4.7, 5.8)
> ldose1 <- c(0.1, 1.2, 0.1, 1.2, 1.0, 0.1, 0.3, 1.4, 0.1, 1.2, 0.1, 0.9)
> sex <- factor(rep(c("male", "female"), times=c(6,6)))
> numdead <- c(1,4,9,13,18,20,0,2,6,10,12,16)
> SF <- cbind(numdead, numalive=20 - numdead)
> numdead2 <- c(2,3,10,13,19,20,0,3,7,11,13,17)
> SF2 <- cbind(numdead2, numalive2=20 - numdead2)
> 
> # single response glm model but with a binomial pair of y columns
> cat("a1: single response glm model but with a binomial pair of y columns, with ldose1 data degree=2\n\n")
a1: single response glm model but with a binomial pair of y columns, with ldose1 data degree=2

> a1 <-  earth(SF ~ sex + ldose + ldose1, glm=list(family="binomial"), trace=4, pmethod="none", degree=2)
Call: earth(formula=SF~sex+ldose+ldose1, trace=4, glm=list(family="binomial"), 
      pmethod="none", degree=2)

x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
First few rows of x are
     sexmale ldose ldose1
[1,]       1    -2    0.1
[2,]       1    -1    1.2
[3,]       1     0    0.1
[4,]       1     1    1.2
[5,]       1     2    1.0
[6,]       1     3    0.1

y is a 12 by 2 matrix: 1=numdead (paired with numalive)
First few rows of y are
     numdead numalive
[1,]       1       19
[2,]       4       16
[3,]       9       11
[4,]      13        7
[5,]      18        2
[6,]      20        0

Forward pass: minspan 3 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.8679 0.9211       0.9211    2        ldose          -2< 2       
4      0.9353 0.9808      0.05966    1      sexmale           0< 3       
6      0.9119 0.9911      0.01033    1      sexmale           0< 4       2   
8      0.8358 0.9986     0.007558    3       ldose1         0.1< 5       2   
10       -inf 0.9987    8.021e-05    3       ldose1         0.1< 6       reject term

GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Forward pass complete: 9 terms (5 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.8679  0.9211     0.8679      1  1 2
          3      0.9353  0.9808     0.0675      2  1 2 3
          4      0.9119  0.9911    -0.0234      2  1 2 3 4
chosen    5      0.8358  0.9986    -0.0761      3  1 2 3 4 5

Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 

y arg to glm() is a 12 by 2 matrix: 1=numdead, 2=numalive
First few rows of y arg to glm() are
     numdead numalive
[1,]       1       19
[2,]       4       16
[3,]       9       11
[4,]      13        7
[5,]      18        2
[6,]      20        0
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> show.earth.models(a1)

Print a1 

Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.210308    RSS 0.6841923    GRSq 0.835821    RSq 0.9986431

GLM null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4

Summary a1 

Call: earth(formula=SF~sex+ldose+ldose1, trace=4, glm=list(family="binomial"), 
      pmethod="none", degree=2)

GLM coefficients
                    numdead
(Intercept)     -1.18660324
sexmale          0.89582195
ldose            0.95762555
sexmale * ldose  0.35424544
ldose * ldose1  -0.07709907

Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.210308    RSS 0.6841923    GRSq 0.835821    RSq 0.9986431

GLM null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4

Summary a1 digits=3, details=TRUE

Call: earth(formula=SF~sex+ldose+ldose1, trace=4, glm=list(family="binomial"), 
      pmethod="none", degree=2)

Earth coefficients
                numdead
(Intercept)       6.017
ldose             2.778
sexmale           2.683
sexmale * ldose   0.967
ldose * ldose1    0.745

GLM coefficients
                numdead
(Intercept)     -1.1866
ldose            0.9576
sexmale          0.8958
sexmale * ldose  0.3542
ldose * ldose1  -0.0771

GLM deviance residuals:
     Min        1Q    Median        3Q       Max  
-1.35675  -0.32772  -0.00983   0.33376   1.02734  

GLM coefficients (family binomial, link logit)
                Estimate Std. Error z value Pr(>|z|)
(Intercept)      -1.1866     0.2863   -4.14  3.4e-05
ldose             0.9576     0.2403    3.98  6.8e-05
sexmale           0.8958     0.3917    2.29    0.022
sexmale * ldose   0.3542     0.2721    1.30    0.193
ldose * ldose1   -0.0771     0.2560   -0.30    0.763

Number of cases: 12
Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.21    RSS 0.684    GRSq 0.836    RSq 0.999

GLM null.deviance 125 (11 dof)   deviance 4.9 (7 dof)   iters 4

evimp a1 

        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3 -19.6   27.9
ldose1         1 -30.2    8.7

evimp a1 trim=FALSE

        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3 -19.6   27.9
ldose1         1 -30.2    8.7

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a1 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got x with colnames from object$call$formula

x[12,3]:
       sex ldose ldose1
1     male    -2    0.1
2     male    -1    1.2
3     male     0    0.1
...   male     1    1.2
12  female     3    0.9

factors: sex 

nlevels: sex=2 ldose=6 ldose1=6 

--get.plotmo.y for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got y from object$call$formula
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

pairs:
     [,1]      [,2]      
[1,] "1 sex"   "2 ldose" 
[2,] "2 ldose" "3 ldose1"

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose ldose1
       female   0.5    0.6


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,3]:
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1   0.5       0           0.0          0.3
[2,]           1   0.5       1           0.5          0.3
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.3249928 max 0.5846822
                                      value 0.3249928 0.5846822 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,3]:
       sex ldose ldose1
1   female    -2    0.6
2   female    -1    0.6
3   female     0    0.6
... female     1    0.6
6   female     3    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
predict.earth: bx is a 6 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -1.2
[2,]           1    -1       0             0         -0.6
[3,]           1     0       0             0          0.0
[4,]           1     1       0             0          0.6
[5,]           1     2       0             0          1.2
[6,]           1     3       0             0          1.8
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.04700591 max 0.8245516
                                      value 0.04700591 0.1092943 0.233867 0.4316218 0.6538779 0.8245516 

--plot.degree2(draw.plot=TRUE)

plotmo.predict(type="response") for degree2 plot "sex:ldose" with newdata[12,3]:
       sex ldose ldose1
1   female    -2    0.6
2     male    -2    0.6
1.1 female    -1    0.6
...   male    -1    0.6
2.5   male     3    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 12 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of x are
     sex ldose ldose1
1 female    -2    0.6
2   male    -2    0.6
3 female    -1    0.6
4   male    -1    0.6
5 female     0    0.6
6   male     0    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 12 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.6
2   male    -2    0.6
3 female    -1    0.6
4   male    -1    0.6
5 female     0    0.6
6   male     0    0.6
predict.earth: bx is a 12 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
First few rows of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -1.2
[2,]           1    -2       1            -2         -1.2
[3,]           1    -1       0             0         -0.6
[4,]           1    -1       1            -1         -0.6
[5,]           1     0       0             0          0.0
[6,]           1     0       1             0          0.0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 12 min 0.04700591 max 0.9708595
                                      value 0.04700591 0.05614662 0.1092943 0.1741649 0.233867 0.4278126 0.4316218 0.7260812 0.6538779 0.9038229 ...
persp(sex:ldose) theta -35 ylim 0 1 cex 0.83

plotmo.predict(type="response") for degree2 plot "ldose:ldose1" with newdata[36,3]:
       sex ldose ldose1
1   female    -2    0.1
2   female    -1    0.1
3   female     0    0.1
... female     1    0.1
6.5 female     3    1.4

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 36 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of x are
     sex ldose ldose1
1 female    -2    0.1
2 female    -1    0.1
3 female     0    0.1
4 female     1    0.1
5 female     2    0.1
6 female     3    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 36 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.1
2 female    -1    0.1
3 female     0    0.1
4 female     1    0.1
5 female     2    0.1
6 female     3    0.1
predict.earth: bx is a 36 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
First few rows of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -0.2
[2,]           1    -1       0             0         -0.1
[3,]           1     0       0             0          0.0
[4,]           1     1       0             0          0.1
[5,]           1     2       0             0          0.2
[6,]           1     3       0             0          0.3
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 36 min 0.0436703 max 0.8406596
                                      value 0.0436703 0.1055977 0.233867 0.4411028 0.671114 0.8406596 0.04497654 0.107063 0.233867 0.4373049 ...
persp(ldose:ldose1) theta 235 ylim 0 1 cex 0.83

-------------------------------------------------------------------------------

> printh(evimp(a1, trim=FALSE, sqrt=FALSE))
=== evimp(a1, trim = FALSE, sqrt = FALSE)
        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3  -3.8    7.8
ldose1         1  -9.1    0.8
> printh(evimp(a1, trim=FALSE, sqrt=TRUE)) # this tests sqrt param with negative evimps
=== evimp(a1, trim = FALSE, sqrt = TRUE)
        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3 -19.6   27.9
ldose1         1 -30.2    8.7
> a1update <- update(a1, trace=0)
> check.models.equal(a1, a1update, msg="a1update a1")
check.models.equal not identical: a1update a1 [but within numerical tolerances]
> 
> # test some different but equivalent glm specs
> a1a <-  earth(SF ~ sex + ldose + ldose1, glm=list(family="binomial"), trace=1, pmethod="none", degree=2)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> check.models.equal(a1a, a1, msg="a1 a1a")
check.models.equal not identical: a1 a1a [but within numerical tolerances]
> a1b <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial), trace=1, pmethod="none", degree=2)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> check.models.equal(a1, a1b, msg="a1 a1b")
check.models.equal not identical: a1 a1b [but within numerical tolerances]
> a1c <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial()), trace=1, pmethod="none", degree=2)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> check.models.equal(a1, a1c, msg="a1 a1c")
check.models.equal not identical: a1 a1c [but within numerical tolerances]
> a1d <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial(link="logit")), trace=1, pmethod="none", degree=2)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> check.models.equal(a1, a1d, msg="a1 a1d")
check.models.equal not identical: a1 a1d [but within numerical tolerances]
> # Removed for earth 2.3.3 because offset is no longer supported
> # a1e <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial(link="logit"),offset=NULL), trace=1, pmethod="none", degree=2)
> # check.models.equal(a1, a1e, msg="a1 a1e")
> # a1f <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial(link="logit"),offset=rep(0,nrow(SF))), trace=1, pmethod="none", degree=2)
> # check.models.equal(a1, a1f, msg="a1 a1f")
> a1g <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial(link="logit"),control=glm.control()), trace=1, pmethod="none", degree=2)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> check.models.equal(a1, a1g, msg="a1 a1g")
check.models.equal not identical: a1 a1g [but within numerical tolerances]
> # following should cause a "did not converge warning" because maxit=2
> a1h <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial(link="logit"),control=glm.control(epsilon=1e-8, maxit=2, trace=TRUE)), trace=1, pmethod="none", degree=2)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
Deviance = 4.921104 Iterations - 1
Deviance = 4.902235 Iterations - 2
Warning: glm.fit: algorithm did not converge
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902235 (7 dof)   iters 2 did not converge
> show.earth.models(a1h) # check "did not converge" and also that maxit is retained in glm.list$control

Print a1h 

Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.210308    RSS 0.6841923    GRSq 0.835821    RSq 0.9986431

GLM null.deviance 124.8756 (11 dof)   deviance 4.902235 (7 dof)   iters 2 did not converge

Summary a1h 

Call: earth(formula=SF~sex+ldose+ldose1, trace=1, glm=list(family=binomial(link="logit"), 
      control=glm.control(epsilon=1e-08, maxit=2, trace=TRUE)), 
      pmethod="none", degree=2)

GLM coefficients
                    numdead
(Intercept)     -1.18610322
sexmale          0.89532835
ldose            0.95719637
sexmale * ldose  0.35435033
ldose * ldose1  -0.07689282

Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.210308    RSS 0.6841923    GRSq 0.835821    RSq 0.9986431

GLM null.deviance 124.8756 (11 dof)   deviance 4.902235 (7 dof)   iters 2 did not converge

Summary a1h decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(formula=SF~sex+ldose+ldose1, trace=1, glm=list(family=binomial(link="logit"), 
      control=glm.control(epsilon=1e-08, maxit=2, trace=TRUE)), 
      pmethod="none", degree=2)

Earth coefficients
                numdead
(Intercept)     6.01682
ldose           2.77837
sexmale         2.68307
sexmale * ldose 0.96719
ldose * ldose1  0.74476

GLM coefficients
                  numdead
(Intercept)     -1.186103
ldose            0.957196
sexmale          0.895328
sexmale * ldose  0.354350
ldose * ldose1  -0.076893

GLM deviance residuals:
       Min          1Q      Median          3Q         Max  
-1.3575704  -0.3283566  -0.0099781   0.3334076   1.0278036  

GLM coefficients (family binomial, link logit)
                 Estimate Std. Error z value  Pr(>|z|)
(Intercept)     -1.186103   0.282331 -4.2011 2.656e-05
ldose            0.957196   0.237375  4.0324 5.521e-05
sexmale          0.895328   0.388126  2.3068   0.02107
sexmale * ldose  0.354350   0.268785  1.3183   0.18739
ldose * ldose1  -0.076893   0.253663 -0.3031   0.76179

Number of cases: 12
Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.2103    RSS 0.68419    GRSq 0.83582    RSq 0.99864

GLM null.deviance 124.88 (11 dof)   deviance 4.9022 (7 dof)   iters 2 did not converge

evimp a1h 

        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3 -19.6   27.9
ldose1         1 -30.2    8.7

evimp a1h trim=FALSE

        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3 -19.6   27.9
ldose1         1 -30.2    8.7

glm params: epsilon 1e-08 maxit 2 trace TRUE family binomial link logit 

plotmo a1h 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got x with colnames from object$call$formula

x[12,3]:
       sex ldose ldose1
1     male    -2    0.1
2     male    -1    1.2
3     male     0    0.1
...   male     1    1.2
12  female     3    0.9

factors: sex 

nlevels: sex=2 ldose=6 ldose1=6 

--get.plotmo.y for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got y from object$call$formula
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

pairs:
     [,1]      [,2]      
[1,] "1 sex"   "2 ldose" 
[2,] "2 ldose" "3 ldose1"

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose ldose1
       female   0.5    0.6


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,3]:
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1   0.5       0           0.0          0.3
[2,]           1   0.5       1           0.5          0.3
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.325069 max 0.5846594
                                      value 0.325069 0.5846594 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,3]:
       sex ldose ldose1
1   female    -2    0.6
2   female    -1    0.6
3   female     0    0.6
... female     1    0.6
6   female     3    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
predict.earth: bx is a 6 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -1.2
[2,]           1    -1       0             0         -0.6
[3,]           1     0       0             0          0.0
[4,]           1     1       0             0          0.6
[5,]           1     2       0             0          1.2
[6,]           1     3       0             0          1.8
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.04705569 max 0.8244914
                                      value 0.04705569 0.1093728 0.2339566 0.4316696 0.6538528 0.8244914 

--plot.degree2(draw.plot=TRUE)

plotmo.predict(type="response") for degree2 plot "sex:ldose" with newdata[12,3]:
       sex ldose ldose1
1   female    -2    0.6
2     male    -2    0.6
1.1 female    -1    0.6
...   male    -1    0.6
2.5   male     3    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 12 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of x are
     sex ldose ldose1
1 female    -2    0.6
2   male    -2    0.6
3 female    -1    0.6
4   male    -1    0.6
5 female     0    0.6
6   male     0    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 12 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.6
2   male    -2    0.6
3 female    -1    0.6
4   male    -1    0.6
5 female     0    0.6
6   male     0    0.6
predict.earth: bx is a 12 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
First few rows of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -1.2
[2,]           1    -2       1            -2         -1.2
[3,]           1    -1       0             0         -0.6
[4,]           1    -1       1            -1         -0.6
[5,]           1     0       0             0          0.0
[6,]           1     0       1             0          0.0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 12 min 0.04705569 max 0.9708427
                                      value 0.04705569 0.05616822 0.1093728 0.1741946 0.2339566 0.4278142 0.4316696 0.7260426 0.6538528 0.9037886 ...
persp(sex:ldose) theta -35 ylim 0 1 cex 0.83

plotmo.predict(type="response") for degree2 plot "ldose:ldose1" with newdata[36,3]:
       sex ldose ldose1
1   female    -2    0.1
2   female    -1    0.1
3   female     0    0.1
... female     1    0.1
6.5 female     3    1.4

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 36 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of x are
     sex ldose ldose1
1 female    -2    0.1
2 female    -1    0.1
3 female     0    0.1
4 female     1    0.1
5 female     2    0.1
6 female     3    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 36 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.1
2 female    -1    0.1
3 female     0    0.1
4 female     1    0.1
5 female     2    0.1
6 female     3    0.1
predict.earth: bx is a 36 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
First few rows of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -0.2
[2,]           1    -1       0             0         -0.1
[3,]           1     0       0             0          0.0
[4,]           1     1       0             0          0.1
[5,]           1     2       0             0          0.2
[6,]           1     3       0             0          0.3
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 36 min 0.04372534 max 0.8405623
                                      value 0.04372534 0.1056836 0.2339566 0.4411254 0.6710441 0.8405623 0.0450296 0.1071459 0.2339566 0.4373375 ...
persp(ldose:ldose1) theta 235 ylim 0 1 cex 0.83

-------------------------------------------------------------------------------

> check.models.equal(a1, a1g, msg="a1 a1h") # models should still be equal within numeric tolerance
check.models.equal not identical: a1 a1h [but within numerical tolerances]
> stopifnot(a1h$glm.list[[1]]$control$maxit == 2)
> # equivalent way of specifying maxit
> a1h2 <-  earth(SF ~ sex + ldose + ldose1, glm=list(family=binomial(link="logit"),control=glm.control(epsilon=1e-8),maxit=2), pmethod="none", degree=2)
Warning: glm.fit: algorithm did not converge
earth glm numdead: did not converge after 2 iterations
> check.models.equal(a1h, a1h2, msg="a1h a1h2")
check.models.equal not identical: a1h a1h2 [but within numerical tolerances]
> stopifnot(a1h2$glm.list[[1]]$control$maxit == 2)
> 
> # check update, also check params are carried forward properly with update
> a1h.update1 <- update(a1h, glm=list(family=binomial(link="probit"), maxit=8))
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Skipped forward pass
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 3.682296 (7 dof)   iters 5
> stopifnot(a1h.update1$glm.list[[1]]$control$maxit == 8)
> show.earth.models(a1h.update1)

Print a1h.update1 

Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.210308    RSS 0.6841923    GRSq 0.835821    RSq 0.9986431

GLM null.deviance 124.8756 (11 dof)   deviance 3.682296 (7 dof)   iters 5

Summary a1h.update1 

Call: earth(formula=SF~sex+ldose+ldose1, trace=1, glm=list(family=binomial(link="probit"), 
      maxit=8), pmethod="none", degree=2, Object=a1h)

GLM coefficients
                    numdead
(Intercept)     -0.71385716
sexmale          0.54841705
ldose            0.57443435
sexmale * ldose  0.18964514
ldose * ldose1  -0.04214729

Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.210308    RSS 0.6841923    GRSq 0.835821    RSq 0.9986431

GLM null.deviance 124.8756 (11 dof)   deviance 3.682296 (7 dof)   iters 5

Summary a1h.update1 digits=3, details=TRUE

Call: earth(formula=SF~sex+ldose+ldose1, trace=1, glm=list(family=binomial(link="probit"), 
      maxit=8), pmethod="none", degree=2, Object=a1h)

Earth coefficients
                numdead
(Intercept)       6.017
ldose             2.778
sexmale           2.683
sexmale * ldose   0.967
ldose * ldose1    0.745

GLM coefficients
                numdead
(Intercept)     -0.7139
ldose            0.5744
sexmale          0.5484
sexmale * ldose  0.1896
ldose * ldose1  -0.0421

GLM deviance residuals:
    Min       1Q   Median       3Q      Max  
-1.1599  -0.2669   0.0465   0.2655   0.8343  

GLM coefficients (family binomial, link probit)
                Estimate Std. Error z value Pr(>|z|)
(Intercept)      -0.7139     0.1593   -4.48  7.4e-06
ldose             0.5744     0.1346    4.27  2.0e-05
sexmale           0.5484     0.2206    2.49    0.013
sexmale * ldose   0.1896     0.1442    1.32    0.188
ldose * ldose1   -0.0421     0.1434   -0.29    0.769

Number of cases: 12
Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, ldose1
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.21    RSS 0.684    GRSq 0.836    RSq 0.999

GLM null.deviance 125 (11 dof)   deviance 3.68 (7 dof)   iters 5

evimp a1h.update1 

        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3 -19.6   27.9
ldose1         1 -30.2    8.7

evimp a1h.update1 trim=FALSE

        nsubsets   gcv    rss
ldose          4 100.0  100.0
sexmale        3 -19.6   27.9
ldose1         1 -30.2    8.7

glm params: epsilon 1e-08 maxit 8 trace FALSE family binomial link probit 

plotmo a1h.update1 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got x with colnames from object$call$formula

x[12,3]:
       sex ldose ldose1
1     male    -2    0.1
2     male    -1    1.2
3     male     0    0.1
...   male     1    1.2
12  female     3    0.9

factors: sex 

nlevels: sex=2 ldose=6 ldose1=6 

--get.plotmo.y for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got y from object$call$formula
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

pairs:
     [,1]      [,2]      
[1,] "1 sex"   "2 ldose" 
[2,] "2 ldose" "3 ldose1"

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose ldose1
       female   0.5    0.6


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,3]:
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1   0.5       0           0.0          0.3
[2,]           1   0.5       1           0.5          0.3
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.3302278 max 0.5808058
                                      value 0.3302278 0.5808058 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,3]:
       sex ldose ldose1
1   female    -2    0.6
2   female    -1    0.6
3   female     0    0.6
... female     1    0.6
6   female     3    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
predict.earth: bx is a 6 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -1.2
[2,]           1    -1       0             0         -0.6
[3,]           1     0       0             0          0.0
[4,]           1     1       0             0          0.6
[5,]           1     2       0             0          1.2
[6,]           1     3       0             0          1.8
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.03498158 max 0.8247399
                                      value 0.03498158 0.103294 0.2376578 0.4345857 0.6496719 0.8247399 

--plot.degree2(draw.plot=TRUE)

plotmo.predict(type="response") for degree2 plot "sex:ldose" with newdata[12,3]:
       sex ldose ldose1
1   female    -2    0.6
2     male    -2    0.6
1.1 female    -1    0.6
...   male    -1    0.6
2.5   male     3    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 12 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of x are
     sex ldose ldose1
1 female    -2    0.6
2   male    -2    0.6
3 female    -1    0.6
4   male    -1    0.6
5 female     0    0.6
6   male     0    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 12 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.6
2   male    -2    0.6
3 female    -1    0.6
4   male    -1    0.6
5 female     0    0.6
6   male     0    0.6
predict.earth: bx is a 12 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
First few rows of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -1.2
[2,]           1    -2       1            -2         -1.2
[3,]           1    -1       0             0         -0.6
[4,]           1    -1       1            -1         -0.6
[5,]           1     0       0             0          0.0
[6,]           1     0       1             0          0.0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 12 min 0.03498158 max 0.9798633
                                      value 0.03498158 0.05018915 0.103294 0.1829364 0.2376578 0.4342988 0.4345857 0.7167965 0.6496719 0.9052639 ...
persp(sex:ldose) theta -35 ylim 0 1 cex 0.83

plotmo.predict(type="response") for degree2 plot "ldose:ldose1" with newdata[36,3]:
       sex ldose ldose1
1   female    -2    0.1
2   female    -1    0.1
3   female     0    0.1
... female     1    0.1
6.5 female     3    1.4

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 36 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of x are
     sex ldose ldose1
1 female    -2    0.1
2 female    -1    0.1
3 female     0    0.1
4 female     1    0.1
5 female     2    0.1
6 female     3    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 36 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
First few rows of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.1
2 female    -1    0.1
3 female     0    0.1
4 female     1    0.1
5 female     2    0.1
6 female     3    0.1
predict.earth: bx is a 36 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
First few rows of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       0             0         -0.2
[2,]           1    -1       0             0         -0.1
[3,]           1     0       0             0          0.0
[4,]           1     1       0             0          0.1
[5,]           1     2       0             0          0.2
[6,]           1     3       0             0          0.3
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 36 min 0.03184838 max 0.8405696
                                      value 0.03184838 0.09955754 0.2376578 0.4428933 0.6651581 0.8405696 0.03307267 0.1010401 0.2376578 0.439567 ...
persp(ldose:ldose1) theta 235 ylim 0 1 cex 0.83

-------------------------------------------------------------------------------

> a1h.update2 <- update(a1h, glm=list(family=gaussian, maxit=9), degree=1)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 2 matrix: 1=numdead, 2=numalive
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 8.5e-05)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 3 predictors
After backward pass GRSq 0.952 RSq 0.981 
GLM numdead: null.deviance 504.25 (11 dof)   deviance 9.702381 (9 dof)   iters 2
GLM numalive: null.deviance 504.25 (11 dof)   deviance 9.702381 (9 dof)   iters 2
> stopifnot(a1h.update2$glm.list[[1]]$control$maxit == 9)
> show.earth.models(a1h.update2, nresponse="numali")

Print a1h.update2 

Earth selected 3 of 3 terms, and 2 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale, ldose1-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS     GRSq       RSq
numdead  2.376093  9.702381 0.952486 0.9807588
numalive 2.376093  9.702381 0.952486 0.9807588
All      4.752187 19.404762 0.952486 0.9807588

GLM (family gaussian, link identity)
         null.deviance df deviance df iters converged
numdead         504.25 11 9.702381  9     2         1
numalive        504.25 11 9.702381  9     2         1

Summary a1h.update2 

Call: earth(formula=SF~sex+ldose+ldose1, trace=1, glm=list(family=gaussian, 
      maxit=9), pmethod="none", degree=1)

GLM coefficients
             numdead  numalive
(Intercept) 5.845238 14.154762
sexmale     3.166667 -3.166667
ldose       3.642857 -3.642857

Earth selected 3 of 3 terms, and 2 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale, ldose1-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS     GRSq       RSq
numdead  2.376093  9.702381 0.952486 0.9807588
numalive 2.376093  9.702381 0.952486 0.9807588
All      4.752187 19.404762 0.952486 0.9807588

GLM (family gaussian, link identity)
         null.deviance df deviance df iters converged
numdead         504.25 11 9.702381  9     2         1
numalive        504.25 11 9.702381  9     2         1

Summary a1h.update2 decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(formula=SF~sex+ldose+ldose1, trace=1, glm=list(family=gaussian, 
      maxit=9), pmethod="none", degree=1)

Earth coefficients
            numdead numalive
(Intercept)  5.8452  14.1548
ldose        3.6429  -3.6429
sexmale      3.1667  -3.1667

GLM coefficients
            numdead numalive
(Intercept)  5.8452  14.1548
ldose        3.6429  -3.6429
sexmale      3.1667  -3.1667

GLM numdead deviance residuals:
     Min        1Q    Median        3Q       Max  
-1.36905  -0.73810   0.02381   0.38690   1.70238  

GLM numdead coefficients (family gaussian, link identity)
            Estimate Std. Error t value  Pr(>|t|)
(Intercept)  5.84524    0.43287 13.5035 2.800e-07
ldose        3.64286    0.17550 20.7567 6.542e-09
sexmale      3.16667    0.59946  5.2826 0.0005054

GLM numdead dispersion parameter for gaussian family taken to be 1.078042

GLM numalive deviance residuals:
     Min        1Q    Median        3Q       Max  
-1.70238  -0.38690  -0.02381   0.73810   1.36905  

GLM numalive coefficients (family gaussian, link identity)
            Estimate Std. Error  t value  Pr(>|t|)
(Intercept) 14.15476    0.43287  32.7000 1.151e-10
ldose       -3.64286    0.17550 -20.7567 6.542e-09
sexmale     -3.16667    0.59946  -5.2826 0.0005054

GLM numalive dispersion parameter for gaussian family taken to be 1.078042

Number of cases: 12
Earth selected 3 of 3 terms, and 2 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale, ldose1-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
            GCV     RSS    GRSq     RSq
numdead  2.3761  9.7024 0.95249 0.98076
numalive 2.3761  9.7024 0.95249 0.98076
All      4.7522 19.4048 0.95249 0.98076

GLM (family gaussian, link identity)
         null.deviance df deviance df iters converged
numdead         504.25 11   9.7024  9     2         1
numalive        504.25 11   9.7024  9     2         1

evimp a1h.update2 

        nsubsets   gcv    rss
ldose          2 100.0  100.0
sexmale        1  27.2   24.7

evimp a1h.update2 trim=FALSE

              nsubsets   gcv    rss
ldose                2 100.0  100.0
sexmale              1  27.2   24.7
ldose1-unused        0   0.0    0.0

glm params: epsilon 1e-08 maxit 9 trace FALSE family gaussian link identity 

plotmo a1h.update2 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got x with colnames from object$call$formula

x[12,3]:
       sex ldose ldose1
1     male    -2    0.1
2     male    -1    1.2
3     male     0    0.1
...   male     1    1.2
12  female     3    0.9

factors: sex 

nlevels: sex=2 ldose=6 ldose1=6 

--get.plotmo.y for earth object

formula SF ~ sex + ldose + ldose1
stripped formula SF~sex+ldose+ldose1
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose+ldose1)
got y from object$call$formula
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 20 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,3]:
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female   0.5    0.6
2   male   0.5    0.6
predict.earth: bx is a 2 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1   0.5       0
[2,]           1   0.5       1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numalive" returned length 2 min 9.166667 max 12.33333
                                      value 12.33333 9.166667 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,3]:
       sex ldose ldose1
1   female    -2    0.6
2   female    -1    0.6
3   female     0    0.6
... female     1    0.6
6   female     3    0.6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1 female    -2    0.6
2 female    -1    0.6
3 female     0    0.6
4 female     1    0.6
5 female     2    0.6
6 female     3    0.6
predict.earth: bx is a 6 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       0
[2,]           1    -1       0
[3,]           1     0       0
[4,]           1     1       0
[5,]           1     2       0
[6,]           1     3       0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numalive" returned length 6 min 3.22619 max 21.44048
                                      value 21.44048 17.79762 14.15476 10.5119 6.869048 3.22619 

ylim 3.22619 17.79762 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose ldose1
       female   0.5    0.6

-------------------------------------------------------------------------------

> 
> # basic check with an I in formula
> a1i <-  earth(SF ~ sex + ldose + I(ldose1-3), glm=list(family="binomial"), trace=1, pmethod="none", degree=2)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=I(ldose1-3)
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> print(summary(a1i))
Call: earth(formula=SF~sex+ldose+I(ldose1-3), trace=1, 
      glm=list(family="binomial"), pmethod="none", degree=2)

GLM coefficients
                        numdead
(Intercept)         -1.18660324
sexmale              0.89582195
ldose                0.72632834
sexmale * ldose      0.35424544
ldose * I(ldose1-3) -0.07709907

Earth selected 5 of 5 terms, and 3 of 3 predictors 
Termination condition: GRSq -Inf at 5 terms
Importance: ldose, sexmale, I(ldose1-3)
Number of terms at each degree of interaction: 1 2 2
Earth GCV 8.210308    RSS 0.6841923    GRSq 0.835821    RSq 0.9986431

GLM null.deviance 124.8756 (11 dof)   deviance 4.902229 (7 dof)   iters 4
> 
> cat("a2: single response glm model but with a binomial pair of y columns, degree=1\n\n")
a2: single response glm model but with a binomial pair of y columns, degree=1

> a2 <-  earth(SF ~ sex*ldose, glm=list(fa="b"), trace=3, pmethod="none")
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=sexmale:ldose
y is a 12 by 2 matrix: 1=numdead (paired with numalive)

Forward pass: minspan 3 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.8821 0.9211       0.9211    2        ldose          -2< 2       
4      0.9525 0.9808      0.05966    1      sexmale           0< 3       
6      0.9569 0.9911      0.01033    3 sexmale:ldos          -2< 4       
8      0.8801 0.9911            0    -                                reject term

RSq changed by less than 0.001 at 7 terms (DeltaRSq 0)
After forward pass GRSq 0.880 RSq 0.991
Forward pass complete: 7 terms (4 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds
          1      0.0000  0.0000     0.0000      0  
          2      0.8821  0.9211     0.8821      1  
          3      0.9525  0.9808     0.0704      2  
chosen    4      0.9569  0.9911     0.0044      3  

Prune method "none" penalty 2 nprune 4: selected 4 of 4 terms, and 3 of 3 predictors
After backward pass GRSq 0.957 RSq 0.991 

GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.993727 (8 dof)   iters 4
> show.earth.models(a2)

Print a2 

Earth selected 4 of 4 terms, and 3 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: ldose, sexmale, sexmale:ldose
Number of terms at each degree of interaction: 1 3 (additive model)
Earth GCV 2.157714    RSS 4.495238    GRSq 0.9568528    RSq 0.9910853

GLM null.deviance 124.8756 (11 dof)   deviance 4.993727 (8 dof)   iters 4

Summary a2 

Call: earth(formula=SF~sex*ldose, trace=3, glm=list(fa="b"), 
      pmethod="none")

GLM coefficients
                 numdead
(Intercept)   -1.1814689
sexmale        0.8808128
ldose          0.9060364
sexmale:ldose  0.3529130

Earth selected 4 of 4 terms, and 3 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: ldose, sexmale, sexmale:ldose
Number of terms at each degree of interaction: 1 3 (additive model)
Earth GCV 2.157714    RSS 4.495238    GRSq 0.9568528    RSq 0.9910853

GLM null.deviance 124.8756 (11 dof)   deviance 4.993727 (8 dof)   iters 4

Summary a2 digits=3, details=TRUE

Call: earth(formula=SF~sex*ldose, trace=3, glm=list(fa="b"), 
      pmethod="none")

Earth coefficients
              numdead
(Intercept)     6.038
ldose           3.257
sexmale         2.781
sexmale:ldose   0.771

GLM coefficients
              numdead
(Intercept)    -1.181
ldose           0.906
sexmale         0.881
sexmale:ldose   0.353

GLM deviance residuals:
    Min       1Q   Median       3Q      Max  
-1.3985  -0.3209  -0.0759   0.3822   1.1037  

GLM coefficients (family binomial, link logit)
              Estimate Std. Error z value Pr(>|z|)
(Intercept)     -1.181      0.285   -4.14  3.5e-05
ldose            0.906      0.167    5.42  5.9e-08
sexmale          0.881      0.388    2.27    0.023
sexmale:ldose    0.353      0.270    1.31    0.191

Number of cases: 12
Earth selected 4 of 4 terms, and 3 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: ldose, sexmale, sexmale:ldose
Number of terms at each degree of interaction: 1 3 (additive model)
Earth GCV 2.16    RSS 4.5    GRSq 0.957    RSq 0.991

GLM null.deviance 125 (11 dof)   deviance 4.99 (8 dof)   iters 4

evimp a2 

              nsubsets   gcv    rss
ldose                3 100.0  100.0
sexmale              2  27.9   26.6
sexmale:ldose        1   6.8   10.2

evimp a2 trim=FALSE

              nsubsets   gcv    rss
ldose                3 100.0  100.0
sexmale              2  27.9   26.6
sexmale:ldose        1   6.8   10.2

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a2 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula SF ~ sex * ldose
stripped formula SF~sex+ldose
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose)
got x with colnames from object$call$formula

x[12,2]:
       sex ldose
1     male    -2
2     male    -1
3     male     0
...   male     1
12  female     3

factors: sex 

nlevels: sex=2 ldose=6 

--get.plotmo.y for earth object

formula SF ~ sex * ldose
stripped formula SF~sex+ldose
no explicit data for formula
about to eval model.frame(formula=SF~sex+ldose)
got y from object$call$formula
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose
       female   0.5


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,2]:
     sex ldose
1 female   0.5
2   male   0.5

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female   0.5
2   male   0.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1 female   0.5
2   male   0.5
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale:ldose
Contents of bx are
     (Intercept) ldose sexmale sexmale:ldose
[1,]           1   0.5       0           0.0
[2,]           1   0.5       1           0.5
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.3255348 max 0.5814719
                                      value 0.3255348 0.5814719 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,2]:
       sex ldose
1   female    -2
2   female    -1
3   female     0
... female     1
6   female     3

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female    -2
2 female    -1
3 female     0
4 female     1
5 female     2
6 female     3
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1 female    -2
2 female    -1
3 female     0
4 female     1
5 female     2
6 female     3
predict.earth: bx is a 6 by 4 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale:ldose
Contents of bx are
     (Intercept) ldose sexmale sexmale:ldose
[1,]           1    -2       0             0
[2,]           1    -1       0             0
[3,]           1     0       0             0
[4,]           1     1       0             0
[5,]           1     2       0             0
[6,]           1     3       0             0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.04771849 max 0.8229758
                                      value 0.04771849 0.1103172 0.2347882 0.4315739 0.6526264 0.8229758 
-------------------------------------------------------------------------------

> # repeat with bpairs arg
> a2a <- earth(SF ~ sex*ldose, glm=list(family="binomial", bpairs=c(TRUE,FALSE)), trace=3, pmethod="none")
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=sexmale:ldose
y is a 12 by 2 matrix: 1=numdead (paired with numalive)

Forward pass: minspan 3 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.8821 0.9211       0.9211    2        ldose          -2< 2       
4      0.9525 0.9808      0.05966    1      sexmale           0< 3       
6      0.9569 0.9911      0.01033    3 sexmale:ldos          -2< 4       
8      0.8801 0.9911            0    -                                reject term

RSq changed by less than 0.001 at 7 terms (DeltaRSq 0)
After forward pass GRSq 0.880 RSq 0.991
Forward pass complete: 7 terms (4 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds
          1      0.0000  0.0000     0.0000      0  
          2      0.8821  0.9211     0.8821      1  
          3      0.9525  0.9808     0.0704      2  
chosen    4      0.9569  0.9911     0.0044      3  

Prune method "none" penalty 2 nprune 4: selected 4 of 4 terms, and 3 of 3 predictors
After backward pass GRSq 0.957 RSq 0.991 

GLM numdead: null.deviance 124.8756 (11 dof)   deviance 4.993727 (8 dof)   iters 4
> stopifnot(identical(a2$glm.list[[1]]$coefficients, a2a$glm.list[[1]]$coefficients))
> 
> a2c <- earth(SF ~ sex, glm=list(family="binomial", bpairs=c(TRUE,FALSE)), trace=0, pmethod="none")
> a2update <- update(a2, SF ~ sex, trace=0)
> check.models.equal(a2c, a2update, msg="a2c a2update")
check.models.equal not identical: a2c a2update [but within numerical tolerances]
> 
> # build a standard GLM model for comparison
> cat("a3: direct GLM a3:\n\n")
a3: direct GLM a3:

> a3 <- glm(SF ~ sex * ldose, family="binomial")
> print(summary(a3))

Call:
glm(formula = SF ~ sex * ldose, family = "binomial")

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-1.39849  -0.32094  -0.07592   0.38220   1.10375  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept)    -1.1815     0.2853  -4.141 3.46e-05 ***
sexmale         0.8808     0.3884   2.268   0.0234 *  
ldose           0.9060     0.1671   5.422 5.89e-08 ***
sexmale:ldose   0.3529     0.2700   1.307   0.1912    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 124.8756  on 11  degrees of freedom
Residual deviance:   4.9937  on  8  degrees of freedom
AIC: 43.104

Number of Fisher Scoring iterations: 4

> plotmo(a3, caption="a3 <- glm(SF ~ sex * ldose, family=\"binomial\")")

 grid:    sex ldose
       female   0.5

> cat("-------------------------------------------------------------------------------\n\n")
-------------------------------------------------------------------------------

> 
> # double response glm model with two binomial paired cols
> SF.both <- cbind(SF, SF2)
> cat("a4: double response glm model with two binomial paired cols\n\n")
a4: double response glm model with two binomial paired cols

> a4 <-  earth(SF.both ~ sex*ldose, glm=list(family="binomial"), trace=1)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=sexmale:ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 0)
After forward pass GRSq 0.783 RSq 0.984
Prune method "backward" penalty 2 nprune 4: selected 3 of 4 terms, and 2 of 3 predictors
After backward pass GRSq 0.939 RSq 0.975 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 8.572466 (9 dof)   iters 4
> show.earth.models(a4, nresponse="numdead")

Print a4 

Earth selected 3 of 4 terms, and 2 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: ldose, sexmale, sexmale:ldose-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a4 

Call: earth(formula=SF.both~sex*ldose, trace=1, glm=list(family="binomial"))

GLM coefficients
              numdead   numdead2
(Intercept) -1.344727 -1.0620705
sexmale      1.100743  0.9311516
ldose        1.064214  1.0759950

Earth selected 3 of 4 terms, and 2 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: ldose, sexmale, sexmale:ldose-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a4 decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(formula=SF.both~sex*ldose, trace=1, glm=list(family="binomial"))

Earth coefficients
            numdead numdead2
(Intercept)  5.8452   6.6429
ldose        3.6429   3.7143
sexmale      3.1667   2.6667

GLM coefficients
            numdead numdead2
(Intercept) -1.3447 -1.06207
ldose        1.0642  1.07600
sexmale      1.1007  0.93115

GLM numdead deviance residuals:
      Min         1Q     Median         3Q        Max  
-1.105398  -0.653432  -0.022249   0.484706   1.429444  

GLM numdead coefficients (family binomial, link logit)
            Estimate Std. Error z value  Pr(>|z|)
(Intercept) -1.34473    0.27965 -4.8085 1.520e-06
ldose        1.06421    0.13108  8.1190 4.702e-16
sexmale      1.10074    0.35583  3.0935  0.001978

GLM numdead2 deviance residuals:
     Min        1Q    Median        3Q       Max  
-1.25549  -0.73593   0.20315   0.69113   1.32952  

GLM numdead2 coefficients (family binomial, link logit)
            Estimate Std. Error z value  Pr(>|z|)
(Intercept) -1.06207    0.26721 -3.9747 7.048e-05
ldose        1.07600    0.13124  8.1987 2.429e-16
sexmale      0.93115    0.35232  2.6429  0.008219

Number of cases: 12
Earth selected 3 of 4 terms, and 2 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: ldose, sexmale, sexmale:ldose-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
            GCV     RSS    GRSq     RSq
numdead  2.3761  9.7024 0.95249 0.98076
numdead2 3.7901 15.4762 0.92646 0.97022
All      6.1662 25.1786 0.93928 0.97541

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead         124.88 11   6.7571  9     4         1
numdead2        128.03 11   8.5725  9     4         1

evimp a4 

        nsubsets   gcv    rss
ldose          2 100.0  100.0
sexmale        1  23.3   22.7

evimp a4 trim=FALSE

                     nsubsets   gcv    rss
ldose                       2 100.0  100.0
sexmale                     1  23.3   22.7
sexmale:ldose-unused        0   0.0    0.0

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a4 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula SF.both ~ sex * ldose
stripped formula SF.both~sex+ldose
no explicit data for formula
about to eval model.frame(formula=SF.both~sex+ldose)
got x with colnames from object$call$formula

x[12,2]:
       sex ldose
1     male    -2
2     male    -1
3     male     0
...   male     1
12  female     3

factors: sex 

nlevels: sex=2 ldose=6 

--get.plotmo.y for earth object

formula SF.both ~ sex * ldose
stripped formula SF.both~sex+ldose
no explicit data for formula
about to eval model.frame(formula=SF.both~sex+ldose)
got y from object$call$formula
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose
       female   0.5


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,2]:
     sex ldose
1 female   0.5
2   male   0.5

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female   0.5
2   male   0.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1 female   0.5
2   male   0.5
predict.earth: bx is a 2 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1   0.5       0
[2,]           1   0.5       1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.3073324 max 0.5715365
                                      value 0.3073324 0.5715365 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,2]:
       sex ldose
1   female    -2
2   female    -1
3   female     0
... female     1
6   female     3

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female    -2
2 female    -1
3 female     0
4 female     1
5 female     2
6 female     3
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1 female    -2
2 female    -1
3 female     0
4 female     1
5 female     2
6 female     3
predict.earth: bx is a 6 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       0
[2,]           1    -1       0
[3,]           1     0       0
[4,]           1     1       0
[5,]           1     2       0
[6,]           1     3       0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.03008577 max 0.8638821
                                      value 0.03008577 0.08249341 0.2067337 0.4303279 0.6864771 0.8638821 
-------------------------------------------------------------------------------

> print.stripped.earth.model(a4, "a4")
print.stripped.earth.model(a4)
$dirs
              sexmale ldose sexmale:ldose
(Intercept)         0     0             0
ldose               0     2             0
sexmale             2     0             0
sexmale:ldose       0     0             2

$cuts
              sexmale ldose sexmale:ldose
(Intercept)         0     0             0
ldose               0    -2             0
sexmale             0     0             0
sexmale:ldose       0     0            -2

$selected.terms
[1] 1 2 3

$prune.terms
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    1    2    0    0
[3,]    1    2    3    0
[4,]    1    2    3    4

$rss
[1] 25.17857

$rsq
[1] 0.9754096

$gcv
[1] 6.166181

$grsq
[1] 0.9392766

$rss.per.response
[1]  9.702381 15.476190

$rsq.per.response
[1] 0.9807588 0.9702190

$gcv.per.response
[1] 2.376093 3.790087

$grsq.per.response
[1] 0.9524860 0.9264592

$rss.per.subset
[1] 1023.91667   76.59524   25.17857   16.51429

$gcv.per.subset
[1] 101.545455  11.347443   6.166181   7.926857

$rss.per.subset
[1] 1023.91667   76.59524   25.17857   16.51429

$gcv.per.subset
[1] 101.545455  11.347443   6.166181   7.926857

$coefficients
             numdead numdead2
(Intercept) 5.845238 6.642857
ldose       3.642857 3.714286
sexmale     3.166667 2.666667

$penalty
[1] 2

$nk
[1] 21

$thresh
[1] 0.001

$termcond
[1] 4

$weights
NULL

$glm.list
$glm.list[[1]]

Call:  glm(formula = yarg ~ ., family = family, data = bx.data.frame, 
    weights = weights, na.action = na.action, control = control, 
    model = TRUE, method = "glm.fit", x = TRUE, y = TRUE, contrasts = NULL, 
    trace = (trace >= 2))

Coefficients:
(Intercept)        ldose      sexmale  
     -1.345        1.064        1.101  

Degrees of Freedom: 11 Total (i.e. Null);  9 Residual
Null Deviance:	    124.9 
Residual Deviance: 6.757 	AIC: 42.87

$glm.list[[2]]

Call:  glm(formula = yarg ~ ., family = family, data = bx.data.frame, 
    weights = weights, na.action = na.action, control = control, 
    model = TRUE, method = "glm.fit", x = TRUE, y = TRUE, contrasts = NULL, 
    trace = (trace >= 2))

Coefficients:
(Intercept)        ldose      sexmale  
    -1.0621       1.0760       0.9312  

Degrees of Freedom: 11 Total (i.e. Null);  9 Residual
Null Deviance:	    128 
Residual Deviance: 8.572 	AIC: 44.6


$glm.coefficients
              numdead   numdead2
(Intercept) -1.344727 -1.0620705
ldose        1.064214  1.0759950
sexmale      1.100743  0.9311515

$glm.bpairs
[1]  TRUE FALSE  TRUE FALSE

$namesx.org
[1] "sex"   "ldose"

$namesx
[1] "sex"   "ldose"

$terms
SF.both ~ sex * ldose
attr(,"variables")
list(SF.both, sex, ldose)
attr(,"factors")
        sex ldose sex:ldose
SF.both   0     0         0
sex       1     0         1
ldose     0     1         1
attr(,"term.labels")
[1] "sex"       "ldose"     "sex:ldose"
attr(,"order")
[1] 1 1 2
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(SF.both, sex, ldose)
attr(,"dataClasses")
    SF.both         sex       ldose 
"nmatrix.4"    "factor"   "numeric" 

$call
earth(formula = SF.both ~ sex * ldose, trace = 1, glm = list(family = "binomial"))

attr(,"class")
[1] "earth"
-------------------------------------------------------------------------------

> # repeat with bpairs arg
> a4a <- earth(SF.both ~ sex*ldose, glm=list(fam="bi", bpa=c(TRUE,FALSE,TRUE,FALSE)), trace=1)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=sexmale:ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 0)
After forward pass GRSq 0.783 RSq 0.984
Prune method "backward" penalty 2 nprune 4: selected 3 of 4 terms, and 2 of 3 predictors
After backward pass GRSq 0.939 RSq 0.975 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 8.572466 (9 dof)   iters 4
> stopifnot(identical(a4$glm.list[[1]]$coefficients, a4a$glm.list[[1]]$coefficients))
> stopifnot(identical(a4$glm.list[[2]]$coefficients, a4a$glm.list[[2]]$coefficients))
> a4update <- update(a4a, trace=0)
> check.models.equal(a4update, a4a, msg="a4update a4a")
check.models.equal not identical: a4update a4a [but within numerical tolerances]
> 
> # alternative way of specifying bpairs
> a4aa <- earth(SF.both ~ sex*ldose, glm=list(fam="bi", bpa=c(1,3)), trace=1)
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=sexmale:ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 0)
After forward pass GRSq 0.783 RSq 0.984
Prune method "backward" penalty 2 nprune 4: selected 3 of 4 terms, and 2 of 3 predictors
After backward pass GRSq 0.939 RSq 0.975 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 8.572466 (9 dof)   iters 4
> check.models.equal(a4aa, a4a, msg="a4aa a4a")
check.models.equal not identical: a4aa a4a [but within numerical tolerances]
> 
> a4d <- earth(SF.both ~ ldose, glm=list(fam="bino", bpa=c(TRUE,FALSE,TRUE,FALSE)), trace=0)
> a4update <- update(a4a, form=SF.both ~ ldose)
x is a 12 by 1 matrix: 1=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4
RSq changed by less than 0.001 at 3 terms (DeltaRSq 0)
After forward pass GRSq 0.815 RSq 0.925
Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 0.888 RSq 0.925 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 16.98403 (10 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 15.90252 (10 dof)   iters 4
> check.models.equal(a4update, a4d, msg="a4update a4d no keepxy")
check.models.equal not identical: a4update a4d no keepxy [but within numerical tolerances]
> 
> # titanic data, multiple responses (i.e. 3 level factor)
> cat("a5: titanic data, multiple responses (i.e. 3 level factor)\n\n")
a5: titanic data, multiple responses (i.e. 3 level factor)

> a5 <- earth(pclass ~ ., data=etitanic, degree=2, glm=list(family="binomial"), trace=0)
> show.earth.models(a5, nresponse=3)

Print a5 

Earth selected 9 of 17 terms, and 5 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, parch, survived, sibsp, sexmale
Number of terms at each degree of interaction: 1 4 4

Earth
          GCV      RSS        GRSq        RSq
1st 0.1478715 148.5253 0.253819943 0.28210854
2nd 0.1869804 187.8072 0.003405389 0.04118751
3rd 0.1895587 190.3968 0.241872961 0.27061448
All 0.5244105 526.7293 0.175229617 0.20649767

GLM (family binomial, link logit)
    null.deviance   df  deviance   df iters converged
1st      1223.308 1045  894.8141 1037     5         1
2nd      1175.305 1045 1126.9441 1037     5         1
3rd      1448.213 1045 1118.9411 1037     5         1

Summary a5 

Call: earth(formula=pclass~., data=etitanic, trace=0, glm=list(family="binomial"), 
      degree=2)

GLM coefficients
                                1st         2nd         3rd
(Intercept)             -2.66307135 -1.93136147  1.37992944
survived                 2.84788552  1.06418271 -2.84378575
sexmale                  1.42483431  0.96598862 -1.45239590
h(sibsp-1)              -0.52879762 -0.64928949  0.79974678
h(2-parch)               1.25518755  0.06534587 -1.29855706
survived * sexmale      -1.25498201 -1.95099222  2.28554497
survived * h(16-age)    -0.17824991  0.09390085  0.02011681
h(55-age) * h(2-parch)  -0.04946408  0.00043737  0.04146455
h(1-sibsp) * h(1-parch) -1.02162885 -0.21902436  1.12490799

Earth selected 9 of 17 terms, and 5 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, parch, survived, sibsp, sexmale
Number of terms at each degree of interaction: 1 4 4

Earth
          GCV      RSS        GRSq        RSq
1st 0.1478715 148.5253 0.253819943 0.28210854
2nd 0.1869804 187.8072 0.003405389 0.04118751
3rd 0.1895587 190.3968 0.241872961 0.27061448
All 0.5244105 526.7293 0.175229617 0.20649767

GLM (family binomial, link logit)
    null.deviance   df  deviance   df iters converged
1st      1223.308 1045  894.8141 1037     5         1
2nd      1175.305 1045 1126.9441 1037     5         1
3rd      1448.213 1045 1118.9411 1037     5         1

Summary a5 digits=3, details=TRUE

Call: earth(formula=pclass~., data=etitanic, trace=0, glm=list(family="binomial"), 
      degree=2)

Earth coefficients
                            1st      2nd     3rd
(Intercept)              0.1397  0.13822  0.7221
survived                 0.3519  0.16023 -0.5121
h(sibsp-1)              -0.0480 -0.06756  0.1155
h(2-parch)               0.2173  0.00942 -0.2268
survived * h(16-age)    -0.0233  0.01869  0.0046
survived * sexmale      -0.0959 -0.30327  0.3992
sexmale                  0.1094  0.13653 -0.2459
h(55-age) * h(2-parch)  -0.0078  0.00004  0.0078
h(1-sibsp) * h(1-parch) -0.1624 -0.03288  0.1953

GLM coefficients
                            1st     2nd     3rd
(Intercept)             -2.6631 -1.9314  1.3799
survived                 2.8479  1.0642 -2.8438
h(sibsp-1)              -0.5288 -0.6493  0.7997
h(2-parch)               1.2552  0.0653 -1.2986
survived * h(16-age)    -0.1782  0.0939  0.0201
survived * sexmale      -1.2550 -1.9510  2.2855
sexmale                  1.4248  0.9660 -1.4524
h(55-age) * h(2-parch)  -0.0495  0.0004  0.0415
h(1-sibsp) * h(1-parch) -1.0216 -0.2190  1.1249

GLM 1st deviance residuals:
   Min      1Q  Median      3Q     Max  
-2.021  -0.684  -0.358   0.569   2.660  

GLM 1st coefficients (family binomial, link logit)
                        Estimate Std. Error z value Pr(>|z|)
(Intercept)             -2.66307    0.52983   -5.03  5.0e-07
survived                 2.84789    0.51049    5.58  2.4e-08
h(sibsp-1)              -0.52880    0.23651   -2.24  0.02537
h(2-parch)               1.25519    0.18758    6.69  2.2e-11
survived * h(16-age)    -0.17825    0.05157   -3.46  0.00055
survived * sexmale      -1.25498    0.56404   -2.23  0.02608
sexmale                  1.42483    0.50927    2.80  0.00515
h(55-age) * h(2-parch)  -0.04946    0.00441  -11.22  < 2e-16
h(1-sibsp) * h(1-parch) -1.02163    0.21299   -4.80  1.6e-06

GLM 2nd deviance residuals:
   Min      1Q  Median      3Q     Max  
-1.454  -0.807  -0.775  -0.104   2.071  

GLM 2nd coefficients (family binomial, link logit)
                         Estimate Std. Error z value Pr(>|z|)
(Intercept)             -1.931361   0.376978   -5.12  3.0e-07
survived                 1.064183   0.349791    3.04  0.00235
h(sibsp-1)              -0.649289   0.223077   -2.91  0.00361
h(2-parch)               0.065346   0.173310    0.38  0.70614
survived * h(16-age)     0.093901   0.028429    3.30  0.00096
survived * sexmale      -1.950992   0.437220   -4.46  8.1e-06
sexmale                  0.965989   0.343006    2.82  0.00486
h(55-age) * h(2-parch)   0.000437   0.003580    0.12  0.90276
h(1-sibsp) * h(1-parch) -0.219024   0.192991   -1.13  0.25642

GLM 3rd deviance residuals:
   Min      1Q  Median      3Q     Max  
-2.329  -0.839  -0.322   0.899   2.619  

GLM 3rd coefficients (family binomial, link logit)
                        Estimate Std. Error z value Pr(>|z|)
(Intercept)              1.37993    0.35341    3.90  9.4e-05
survived                -2.84379    0.33834   -8.41  < 2e-16
h(sibsp-1)               0.79975    0.19120    4.18  2.9e-05
h(2-parch)              -1.29856    0.19122   -6.79  1.1e-11
survived * h(16-age)     0.02012    0.02845    0.71     0.48
survived * sexmale       2.28554    0.39903    5.73  1.0e-08
sexmale                 -1.45240    0.32194   -4.51  6.4e-06
h(55-age) * h(2-parch)   0.04146    0.00406   10.21  < 2e-16
h(1-sibsp) * h(1-parch)  1.12491    0.20357    5.53  3.3e-08

Number of cases: 1046
Earth selected 9 of 17 terms, and 5 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, parch, survived, sibsp, sexmale
Number of terms at each degree of interaction: 1 4 4

Earth
      GCV RSS    GRSq    RSq
1st 0.148 148 0.25382 0.2821
2nd 0.187 188 0.00341 0.0412
3rd 0.190 190 0.24187 0.2706
All 0.524 527 0.17523 0.2065

GLM (family binomial, link logit)
    null.deviance   df deviance   df iters converged
1st          1223 1045      895 1037     5         1
2nd          1175 1045     1127 1037     5         1
3rd          1448 1045     1119 1037     5         1

evimp a5 

         nsubsets   gcv    rss
age             8 100.0  100.0
parch           8 100.0  100.0
survived        7  79.7   81.7
sibsp           5  40.3   48.0
sexmale         4  34.4   41.7

evimp a5 trim=FALSE

         nsubsets   gcv    rss
age             8 100.0  100.0
parch           8 100.0  100.0
survived        7  79.7   81.7
sibsp           5  40.3   48.0
sexmale         4  34.4   41.7

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a5 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula pclass ~ .
stripped formula pclass~.
get.data.for.formula: using x from "etitanic" passed to earth 
about to eval model.frame(formula=pclass~., data=structure(list(pclass=structure(c(1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, ...
got x with colnames from object$call$formula

x[1046,5]:
     survived    sex     age sibsp parch
1           1 female 29.0000     0     0
2           1   male  0.9167     1     2
3           0 female  2.0000     1     2
...         0   male 30.0000     1     2
1309        0   male 29.0000     0     0

factors: sex 

nlevels: survived=2 sex=2 age=98 sibsp=7 parch=7 

--get.plotmo.y for earth object

formula pclass ~ .
stripped formula pclass~.
get.data.for.formula: using y from "etitanic" passed to earth 
about to eval model.frame(formula=pclass~., data=structure(list(pclass=structure(c(1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, ...
got y from object$call$formula
get.plotmo.y column "1st" returned length 1046 min 0 max 1
             value 1 1 1 1 1 1 1 1 1 1 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 survived, 2 sex, 4 sibsp, 5 parch 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]     
[1,] "1 survived" "2 sex"  
[2,] "1 survived" "3 age"  
[3,] "3 age"      "5 parch"
[4,] "4 sibsp"    "5 parch"

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    survived    sex age sibsp parch
                 0 female  28     0     0


plotmo.predict(type="response") for degree1 plot "survived" with newdata[2,5]:
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0
predict.earth: bx is a 2 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
Contents of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2                  0
[2,]           1        1          0          2                  0
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0                   54                     1
[2,]                0       0                   54                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 2 min 0.3324828 max 0.8953702
                                      value 0.8953702 0.3324828 

plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,5]:
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0   male  28     0     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0   male  28     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0   male  28     0     0
predict.earth: bx is a 2 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
Contents of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2                  0
[2,]           1        0          0          2                  0
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0                   54                     1
[2,]                0       1                   54                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 2 min 0.6669479 max 0.8953702
                                      value 0.8953702 0.6669479 

plotmo.predict(type="response") for degree1 plot "sibsp" with newdata[7,5]:
    survived    sex age sibsp parch
1          0 female  28     0     0
2          0 female  28     1     0
3          0 female  28     2     0
...        0 female  28     3     0
7          0 female  28     8     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 7 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp (integer), 5=parch
First few rows of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     1     0
3        0 female  28     2     0
4        0 female  28     3     0
5        0 female  28     4     0
6        0 female  28     5     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 7 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp (integer), 5=parch
First few rows of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     1     0
3        0 female  28     2     0
4        0 female  28     3     0
5        0 female  28     4     0
6        0 female  28     5     0
predict.earth: bx is a 7 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2                  0
[2,]           1        0          0          2                  0
[3,]           1        0          1          2                  0
[4,]           1        0          2          2                  0
[5,]           1        0          3          2                  0
[6,]           1        0          4          2                  0
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0                   54                     1
[2,]                0       0                   54                     0
[3,]                0       0                   54                     0
[4,]                0       0                   54                     0
[5,]                0       0                   54                     0
[6,]                0       0                   54                     0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 7 min 0.7353427 max 0.9986685
                                      value 0.8953702 0.7353427 0.8607637 0.9322259 0.9683588 0.9855269 0.9986685 

plotmo.predict(type="response") for degree1 plot "parch" with newdata[7,5]:
    survived    sex age sibsp parch
1          0 female  28     0     0
2          0 female  28     0     1
3          0 female  28     0     2
...        0 female  28     0     3
7          0 female  28     0     6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 7 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     0     1
3        0 female  28     0     2
4        0 female  28     0     3
5        0 female  28     0     4
6        0 female  28     0     5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 7 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     0     1
3        0 female  28     0     2
4        0 female  28     0     3
5        0 female  28     0     4
6        0 female  28     0     5
predict.earth: bx is a 7 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2                  0
[2,]           1        0          0          1                  0
[3,]           1        0          0          0                  0
[4,]           1        0          0          0                  0
[5,]           1        0          0          0                  0
[6,]           1        0          0          0                  0
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0                   54                     1
[2,]                0       0                   27                     0
[3,]                0       0                    0                     0
[4,]                0       0                    0                     0
[5,]                0       0                    0                     0
[6,]                0       0                    0                     0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 7 min 0.7686875 max 0.8953702
                                      value 0.8953702 0.7686875 0.7989797 0.7989797 0.7989797 0.7989797 0.7989797 

--plot.degree2(draw.plot=TRUE)

plotmo.predict(type="response") for degree2 plot "survived:sex" with newdata[4,5]:
    survived    sex age sibsp parch
1          0 female  28     0     0
2          1 female  28     0     0
1.1        0   male  28     0     0
2.1        1   male  28     0     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 4 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0
3        0   male  28     0     0
4        1   male  28     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 4 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0
3        0   male  28     0     0
4        1   male  28     0     0
predict.earth: bx is a 4 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
Contents of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2                  0
[2,]           1        1          0          2                  0
[3,]           1        0          0          2                  0
[4,]           1        1          0          2                  0
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0                   54                     1
[2,]                0       0                   54                     1
[3,]                0       1                   54                     1
[4,]                1       1                   54                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 4 min 0.3324828 max 0.8953702
                                      value 0.8953702 0.3324828 0.6669479 0.5339905 
persp(survived:sex) theta 145 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "survived:age" with newdata[40,5]:
    survived    sex       age sibsp parch
1          0 female  0.166700     0     0
2          1 female  0.166700     0     0
3          0 female  4.368453     0     0
...        1 female  4.368453     0     0
40         1 female 80.000000     0     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 40 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
First few rows of x are
  survived    sex      age sibsp parch
1        0 female 0.166700     0     0
2        1 female 0.166700     0     0
3        0 female 4.368453     0     0
4        1 female 4.368453     0     0
5        0 female 8.570205     0     0
6        1 female 8.570205     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 40 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
First few rows of data after call to model.frame are
  survived    sex      age sibsp parch
1        0 female 0.166700     0     0
2        1 female 0.166700     0     0
3        0 female 4.368453     0     0
4        1 female 4.368453     0     0
5        0 female 8.570205     0     0
6        1 female 8.570205     0     0
predict.earth: bx is a 40 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2           0.000000
[2,]           1        1          0          2          15.833300
[3,]           1        0          0          2           0.000000
[4,]           1        1          0          2          11.631547
[5,]           1        0          0          2           0.000000
[6,]           1        1          0          2           7.429795
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0            109.66660                     1
[2,]                0       0            109.66660                     1
[3,]                0       0            101.26309                     1
[4,]                0       0            101.26309                     1
[5,]                0       0             92.85959                     1
[6,]                0       0             92.85959                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 40 min 0.05039939 max 0.9885132
                                      value 0.9885132 0.8732194 0.9838022 0.8170901 0.9772039 0.7434127 0.968005 0.6526728 0.955264 0.5541427 ...
persp(survived:age) theta 145 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "age:parch" with newdata[140,5]:
     survived    sex       age sibsp parch
1           0 female  0.166700     0     0
2           0 female  4.368453     0     0
3           0 female  8.570205     0     0
...         0 female 12.771958     0     0
20.6        0 female 80.000000     0     6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 140 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of x are
  survived    sex       age sibsp parch
1        0 female  0.166700     0     0
2        0 female  4.368453     0     0
3        0 female  8.570205     0     0
4        0 female 12.771958     0     0
5        0 female 16.973711     0     0
6        0 female 21.175463     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 140 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of data after call to model.frame are
  survived    sex       age sibsp parch
1        0 female  0.166700     0     0
2        0 female  4.368453     0     0
3        0 female  8.570205     0     0
4        0 female 12.771958     0     0
5        0 female 16.973711     0     0
6        0 female 21.175463     0     0
predict.earth: bx is a 140 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2                  0
[2,]           1        0          0          2                  0
[3,]           1        0          0          2                  0
[4,]           1        0          0          2                  0
[5,]           1        0          0          2                  0
[6,]           1        0          0          2                  0
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0            109.66660                     1
[2,]                0       0            101.26309                     1
[3,]                0       0             92.85959                     1
[4,]                0       0             84.45608                     1
[5,]                0       0             76.05258                     1
[6,]                0       0             67.64907                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 140 min 0.4769472 max 0.9885132
                                      value 0.9885132 0.9838022 0.9772039 0.968005 0.955264 0.9377755 0.9140653 0.8824529 0.8412314 0.7890105 ...
persp(age:parch) theta 145 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "sibsp:parch" with newdata[49,5]:
    survived    sex age sibsp parch
1          0 female  28     0     0
2          0 female  28     1     0
3          0 female  28     2     0
...        0 female  28     3     0
7.6        0 female  28     8     6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 49 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp (integer), 5=parch (integer)
First few rows of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     1     0
3        0 female  28     2     0
4        0 female  28     3     0
5        0 female  28     4     0
6        0 female  28     5     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 49 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp (integer), 5=parch (integer)
First few rows of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     1     0
3        0 female  28     2     0
4        0 female  28     3     0
5        0 female  28     4     0
6        0 female  28     5     0
predict.earth: bx is a 49 by 9 matrix: 1=(Intercept), 2=survived, 3=h(sibsp-1), 4=h(2-parch), 5=survived*h(16-age), 6=survived*sexmale, 7=sexmale, 8=h(55-age)*h(2-parch), 9=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived h(sibsp-1) h(2-parch) survived*h(16-age)
[1,]           1        0          0          2                  0
[2,]           1        0          0          2                  0
[3,]           1        0          1          2                  0
[4,]           1        0          2          2                  0
[5,]           1        0          3          2                  0
[6,]           1        0          4          2                  0
     survived*sexmale sexmale h(55-age)*h(2-parch) h(1-sibsp)*h(1-parch)
[1,]                0       0                   54                     1
[2,]                0       0                   54                     0
[3,]                0       0                   54                     0
[4,]                0       0                   54                     0
[5,]                0       0                   54                     0
[6,]                0       0                   54                     0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "3rd" returned length 49 min 0.7353427 max 0.9990688
                                      value 0.8953702 0.7353427 0.8607637 0.9322259 0.9683588 0.9855269 0.9986685 0.7686875 0.7686875 0.8808666 ...
persp(sibsp:parch) theta -35 ylim 0 1 cex 0.66

-------------------------------------------------------------------------------

> printh(a5$levels)
=== a5$levels
[1] "1st" "2nd" "3rd"
> print.stripped.earth.model(a5, "a5")
print.stripped.earth.model(a5)
$dirs
                      survived sexmale age sibsp parch
(Intercept)                  0       0   0     0     0
h(age-26)                    0       0   1     0     0
h(26-age)                    0       0  -1     0     0
survived                     2       0   0     0     0
h(sibsp-1)                   0       0   0     1     0
h(1-sibsp)                   0       0   0    -1     0
h(parch-2)                   0       0   0     0     1
h(2-parch)                   0       0   0     0    -1
survived*h(age-16)           2       0   1     0     0
survived*h(16-age)           2       0  -1     0     0
survived*sexmale             2       2   0     0     0
sexmale                      0       2   0     0     0
h(age-55)*h(2-parch)         0       0   1     0    -1
h(55-age)*h(2-parch)         0       0  -1     0    -1
h(1-sibsp)*h(parch-1)        0       0   0    -1     1
h(1-sibsp)*h(1-parch)        0       0   0    -1    -1
h(age-54)                    0       0   1     0     0

$cuts
                      survived sexmale age sibsp parch
(Intercept)                  0       0   0     0     0
h(age-26)                    0       0  26     0     0
h(26-age)                    0       0  26     0     0
survived                     0       0   0     0     0
h(sibsp-1)                   0       0   0     1     0
h(1-sibsp)                   0       0   0     1     0
h(parch-2)                   0       0   0     0     2
h(2-parch)                   0       0   0     0     2
survived*h(age-16)           0       0  16     0     0
survived*h(16-age)           0       0  16     0     0
survived*sexmale             0       0   0     0     0
sexmale                      0       0   0     0     0
h(age-55)*h(2-parch)         0       0  55     0     2
h(55-age)*h(2-parch)         0       0  55     0     2
h(1-sibsp)*h(parch-1)        0       0   0     1     1
h(1-sibsp)*h(1-parch)        0       0   0     1     1
h(age-54)                    0       0  54     0     0

$selected.terms
[1]  1  4  5  8 10 11 12 14 16

$prune.terms
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    0    0    0    0    0    0    0    0     0     0     0     0
 [2,]    1   14    0    0    0    0    0    0    0     0     0     0     0
 [3,]    1    4   14    0    0    0    0    0    0     0     0     0     0
 [4,]    1    4    8   14    0    0    0    0    0     0     0     0     0
 [5,]    1    4    8   14   16    0    0    0    0     0     0     0     0
 [6,]    1    4    8   11   14   16    0    0    0     0     0     0     0
 [7,]    1    4    8   11   12   14   16    0    0     0     0     0     0
 [8,]    1    4    5    8   11   12   14   16    0     0     0     0     0
 [9,]    1    4    5    8   10   11   12   14   16     0     0     0     0
[10,]    1    4    5    8   10   11   12   14   16    17     0     0     0
[11,]    1    4    5    8   10   11   12   13   14    16    17     0     0
[12,]    1    4    5    7    8   10   11   12   13    14    16    17     0
[13,]    1    3    4    5    7    8   10   11   12    13    14    16    17
[14,]    1    3    4    5    7    8    9   10   11    12    13    14    16
[15,]    1    3    4    5    6    7    8    9   10    11    12    13    14
[16,]    1    3    4    5    6    7    8    9   10    11    12    13    14
[17,]    1    2    3    4    5    6    7    8    9    10    11    12    13
      [,14] [,15] [,16] [,17]
 [1,]     0     0     0     0
 [2,]     0     0     0     0
 [3,]     0     0     0     0
 [4,]     0     0     0     0
 [5,]     0     0     0     0
 [6,]     0     0     0     0
 [7,]     0     0     0     0
 [8,]     0     0     0     0
 [9,]     0     0     0     0
[10,]     0     0     0     0
[11,]     0     0     0     0
[12,]     0     0     0     0
[13,]     0     0     0     0
[14,]    17     0     0     0
[15,]    16    17     0     0
[16,]    15    16    17     0
[17,]    14    15    16    17

$rss
[1] 526.7293

$rsq
[1] 0.2064977

$gcv
[1] 0.5244105

$grsq
[1] 0.1752296

$rss.per.response
[1] 148.5253 187.8072 190.3968

$rsq.per.response
[1] 0.28210854 0.04118751 0.27061448

$gcv.per.response
[1] 0.1478715 0.1869804 0.1895587

$grsq.per.response
[1] 0.253819943 0.003405389 0.241872961

$rss.per.subset
 [1] 663.8031 618.3144 587.1155 558.2529 550.5473 546.0083 539.0533 532.1400
 [9] 526.7293 526.1097 522.0963 519.3960 516.5436 515.0676 514.2161 513.5054
[17] 513.3259

$gcv.per.subset
 [1] 0.6358261 0.5950986 0.5677911 0.5424834 0.5375831 0.5357360 0.5314825
 [8] 0.5272225 0.5244105 0.5263582 0.5249065 0.5247609 0.5244530 0.5255400
[15] 0.5272719 0.5291595 0.5316095

$rss.per.subset
 [1] 663.8031 618.3144 587.1155 558.2529 550.5473 546.0083 539.0533 532.1400
 [9] 526.7293 526.1097 522.0963 519.3960 516.5436 515.0676 514.2161 513.5054
[17] 513.3259

$gcv.per.subset
 [1] 0.6358261 0.5950986 0.5677911 0.5424834 0.5375831 0.5357360 0.5314825
 [8] 0.5272225 0.5244105 0.5263582 0.5249065 0.5247609 0.5244530 0.5255400
[15] 0.5272719 0.5291595 0.5316095

$coefficients
                               1st           2nd          3rd
(Intercept)            0.139677983  0.1382163301  0.722105687
survived               0.351855854  0.1602346217 -0.512090476
h(sibsp-1)            -0.047958497 -0.0675639271  0.115522424
h(2-parch)             0.217333399  0.0094234505 -0.226756850
survived*h(16-age)    -0.023258457  0.0186856516  0.004572806
survived*sexmale      -0.095932289 -0.3032702269  0.399202516
sexmale                0.109367428  0.1365288369 -0.245896265
h(55-age)*h(2-parch)  -0.007847314  0.0000355992  0.007811715
h(1-sibsp)*h(1-parch) -0.162393009 -0.0328783910  0.195271400

$penalty
[1] 3

$nk
[1] 21

$thresh
[1] 0.001

$termcond
[1] 7

$weights
NULL

$glm.list
$glm.list[[1]]

Call:  glm(formula = yarg ~ ., family = family, data = bx.data.frame, 
    weights = weights, na.action = na.action, control = control, 
    model = TRUE, method = "glm.fit", x = TRUE, y = TRUE, contrasts = NULL, 
    trace = (trace >= 2))

Coefficients:
            (Intercept)                 survived             `h(sibsp-1)`  
               -2.66307                  2.84789                 -0.52880  
           `h(2-parch)`     `survived*h(16-age)`       `survived*sexmale`  
                1.25519                 -0.17825                 -1.25498  
                sexmale   `h(55-age)*h(2-parch)`  `h(1-sibsp)*h(1-parch)`  
                1.42483                 -0.04946                 -1.02163  

Degrees of Freedom: 1045 Total (i.e. Null);  1037 Residual
Null Deviance:	    1223 
Residual Deviance: 894.8 	AIC: 912.8

$glm.list[[2]]

Call:  glm(formula = yarg ~ ., family = family, data = bx.data.frame, 
    weights = weights, na.action = na.action, control = control, 
    model = TRUE, method = "glm.fit", x = TRUE, y = TRUE, contrasts = NULL, 
    trace = (trace >= 2))

Coefficients:
            (Intercept)                 survived             `h(sibsp-1)`  
             -1.9313615                1.0641827               -0.6492895  
           `h(2-parch)`     `survived*h(16-age)`       `survived*sexmale`  
              0.0653459                0.0939009               -1.9509922  
                sexmale   `h(55-age)*h(2-parch)`  `h(1-sibsp)*h(1-parch)`  
              0.9659886                0.0004374               -0.2190244  

Degrees of Freedom: 1045 Total (i.e. Null);  1037 Residual
Null Deviance:	    1175 
Residual Deviance: 1127 	AIC: 1145

$glm.list[[3]]

Call:  glm(formula = yarg ~ ., family = family, data = bx.data.frame, 
    weights = weights, na.action = na.action, control = control, 
    model = TRUE, method = "glm.fit", x = TRUE, y = TRUE, contrasts = NULL, 
    trace = (trace >= 2))

Coefficients:
            (Intercept)                 survived             `h(sibsp-1)`  
                1.37993                 -2.84379                  0.79975  
           `h(2-parch)`     `survived*h(16-age)`       `survived*sexmale`  
               -1.29856                  0.02012                  2.28554  
                sexmale   `h(55-age)*h(2-parch)`  `h(1-sibsp)*h(1-parch)`  
               -1.45240                  0.04146                  1.12491  

Degrees of Freedom: 1045 Total (i.e. Null);  1037 Residual
Null Deviance:	    1448 
Residual Deviance: 1119 	AIC: 1137


$glm.coefficients
                              1st          2nd         3rd
(Intercept)           -2.66307135 -1.931361472  1.37992944
survived               2.84788552  1.064182711 -2.84378575
h(sibsp-1)            -0.52879762 -0.649289486  0.79974678
h(2-parch)             1.25518755  0.065345867 -1.29855706
survived*h(16-age)    -0.17824991  0.093900852  0.02011681
survived*sexmale      -1.25498201 -1.950992216  2.28554497
sexmale                1.42483431  0.965988623 -1.45239590
h(55-age)*h(2-parch)  -0.04946408  0.000437374  0.04146455
h(1-sibsp)*h(1-parch) -1.02162885 -0.219024356  1.12490799

$namesx.org
[1] "survived" "sex"      "age"      "sibsp"    "parch"   

$namesx
[1] "survived" "sex"      "age"      "sibsp"    "parch"   

$levels
[1] "1st" "2nd" "3rd"

$terms
pclass ~ survived + sex + age + sibsp + parch
attr(,"variables")
list(pclass, survived, sex, age, sibsp, parch)
attr(,"factors")
         survived sex age sibsp parch
pclass          0   0   0     0     0
survived        1   0   0     0     0
sex             0   1   0     0     0
age             0   0   1     0     0
sibsp           0   0   0     1     0
parch           0   0   0     0     1
attr(,"term.labels")
[1] "survived" "sex"      "age"      "sibsp"    "parch"   
attr(,"order")
[1] 1 1 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(pclass, survived, sex, age, sibsp, parch)
attr(,"dataClasses")
   pclass  survived       sex       age     sibsp     parch 
 "factor" "numeric"  "factor" "numeric" "numeric" "numeric" 

$call
earth(formula = pclass ~ ., data = etitanic, trace = 0, glm = list(family = "binomial"), 
    degree = 2)

attr(,"class")
[1] "earth"
-------------------------------------------------------------------------------

> 
> a5d <- earth(pclass ~ .-age, data=etitanic, degree=2, glm=list(family="binomial"), trace=0)
> a5update <- update(a5, form=pclass ~ .-age)
> check.models.equal(a5update, a5d, msg="a5update a5d")
check.models.equal not identical: a5update a5d [but within numerical tolerances]
> 
> a5d <- earth(pclass ~ .-age, data=etitanic, degree=2, glm=list(family="binomial"), trace=0, keepxy=1)
> a5update <- update(a5, form=pclass ~ .-age)
> check.models.equal(a5update, a5d, msg="a5update a5d with keepxy")
check.models.equal not identical: a5update a5d with keepxy [but within numerical tolerances]
> 
> # titanic data, one logical response
> cat("a6: titanic data, one logical response\n\n")
a6: titanic data, one logical response

> pclass1 = (etitanic[,1] == "1st")
> a6 <- earth(pclass1 ~ ., data=etitanic[,-1], degree=2, glm=list(family="binomial"), trace=1)
x is a 1046 by 5 matrix: 1=survived, 2=sexmale, 3=age, 4=sibsp, 5=parch
y is a 1046 by 1 matrix: 1=pclass1
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.250 RSq 0.310
Prune method "backward" penalty 3 nprune 18: selected 8 of 18 terms, and 4 of 5 predictors
After backward pass GRSq 0.27 RSq 0.294 
GLM pclass1: null.deviance 1223.308 (1045 dof)   deviance 902.3217 (1038 dof)   iters 5
> show.earth.models(a6)

Print a6 

Earth selected 8 of 18 terms, and 4 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, survived, parch, sibsp, sexmale-unused
Number of terms at each degree of interaction: 1 3 4
Earth GCV 0.1446933    RSS 146.0429    GRSq 0.2698572    RSq 0.294107

GLM null.deviance 1223.308 (1045 dof)   deviance 902.3217 (1038 dof)   iters 5

Summary a6 

Call: earth(formula=pclass1~., data=etitanic[, -1], trace=1, 
      glm=list(family="binomial"), degree=2)

GLM coefficients
                           pclass1
(Intercept)             -2.2583821
survived                 1.8930309
h(age-44)                0.2062463
h(2-parch)               1.2445727
survived * h(53-age)    -0.0111684
h(48-age) * h(2-parch)  -0.0476465
h(age-48) * h(2-parch)  -0.1177420
h(1-sibsp) * h(1-parch) -0.8709445

Earth selected 8 of 18 terms, and 4 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, survived, parch, sibsp, sexmale-unused
Number of terms at each degree of interaction: 1 3 4
Earth GCV 0.1446933    RSS 146.0429    GRSq 0.2698572    RSq 0.294107

GLM null.deviance 1223.308 (1045 dof)   deviance 902.3217 (1038 dof)   iters 5

Summary a6 decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(formula=pclass1~., data=etitanic[, -1], trace=1, 
      glm=list(family="binomial"), degree=2)

Earth coefficients
                           pclass1
(Intercept)              0.1110947
survived                 0.3720736
survived * h(53-age)    -0.0051997
h(2-parch)               0.1797329
h(age-48) * h(2-parch)  -0.0203532
h(48-age) * h(2-parch)  -0.0063338
h(age-44)                0.0380498
h(1-sibsp) * h(1-parch) -0.1313182

GLM coefficients
                          pclass1
(Intercept)             -2.258382
survived                 1.893031
survived * h(53-age)    -0.011168
h(2-parch)               1.244573
h(age-48) * h(2-parch)  -0.117742
h(48-age) * h(2-parch)  -0.047647
h(age-44)                0.206246
h(1-sibsp) * h(1-parch) -0.870944

GLM deviance residuals:
     Min        1Q    Median        3Q       Max  
-2.30359  -0.64452  -0.40672   0.38050   2.69124  

GLM coefficients (family binomial, link logit)
                          Estimate Std. Error z value  Pr(>|z|)
(Intercept)             -2.2583821  0.2732028 -8.2663 < 2.2e-16
survived                 1.8930309  0.2956186  6.4036 1.517e-10
survived * h(53-age)    -0.0111684  0.0112515 -0.9926 0.3208961
h(2-parch)               1.2445727  0.1987612  6.2616 3.809e-10
h(age-48) * h(2-parch)  -0.1177420  0.0337280 -3.4909 0.0004813
h(48-age) * h(2-parch)  -0.0476465  0.0066231 -7.1940 6.291e-13
h(age-44)                0.2062463  0.0526649  3.9162 8.996e-05
h(1-sibsp) * h(1-parch) -0.8709445  0.2119221 -4.1097 3.961e-05

Number of cases: 1046
Earth selected 8 of 18 terms, and 4 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, survived, parch, sibsp, sexmale-unused
Number of terms at each degree of interaction: 1 3 4
Earth GCV 0.14469    RSS 146.04    GRSq 0.26986    RSq 0.29411

GLM null.deviance 1223.3 (1045 dof)   deviance 902.32 (1038 dof)   iters 5

evimp a6 

         nsubsets   gcv    rss
age             7 100.0  100.0
survived        6  64.6   67.2
parch           4  45.6   48.6
sibsp           2  22.6   26.3

evimp a6 trim=FALSE

               nsubsets   gcv    rss
age                   7 100.0  100.0
survived              6  64.6   67.2
parch                 4  45.6   48.6
sibsp                 2  22.6   26.3
sexmale-unused        0   0.0    0.0

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a6 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula pclass1 ~ .
stripped formula pclass1~.
get.data.for.formula: using x from "etitanic[,-1]" passed to earth 
about to eval model.frame(formula=pclass1~., data=structure(list(survived=c(1L, 
    1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 
    1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 
    0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 
    0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 
    1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 
    1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 
    1L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, ...
got x with colnames from object$call$formula

x[1046,5]:
     survived    sex     age sibsp parch
1           1 female 29.0000     0     0
2           1   male  0.9167     1     2
3           0 female  2.0000     1     2
...         0   male 30.0000     1     2
1309        0   male 29.0000     0     0

factors: sex 

nlevels: survived=2 sex=2 age=98 sibsp=7 parch=7 

--get.plotmo.y for earth object

formula pclass1 ~ .
stripped formula pclass1~.
get.data.for.formula: using y from "etitanic[,-1]" passed to earth 
about to eval model.frame(formula=pclass1~., data=structure(list(survived=c(1L, 
    1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 
    1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 
    0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 
    0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 
    1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 
    1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 
    1L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, ...
got y from object$call$formula
get.plotmo.y returned length 1046 min 0 max 1
             value 1 1 1 1 1 1 1 1 1 1 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 survived, 3 age, 5 parch 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]     
[1,] "1 survived" "3 age"  
[2,] "3 age"      "5 parch"
[3,] "4 sibsp"    "5 parch"

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    survived    sex age sibsp parch
                 0 female  28     0     0


plotmo.predict(type="response") for degree1 plot "survived" with newdata[2,5]:
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
Contents of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        1 female  28     0     0
predict.earth: bx is a 2 by 8 matrix: 1=(Intercept), 2=survived, 3=survived*h(53-age), 4=h(2-parch), 5=h(age-48)*h(2-parch), 6=h(48-age)*h(2-parch), 7=h(age-44), 8=h(1-sibsp)*h(1-parch)
Contents of bx are
     (Intercept) survived survived*h(53-age) h(2-parch) h(age-48)*h(2-parch)
[1,]           1        0                  0          2                    0
[2,]           1        1                 25          2                    0
     h(48-age)*h(2-parch) h(age-44) h(1-sibsp)*h(1-parch)
[1,]                   40         0                     1
[2,]                   40         0                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "pclass1" returned length 2 min 0.07269289 max 0.2824745
                                      value 0.07269289 0.2824745 

plotmo.predict(type="response") for degree1 plot "age" with newdata[50,5]:
    survived    sex       age sibsp parch
1          0 female  0.166700     0     0
2          0 female  1.795951     0     0
3          0 female  3.425202     0     0
...        0 female  5.054453     0     0
50         0 female 80.000000     0     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch
First few rows of x are
  survived    sex      age sibsp parch
1        0 female 0.166700     0     0
2        0 female 1.795951     0     0
3        0 female 3.425202     0     0
4        0 female 5.054453     0     0
5        0 female 6.683704     0     0
6        0 female 8.312955     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 50 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch
First few rows of data after call to model.frame are
  survived    sex      age sibsp parch
1        0 female 0.166700     0     0
2        0 female 1.795951     0     0
3        0 female 3.425202     0     0
4        0 female 5.054453     0     0
5        0 female 6.683704     0     0
6        0 female 8.312955     0     0
predict.earth: bx is a 50 by 8 matrix: 1=(Intercept), 2=survived, 3=survived*h(53-age), 4=h(2-parch), 5=h(age-48)*h(2-parch), 6=h(48-age)*h(2-parch), 7=h(age-44), 8=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived survived*h(53-age) h(2-parch) h(age-48)*h(2-parch)
[1,]           1        0                  0          2                    0
[2,]           1        0                  0          2                    0
[3,]           1        0                  0          2                    0
[4,]           1        0                  0          2                    0
[5,]           1        0                  0          2                    0
[6,]           1        0                  0          2                    0
     h(48-age)*h(2-parch) h(age-44) h(1-sibsp)*h(1-parch)
[1,]             95.66660         0                     1
[2,]             92.40810         0                     1
[3,]             89.14960         0                     1
[4,]             85.89109         0                     1
[5,]             82.63259         0                     1
[6,]             79.37409         0                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "pclass1" returned length 50 min 0.005495254 max 0.538492
                                      value 0.005495254 0.006412303 0.007481238 0.0087268 0.01017761 0.01186673 0.01383226 0.01611804 0.01877436 0.02185872 ...

plotmo.predict(type="response") for degree1 plot "parch" with newdata[7,5]:
    survived    sex age sibsp parch
1          0 female  28     0     0
2          0 female  28     0     1
3          0 female  28     0     2
...        0 female  28     0     3
7          0 female  28     0     6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 7 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     0     1
3        0 female  28     0     2
4        0 female  28     0     3
5        0 female  28     0     4
6        0 female  28     0     5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 7 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     0     1
3        0 female  28     0     2
4        0 female  28     0     3
5        0 female  28     0     4
6        0 female  28     0     5
predict.earth: bx is a 7 by 8 matrix: 1=(Intercept), 2=survived, 3=survived*h(53-age), 4=h(2-parch), 5=h(age-48)*h(2-parch), 6=h(48-age)*h(2-parch), 7=h(age-44), 8=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived survived*h(53-age) h(2-parch) h(age-48)*h(2-parch)
[1,]           1        0                  0          2                    0
[2,]           1        0                  0          1                    0
[3,]           1        0                  0          0                    0
[4,]           1        0                  0          0                    0
[5,]           1        0                  0          0                    0
[6,]           1        0                  0          0                    0
     h(48-age)*h(2-parch) h(age-44) h(1-sibsp)*h(1-parch)
[1,]                   40         0                     1
[2,]                   20         0                     0
[3,]                    0         0                     0
[4,]                    0         0                     0
[5,]                    0         0                     0
[6,]                    0         0                     0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "pclass1" returned length 7 min 0.07269289 max 0.1227395
                                      value 0.07269289 0.1227395 0.09462889 0.09462889 0.09462889 0.09462889 0.09462889 

--plot.degree2(draw.plot=TRUE)

plotmo.predict(type="response") for degree2 plot "survived:age" with newdata[40,5]:
    survived    sex       age sibsp parch
1          0 female  0.166700     0     0
2          1 female  0.166700     0     0
3          0 female  4.368453     0     0
...        1 female  4.368453     0     0
40         1 female 80.000000     0     0

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 40 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
First few rows of x are
  survived    sex      age sibsp parch
1        0 female 0.166700     0     0
2        1 female 0.166700     0     0
3        0 female 4.368453     0     0
4        1 female 4.368453     0     0
5        0 female 8.570205     0     0
6        1 female 8.570205     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 40 by 5 matrix: 1=survived (integer), 2=sex (factor), 3=age, 4=sibsp, 5=parch
First few rows of data after call to model.frame are
  survived    sex      age sibsp parch
1        0 female 0.166700     0     0
2        1 female 0.166700     0     0
3        0 female 4.368453     0     0
4        1 female 4.368453     0     0
5        0 female 8.570205     0     0
6        1 female 8.570205     0     0
predict.earth: bx is a 40 by 8 matrix: 1=(Intercept), 2=survived, 3=survived*h(53-age), 4=h(2-parch), 5=h(age-48)*h(2-parch), 6=h(48-age)*h(2-parch), 7=h(age-44), 8=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived survived*h(53-age) h(2-parch) h(age-48)*h(2-parch)
[1,]           1        0            0.00000          2                    0
[2,]           1        1           52.83330          2                    0
[3,]           1        0            0.00000          2                    0
[4,]           1        1           48.63155          2                    0
[5,]           1        0            0.00000          2                    0
[6,]           1        1           44.42979          2                    0
     h(48-age)*h(2-parch) h(age-44) h(1-sibsp)*h(1-parch)
[1,]             95.66660         0                     1
[2,]             95.66660         0                     1
[3,]             87.26309         0                     1
[4,]             87.26309         0                     1
[5,]             78.85959         0                     1
[6,]             78.85959         0                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "pclass1" returned length 40 min 0.005495254 max 0.8781722
                                      value 0.005495254 0.0199301 0.008179084 0.03082652 0.01215765 0.04739229 0.01803631 0.07219712 0.02668076 0.1085059 ...
persp(survived:age) theta -35 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "age:parch" with newdata[140,5]:
     survived    sex       age sibsp parch
1           0 female  0.166700     0     0
2           0 female  4.368453     0     0
3           0 female  8.570205     0     0
...         0 female 12.771958     0     0
20.6        0 female 80.000000     0     6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 140 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of x are
  survived    sex       age sibsp parch
1        0 female  0.166700     0     0
2        0 female  4.368453     0     0
3        0 female  8.570205     0     0
4        0 female 12.771958     0     0
5        0 female 16.973711     0     0
6        0 female 21.175463     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 140 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp, 5=parch (integer)
First few rows of data after call to model.frame are
  survived    sex       age sibsp parch
1        0 female  0.166700     0     0
2        0 female  4.368453     0     0
3        0 female  8.570205     0     0
4        0 female 12.771958     0     0
5        0 female 16.973711     0     0
6        0 female 21.175463     0     0
predict.earth: bx is a 140 by 8 matrix: 1=(Intercept), 2=survived, 3=survived*h(53-age), 4=h(2-parch), 5=h(age-48)*h(2-parch), 6=h(48-age)*h(2-parch), 7=h(age-44), 8=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived survived*h(53-age) h(2-parch) h(age-48)*h(2-parch)
[1,]           1        0                  0          2                    0
[2,]           1        0                  0          2                    0
[3,]           1        0                  0          2                    0
[4,]           1        0                  0          2                    0
[5,]           1        0                  0          2                    0
[6,]           1        0                  0          2                    0
     h(48-age)*h(2-parch) h(age-44) h(1-sibsp)*h(1-parch)
[1,]             95.66660         0                     1
[2,]             87.26309         0                     1
[3,]             78.85959         0                     1
[4,]             70.45608         0                     1
[5,]             62.05258         0                     1
[6,]             53.64907         0                     1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "pclass1" returned length 140 min 0.005495254 max 0.9943278
                                      value 0.005495254 0.008179084 0.01215765 0.01803631 0.02668076 0.03930248 0.05754211 0.08351063 0.11971 0.1687123 ...
persp(age:parch) theta -35 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "sibsp:parch" with newdata[49,5]:
    survived    sex age sibsp parch
1          0 female  28     0     0
2          0 female  28     1     0
3          0 female  28     2     0
...        0 female  28     3     0
7.6        0 female  28     8     6

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 49 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp (integer), 5=parch (integer)
First few rows of x are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     1     0
3        0 female  28     2     0
4        0 female  28     3     0
5        0 female  28     4     0
6        0 female  28     5     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 49 by 5 matrix: 1=survived, 2=sex (factor), 3=age, 4=sibsp (integer), 5=parch (integer)
First few rows of data after call to model.frame are
  survived    sex age sibsp parch
1        0 female  28     0     0
2        0 female  28     1     0
3        0 female  28     2     0
4        0 female  28     3     0
5        0 female  28     4     0
6        0 female  28     5     0
predict.earth: bx is a 49 by 8 matrix: 1=(Intercept), 2=survived, 3=survived*h(53-age), 4=h(2-parch), 5=h(age-48)*h(2-parch), 6=h(48-age)*h(2-parch), 7=h(age-44), 8=h(1-sibsp)*h(1-parch)
First few rows of bx are
     (Intercept) survived survived*h(53-age) h(2-parch) h(age-48)*h(2-parch)
[1,]           1        0                  0          2                    0
[2,]           1        0                  0          2                    0
[3,]           1        0                  0          2                    0
[4,]           1        0                  0          2                    0
[5,]           1        0                  0          2                    0
[6,]           1        0                  0          2                    0
     h(48-age)*h(2-parch) h(age-44) h(1-sibsp)*h(1-parch)
[1,]                   40         0                     1
[2,]                   40         0                     0
[3,]                   40         0                     0
[4,]                   40         0                     0
[5,]                   40         0                     0
[6,]                   40         0                     0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "pclass1" returned length 49 min 0.07269289 max 0.1577458
                                      value 0.07269289 0.1577458 0.1577458 0.1577458 0.1577458 0.1577458 0.1577458 0.1227395 0.1227395 0.1227395 ...
persp(sibsp:parch) theta 235 ylim 0 1 cex 0.66

-------------------------------------------------------------------------------

> printh(a6$levels) # expect levels to be NULL
=== a6$levels
[1] FALSE  TRUE
> print.stripped.earth.model(a6, "a6")
print.stripped.earth.model(a6)
$dirs
                      survived sexmale age sibsp parch
(Intercept)                  0       0   0     0     0
h(age-26)                    0       0   1     0     0
h(26-age)                    0       0  -1     0     0
survived                     2       0   0     0     0
survived*h(age-53)           2       0   1     0     0
survived*h(53-age)           2       0  -1     0     0
h(parch-2)                   0       0   0     0     1
h(2-parch)                   0       0   0     0    -1
h(sibsp-1)                   0       0   0     1     0
h(1-sibsp)                   0       0   0    -1     0
h(age-48)*h(2-parch)         0       0   1     0    -1
h(48-age)*h(2-parch)         0       0  -1     0    -1
h(age-44)                    0       0   1     0     0
h(1-sibsp)*h(parch-1)        0       0   0    -1     1
h(1-sibsp)*h(1-parch)        0       0   0    -1    -1
survived*h(age-16)           2       0   1     0     0
survived*h(sibsp-3)          2       0   0     1     0
survived*h(3-sibsp)          2       0   0    -1     0

$cuts
                      survived sexmale age sibsp parch
(Intercept)                  0       0   0     0     0
h(age-26)                    0       0  26     0     0
h(26-age)                    0       0  26     0     0
survived                     0       0   0     0     0
survived*h(age-53)           0       0  53     0     0
survived*h(53-age)           0       0  53     0     0
h(parch-2)                   0       0   0     0     2
h(2-parch)                   0       0   0     0     2
h(sibsp-1)                   0       0   0     1     0
h(1-sibsp)                   0       0   0     1     0
h(age-48)*h(2-parch)         0       0  48     0     2
h(48-age)*h(2-parch)         0       0  48     0     2
h(age-44)                    0       0  44     0     0
h(1-sibsp)*h(parch-1)        0       0   0     1     1
h(1-sibsp)*h(1-parch)        0       0   0     1     1
survived*h(age-16)           0       0  16     0     0
survived*h(sibsp-3)          0       0   0     3     0
survived*h(3-sibsp)          0       0   0     3     0

$selected.terms
[1]  1  4  6  8 11 12 13 15

$prune.terms
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    0    0    0    0    0    0    0    0     0     0     0     0
 [2,]    1    2    0    0    0    0    0    0    0     0     0     0     0
 [3,]    1    4   12    0    0    0    0    0    0     0     0     0     0
 [4,]    1    2    3    4    0    0    0    0    0     0     0     0     0
 [5,]    1    2    3    4    5    0    0    0    0     0     0     0     0
 [6,]    1    4    8   11   12   13    0    0    0     0     0     0     0
 [7,]    1    4    8   11   12   13   15    0    0     0     0     0     0
 [8,]    1    4    6    8   11   12   13   15    0     0     0     0     0
 [9,]    1    4    6    8   11   12   13   15   16     0     0     0     0
[10,]    1    4    6    8   10   11   12   13   15    16     0     0     0
[11,]    1    4    6    8   10   11   12   13   14    15    16     0     0
[12,]    1    4    6    8    9   10   11   12   13    14    15    16     0
[13,]    1    4    6    8    9   10   11   12   13    14    15    16    18
[14,]    1    3    4    6    8    9   10   11   12    13    14    15    16
[15,]    1    3    4    5    6    8    9   10   11    12    13    14    15
[16,]    1    3    4    5    6    8    9   10   11    12    13    14    15
[17,]    1    3    4    5    6    7    8    9   10    11    12    13    14
[18,]    1    2    3    4    5    6    7    8    9    10    11    12    13
      [,14] [,15] [,16] [,17] [,18]
 [1,]     0     0     0     0     0
 [2,]     0     0     0     0     0
 [3,]     0     0     0     0     0
 [4,]     0     0     0     0     0
 [5,]     0     0     0     0     0
 [6,]     0     0     0     0     0
 [7,]     0     0     0     0     0
 [8,]     0     0     0     0     0
 [9,]     0     0     0     0     0
[10,]     0     0     0     0     0
[11,]     0     0     0     0     0
[12,]     0     0     0     0     0
[13,]     0     0     0     0     0
[14,]    18     0     0     0     0
[15,]    16    18     0     0     0
[16,]    16    17    18     0     0
[17,]    15    16    17    18     0
[18,]    14    15    16    17    18

$rss
[1] 146.0429

$rsq
[1] 0.294107

$gcv
[1] 0.1446933

$grsq
[1] 0.2698572

$rss.per.response
[1] 146.0429

$rsq.per.response
[1] 0.294107

$gcv.per.response
[1] 0.1446933

$grsq.per.response
[1] 0.2698572

$rss.per.subset
 [1] 206.8910 173.4973 167.2214 154.2267 154.1537 150.2618 147.5346 146.0429
 [9] 145.3529 145.0364 144.4551 144.1638 143.8604 143.6507 143.1816 142.9915
[17] 142.8521 142.8264

$gcv.per.subset
 [1] 0.1981713 0.1669830 0.1617175 0.1498702 0.1505237 0.1474349 0.1454625
 [8] 0.1446933 0.1447131 0.1451049 0.1452327 0.1456529 0.1460632 0.1465715
[15] 0.1468170 0.1473506 0.1479402 0.1486523

$rss.per.subset
 [1] 206.8910 173.4973 167.2214 154.2267 154.1537 150.2618 147.5346 146.0429
 [9] 145.3529 145.0364 144.4551 144.1638 143.8604 143.6507 143.1816 142.9915
[17] 142.8521 142.8264

$gcv.per.subset
 [1] 0.1981713 0.1669830 0.1617175 0.1498702 0.1505237 0.1474349 0.1454625
 [8] 0.1446933 0.1447131 0.1451049 0.1452327 0.1456529 0.1460632 0.1465715
[15] 0.1468170 0.1473506 0.1479402 0.1486523

$coefficients
                           pclass1
(Intercept)            0.111094650
survived               0.372073573
survived*h(53-age)    -0.005199712
h(2-parch)             0.179732914
h(age-48)*h(2-parch)  -0.020353240
h(48-age)*h(2-parch)  -0.006333766
h(age-44)              0.038049848
h(1-sibsp)*h(1-parch) -0.131318175

$penalty
[1] 3

$nk
[1] 21

$thresh
[1] 0.001

$termcond
[1] 7

$weights
NULL

$glm.list
$glm.list[[1]]

Call:  glm(formula = yarg ~ ., family = family, data = bx.data.frame, 
    weights = weights, na.action = na.action, control = control, 
    model = TRUE, method = "glm.fit", x = TRUE, y = TRUE, contrasts = NULL, 
    trace = (trace >= 2))

Coefficients:
            (Intercept)                 survived     `survived*h(53-age)`  
               -2.25838                  1.89303                 -0.01117  
           `h(2-parch)`   `h(age-48)*h(2-parch)`   `h(48-age)*h(2-parch)`  
                1.24457                 -0.11774                 -0.04765  
            `h(age-44)`  `h(1-sibsp)*h(1-parch)`  
                0.20625                 -0.87094  

Degrees of Freedom: 1045 Total (i.e. Null);  1038 Residual
Null Deviance:	    1223 
Residual Deviance: 902.3 	AIC: 918.3


$glm.coefficients
                         pclass1
(Intercept)           -2.2583821
survived               1.8930309
survived*h(53-age)    -0.0111684
h(2-parch)             1.2445727
h(age-48)*h(2-parch)  -0.1177420
h(48-age)*h(2-parch)  -0.0476465
h(age-44)              0.2062463
h(1-sibsp)*h(1-parch) -0.8709445

$namesx.org
[1] "survived" "sex"      "age"      "sibsp"    "parch"   

$namesx
[1] "survived" "sex"      "age"      "sibsp"    "parch"   

$levels
[1] FALSE  TRUE

$terms
pclass1 ~ survived + sex + age + sibsp + parch
attr(,"variables")
list(pclass1, survived, sex, age, sibsp, parch)
attr(,"factors")
         survived sex age sibsp parch
pclass1         0   0   0     0     0
survived        1   0   0     0     0
sex             0   1   0     0     0
age             0   0   1     0     0
sibsp           0   0   0     1     0
parch           0   0   0     0     1
attr(,"term.labels")
[1] "survived" "sex"      "age"      "sibsp"    "parch"   
attr(,"order")
[1] 1 1 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(pclass1, survived, sex, age, sibsp, parch)
attr(,"dataClasses")
  pclass1  survived       sex       age     sibsp     parch 
"logical" "numeric"  "factor" "numeric" "numeric" "numeric" 

$call
earth(formula = pclass1 ~ ., data = etitanic[, -1], trace = 1, 
    glm = list(family = "binomial"), degree = 2)

attr(,"class")
[1] "earth"
-------------------------------------------------------------------------------

> 
> # titanic data, one response which is a two level factor
> cat("a7: titanic data, one response which is a two level factor\n\n")
a7: titanic data, one response which is a two level factor

> a7 <- earth(sex ~ ., data=etitanic, degree=2, glm=list(family="binomial"), trace=1)
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=male
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.339 RSq 0.383
Prune method "backward" penalty 3 nprune 15: selected 10 of 15 terms, and 6 of 6 predictors
After backward pass GRSq 0.351 RSq 0.379 
GLM male: null.deviance 1379.574 (1045 dof)   deviance 942.4612 (1036 dof)   iters 5
> show.earth.models(a7)

Print a7 

Earth selected 10 of 15 terms, and 6 of 6 predictors 
Termination condition: Reached nk 21
Importance: survived, pclass3rd, parch, age, sibsp, pclass2nd
Number of terms at each degree of interaction: 1 2 7
Earth GCV 0.1516851    RSS 151.6135    GRSq 0.3511894    RSq 0.3788278

GLM null.deviance 1379.574 (1045 dof)   deviance 942.4612 (1036 dof)   iters 5

Summary a7 

Call: earth(formula=sex~., data=etitanic, trace=1, glm=list(family="binomial"), 
      degree=2)

GLM coefficients
                              male
(Intercept)              1.8387477
pclass3rd               -3.1099128
survived                -3.5655119
pclass2nd * survived    -0.7699247
pclass3rd * survived     1.6779843
pclass3rd * h(4-parch)   0.5218320
survived * h(15-age)     0.2231755
h(25-age) * h(4-parch)  -0.0190203
h(2-sibsp) * h(4-parch)  0.1542971
h(sibsp-2) * h(4-parch)  0.3273980

Earth selected 10 of 15 terms, and 6 of 6 predictors 
Termination condition: Reached nk 21
Importance: survived, pclass3rd, parch, age, sibsp, pclass2nd
Number of terms at each degree of interaction: 1 2 7
Earth GCV 0.1516851    RSS 151.6135    GRSq 0.3511894    RSq 0.3788278

GLM null.deviance 1379.574 (1045 dof)   deviance 942.4612 (1036 dof)   iters 5

Summary a7 digits=3, details=TRUE

Call: earth(formula=sex~., data=etitanic, trace=1, glm=list(family="binomial"), 
      degree=2)

Earth coefficients
                           male
(Intercept)              0.8046
survived                -0.6298
survived * h(15-age)     0.0417
pclass3rd * survived     0.2560
h(25-age) * h(4-parch)  -0.0034
h(sibsp-2) * h(4-parch)  0.0578
h(2-sibsp) * h(4-parch)  0.0225
pclass3rd               -0.5678
pclass3rd * h(4-parch)   0.1189
pclass2nd * survived    -0.1330

GLM coefficients
                          male
(Intercept)              1.839
survived                -3.566
survived * h(15-age)     0.223
pclass3rd * survived     1.678
h(25-age) * h(4-parch)  -0.019
h(sibsp-2) * h(4-parch)  0.327
h(2-sibsp) * h(4-parch)  0.154
pclass3rd               -3.110
pclass3rd * h(4-parch)   0.522
pclass2nd * survived    -0.770

GLM deviance residuals:
   Min      1Q  Median      3Q     Max  
-2.497  -0.706   0.349   0.567   2.077  

GLM coefficients (family binomial, link logit)
                        Estimate Std. Error z value Pr(>|z|)
(Intercept)              1.83875    0.33915    5.42  5.9e-08
survived                -3.56551    0.30938  -11.52  < 2e-16
survived * h(15-age)     0.22318    0.03985    5.60  2.1e-08
pclass3rd * survived     1.67798    0.39145    4.29  1.8e-05
h(25-age) * h(4-parch)  -0.01902    0.00626   -3.04  0.00238
h(sibsp-2) * h(4-parch)  0.32740    0.09569    3.42  0.00062
h(2-sibsp) * h(4-parch)  0.15430    0.03872    3.98  6.8e-05
pclass3rd               -3.10991    0.61673   -5.04  4.6e-07
pclass3rd * h(4-parch)   0.52183    0.15440    3.38  0.00073
pclass2nd * survived    -0.76992    0.30816   -2.50  0.01247

Number of cases: 1046
Earth selected 10 of 15 terms, and 6 of 6 predictors 
Termination condition: Reached nk 21
Importance: survived, pclass3rd, parch, age, sibsp, pclass2nd
Number of terms at each degree of interaction: 1 2 7
Earth GCV 0.152    RSS 152    GRSq 0.351    RSq 0.379

GLM null.deviance 1380 (1045 dof)   deviance 942 (1036 dof)   iters 5

evimp a7 

          nsubsets   gcv    rss
survived         9 100.0  100.0
pclass3rd        8  43.1   48.6
parch            6  35.2   40.2
age              5  23.6   30.2
sibsp            4  19.5   25.8
pclass2nd        1   7.3   11.3

evimp a7 trim=FALSE

          nsubsets   gcv    rss
survived         9 100.0  100.0
pclass3rd        8  43.1   48.6
parch            6  35.2   40.2
age              5  23.6   30.2
sibsp            4  19.5   25.8
pclass2nd        1   7.3   11.3

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a7 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula sex ~ .
stripped formula sex~.
get.data.for.formula: using x from "etitanic" passed to earth 
about to eval model.frame(formula=sex~., data=structure(list(pclass=structure(c(1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, ...
got x with colnames from object$call$formula

x[1046,5]:
     pclass survived     age sibsp parch
1       1st        1 29.0000     0     0
2       1st        1  0.9167     1     2
3       1st        0  2.0000     1     2
...     1st        0 30.0000     1     2
1309    3rd        0 29.0000     0     0

factors: pclass 

nlevels: pclass=3 survived=2 age=98 sibsp=7 parch=7 

--get.plotmo.y for earth object

formula sex ~ .
stripped formula sex~.
get.data.for.formula: using y from "etitanic" passed to earth 
about to eval model.frame(formula=sex~., data=structure(list(pclass=structure(c(1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, ...
got y from object$call$formula
get.plotmo.y column "male" returned length 1046 min 0 max 1
             value 0 1 0 1 0 1 0 1 0 1 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 pclass, 2 survived 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]        
[1,] "1 pclass"   "2 survived"
[2,] "1 pclass"   "5 parch"   
[3,] "2 survived" "3 age"     
[4,] "3 age"      "5 parch"   
[5,] "4 sibsp"    "5 parch"   

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    pclass survived age sibsp parch
             1st        0  28     0     0


plotmo.predict(type="response") for degree1 plot "pclass" with newdata[3,5]:
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    2nd        0  28     0     0
3    3rd        0  28     0     0

factors: pclass 

get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp, 5=parch
Contents of x are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    2nd        0  28     0     0
3    3rd        0  28     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp, 5=parch
Contents of data after call to model.frame are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    2nd        0  28     0     0
3    3rd        0  28     0     0
predict.earth: bx is a 3 by 10 matrix: 1=(Intercept), 2=survived, 3=survived*h(15-age), 4=pclass3rd*survived, 5=h(25-age)*h(4-parch), 6=h(sibsp-2)*h(4-parch), 7=h(2-sibsp)*h(4-parch), 8=pclass3rd, 9=pclass3rd*h(4-parch), 10=pclass2nd*survived
Contents of bx are
     (Intercept) survived survived*h(15-age) pclass3rd*survived
[1,]           1        0                  0                  0
[2,]           1        0                  0                  0
[3,]           1        0                  0                  0
     h(25-age)*h(4-parch) h(sibsp-2)*h(4-parch) h(2-sibsp)*h(4-parch) pclass3rd
[1,]                    0                     0                     8         0
[2,]                    0                     0                     8         0
[3,]                    0                     0                     8         1
     pclass3rd*h(4-parch) pclass2nd*survived
[1,]                    0                  0
[2,]                    0                  0
[3,]                    4                  0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "male" returned length 3 min 0.8860022 max 0.9557705
                                      value 0.9557705 0.9557705 0.8860022 

plotmo.predict(type="response") for degree1 plot "survived" with newdata[2,5]:
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    1st        1  28     0     0

factors: pclass 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 5 matrix: 1=pclass (factor), 2=survived (integer), 3=age, 4=sibsp, 5=parch
Contents of x are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    1st        1  28     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 5 matrix: 1=pclass (factor), 2=survived (integer), 3=age, 4=sibsp, 5=parch
Contents of data after call to model.frame are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    1st        1  28     0     0
predict.earth: bx is a 2 by 10 matrix: 1=(Intercept), 2=survived, 3=survived*h(15-age), 4=pclass3rd*survived, 5=h(25-age)*h(4-parch), 6=h(sibsp-2)*h(4-parch), 7=h(2-sibsp)*h(4-parch), 8=pclass3rd, 9=pclass3rd*h(4-parch), 10=pclass2nd*survived
Contents of bx are
     (Intercept) survived survived*h(15-age) pclass3rd*survived
[1,]           1        0                  0                  0
[2,]           1        1                  0                  0
     h(25-age)*h(4-parch) h(sibsp-2)*h(4-parch) h(2-sibsp)*h(4-parch) pclass3rd
[1,]                    0                     0                     8         0
[2,]                    0                     0                     8         0
     pclass3rd*h(4-parch) pclass2nd*survived
[1,]                    0                  0
[2,]                    0                  0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "male" returned length 2 min 0.3793314 max 0.9557705
                                      value 0.9557705 0.3793314 

--plot.degree2(draw.plot=TRUE)

plotmo.predict(type="response") for degree2 plot "pclass:survived" with newdata[6,5]:
    pclass survived age sibsp parch
1      1st        0  28     0     0
2      2nd        0  28     0     0
3      3rd        0  28     0     0
...    1st        1  28     0     0
3.1    3rd        1  28     0     0

factors: pclass 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 5 matrix: 1=pclass (factor), 2=survived (integer), 3=age, 4=sibsp, 5=parch
Contents of x are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    2nd        0  28     0     0
3    3rd        0  28     0     0
4    1st        1  28     0     0
5    2nd        1  28     0     0
6    3rd        1  28     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 5 matrix: 1=pclass (factor), 2=survived (integer), 3=age, 4=sibsp, 5=parch
Contents of data after call to model.frame are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    2nd        0  28     0     0
3    3rd        0  28     0     0
4    1st        1  28     0     0
5    2nd        1  28     0     0
6    3rd        1  28     0     0
predict.earth: bx is a 6 by 10 matrix: 1=(Intercept), 2=survived, 3=survived*h(15-age), 4=pclass3rd*survived, 5=h(25-age)*h(4-parch), 6=h(sibsp-2)*h(4-parch), 7=h(2-sibsp)*h(4-parch), 8=pclass3rd, 9=pclass3rd*h(4-parch), 10=pclass2nd*survived
Contents of bx are
     (Intercept) survived survived*h(15-age) pclass3rd*survived
[1,]           1        0                  0                  0
[2,]           1        0                  0                  0
[3,]           1        0                  0                  0
[4,]           1        1                  0                  0
[5,]           1        1                  0                  0
[6,]           1        1                  0                  1
     h(25-age)*h(4-parch) h(sibsp-2)*h(4-parch) h(2-sibsp)*h(4-parch) pclass3rd
[1,]                    0                     0                     8         0
[2,]                    0                     0                     8         0
[3,]                    0                     0                     8         1
[4,]                    0                     0                     8         0
[5,]                    0                     0                     8         0
[6,]                    0                     0                     8         1
     pclass3rd*h(4-parch) pclass2nd*survived
[1,]                    0                  0
[2,]                    0                  0
[3,]                    4                  0
[4,]                    0                  0
[5,]                    0                  1
[6,]                    4                  0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "male" returned length 6 min 0.2205762 max 0.9557705
                                      value 0.9557705 0.9557705 0.8860022 0.3793314 0.2205762 0.5406631 
persp(pclass:survived) theta 145 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "pclass:parch" with newdata[21,5]:
    pclass survived age sibsp parch
1      1st        0  28     0     0
2      2nd        0  28     0     0
3      3rd        0  28     0     0
...    1st        0  28     0     1
3.6    3rd        0  28     0     6

factors: pclass 

get.earth.x from model.matrix.earth from predict.earth: x is a 21 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp, 5=parch (integer)
First few rows of x are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    2nd        0  28     0     0
3    3rd        0  28     0     0
4    1st        0  28     0     1
5    2nd        0  28     0     1
6    3rd        0  28     0     1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 21 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp, 5=parch (integer)
First few rows of data after call to model.frame are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    2nd        0  28     0     0
3    3rd        0  28     0     0
4    1st        0  28     0     1
5    2nd        0  28     0     1
6    3rd        0  28     0     1
predict.earth: bx is a 21 by 10 matrix: 1=(Intercept), 2=survived, 3=survived*h(15-age), 4=pclass3rd*survived, 5=h(25-age)*h(4-parch), 6=h(sibsp-2)*h(4-parch), 7=h(2-sibsp)*h(4-parch), 8=pclass3rd, 9=pclass3rd*h(4-parch), 10=pclass2nd*survived
First few rows of bx are
     (Intercept) survived survived*h(15-age) pclass3rd*survived
[1,]           1        0                  0                  0
[2,]           1        0                  0                  0
[3,]           1        0                  0                  0
[4,]           1        0                  0                  0
[5,]           1        0                  0                  0
[6,]           1        0                  0                  0
     h(25-age)*h(4-parch) h(sibsp-2)*h(4-parch) h(2-sibsp)*h(4-parch) pclass3rd
[1,]                    0                     0                     8         0
[2,]                    0                     0                     8         0
[3,]                    0                     0                     8         1
[4,]                    0                     0                     6         0
[5,]                    0                     0                     6         0
[6,]                    0                     0                     6         1
     pclass3rd*h(4-parch) pclass2nd*survived
[1,]                    0                  0
[2,]                    0                  0
[3,]                    4                  0
[4,]                    0                  0
[5,]                    0                  0
[6,]                    3                  0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "male" returned length 21 min 0.2190579 max 0.9557705
                                      value 0.9557705 0.9557705 0.8860022 0.9407288 0.9407288 0.7720836 0.9209945 0.9209945 0.5962074 0.8954201 ...
persp(pclass:parch) theta 145 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "survived:age" with newdata[40,5]:
    pclass survived       age sibsp parch
1      1st        0  0.166700     0     0
2      1st        1  0.166700     0     0
3      1st        0  4.368453     0     0
...    1st        1  4.368453     0     0
40     1st        1 80.000000     0     0

factors: pclass 

get.earth.x from model.matrix.earth from predict.earth: x is a 40 by 5 matrix: 1=pclass (factor), 2=survived (integer), 3=age, 4=sibsp, 5=parch
First few rows of x are
  pclass survived      age sibsp parch
1    1st        0 0.166700     0     0
2    1st        1 0.166700     0     0
3    1st        0 4.368453     0     0
4    1st        1 4.368453     0     0
5    1st        0 8.570205     0     0
6    1st        1 8.570205     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 40 by 5 matrix: 1=pclass (factor), 2=survived (integer), 3=age, 4=sibsp, 5=parch
First few rows of data after call to model.frame are
  pclass survived      age sibsp parch
1    1st        0 0.166700     0     0
2    1st        1 0.166700     0     0
3    1st        0 4.368453     0     0
4    1st        1 4.368453     0     0
5    1st        0 8.570205     0     0
6    1st        1 8.570205     0     0
predict.earth: bx is a 40 by 10 matrix: 1=(Intercept), 2=survived, 3=survived*h(15-age), 4=pclass3rd*survived, 5=h(25-age)*h(4-parch), 6=h(sibsp-2)*h(4-parch), 7=h(2-sibsp)*h(4-parch), 8=pclass3rd, 9=pclass3rd*h(4-parch), 10=pclass2nd*survived
First few rows of bx are
     (Intercept) survived survived*h(15-age) pclass3rd*survived
[1,]           1        0           0.000000                  0
[2,]           1        1          14.833300                  0
[3,]           1        0           0.000000                  0
[4,]           1        1          10.631547                  0
[5,]           1        0           0.000000                  0
[6,]           1        1           6.429795                  0
     h(25-age)*h(4-parch) h(sibsp-2)*h(4-parch) h(2-sibsp)*h(4-parch) pclass3rd
[1,]             99.33320                     0                     8         0
[2,]             99.33320                     0                     8         0
[3,]             82.52619                     0                     8         0
[4,]             82.52619                     0                     8         0
[5,]             65.71918                     0                     8         0
[6,]             65.71918                     0                     8         0
     pclass3rd*h(4-parch) pclass2nd*survived
[1,]                    0                  0
[2,]                    0                  0
[3,]                    0                  0
[4,]                    0                  0
[5,]                    0                  0
[6,]                    0                  0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "male" returned length 40 min 0.2491713 max 0.9557705
                                      value 0.7656264 0.7168104 0.8180888 0.5770417 0.8609408 0.4237463 0.8949941 0.2838453 0.921469 0.2491713 ...
persp(survived:age) theta 55 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "age:parch" with newdata[140,5]:
     pclass survived       age sibsp parch
1       1st        0  0.166700     0     0
2       1st        0  4.368453     0     0
3       1st        0  8.570205     0     0
...     1st        0 12.771958     0     0
20.6    1st        0 80.000000     0     6

factors: pclass 

get.earth.x from model.matrix.earth from predict.earth: x is a 140 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp, 5=parch (integer)
First few rows of x are
  pclass survived       age sibsp parch
1    1st        0  0.166700     0     0
2    1st        0  4.368453     0     0
3    1st        0  8.570205     0     0
4    1st        0 12.771958     0     0
5    1st        0 16.973711     0     0
6    1st        0 21.175463     0     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 140 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp, 5=parch (integer)
First few rows of data after call to model.frame are
  pclass survived       age sibsp parch
1    1st        0  0.166700     0     0
2    1st        0  4.368453     0     0
3    1st        0  8.570205     0     0
4    1st        0 12.771958     0     0
5    1st        0 16.973711     0     0
6    1st        0 21.175463     0     0
predict.earth: bx is a 140 by 10 matrix: 1=(Intercept), 2=survived, 3=survived*h(15-age), 4=pclass3rd*survived, 5=h(25-age)*h(4-parch), 6=h(sibsp-2)*h(4-parch), 7=h(2-sibsp)*h(4-parch), 8=pclass3rd, 9=pclass3rd*h(4-parch), 10=pclass2nd*survived
First few rows of bx are
     (Intercept) survived survived*h(15-age) pclass3rd*survived
[1,]           1        0                  0                  0
[2,]           1        0                  0                  0
[3,]           1        0                  0                  0
[4,]           1        0                  0                  0
[5,]           1        0                  0                  0
[6,]           1        0                  0                  0
     h(25-age)*h(4-parch) h(sibsp-2)*h(4-parch) h(2-sibsp)*h(4-parch) pclass3rd
[1,]             99.33320                     0                     8         0
[2,]             82.52619                     0                     8         0
[3,]             65.71918                     0                     8         0
[4,]             48.91217                     0                     8         0
[5,]             32.10516                     0                     8         0
[6,]             15.29815                     0                     8         0
     pclass3rd*h(4-parch) pclass2nd*survived
[1,]                    0                  0
[2,]                    0                  0
[3,]                    0                  0
[4,]                    0                  0
[5,]                    0                  0
[6,]                    0                  0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "male" returned length 140 min 0.7656264 max 0.9557705
                                      value 0.7656264 0.8180888 0.8609408 0.8949941 0.921469 0.9417036 0.9557705 0.9557705 0.9557705 0.9557705 ...
persp(age:parch) theta 235 ylim 0 1 cex 0.66

plotmo.predict(type="response") for degree2 plot "sibsp:parch" with newdata[49,5]:
    pclass survived age sibsp parch
1      1st        0  28     0     0
2      1st        0  28     1     0
3      1st        0  28     2     0
...    1st        0  28     3     0
7.6    1st        0  28     8     6

factors: pclass 

get.earth.x from model.matrix.earth from predict.earth: x is a 49 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp (integer), 5=parch (integer)
First few rows of x are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    1st        0  28     1     0
3    1st        0  28     2     0
4    1st        0  28     3     0
5    1st        0  28     4     0
6    1st        0  28     5     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 49 by 5 matrix: 1=pclass (factor), 2=survived, 3=age, 4=sibsp (integer), 5=parch (integer)
First few rows of data after call to model.frame are
  pclass survived age sibsp parch
1    1st        0  28     0     0
2    1st        0  28     1     0
3    1st        0  28     2     0
4    1st        0  28     3     0
5    1st        0  28     4     0
6    1st        0  28     5     0
predict.earth: bx is a 49 by 10 matrix: 1=(Intercept), 2=survived, 3=survived*h(15-age), 4=pclass3rd*survived, 5=h(25-age)*h(4-parch), 6=h(sibsp-2)*h(4-parch), 7=h(2-sibsp)*h(4-parch), 8=pclass3rd, 9=pclass3rd*h(4-parch), 10=pclass2nd*survived
First few rows of bx are
     (Intercept) survived survived*h(15-age) pclass3rd*survived
[1,]           1        0                  0                  0
[2,]           1        0                  0                  0
[3,]           1        0                  0                  0
[4,]           1        0                  0                  0
[5,]           1        0                  0                  0
[6,]           1        0                  0                  0
     h(25-age)*h(4-parch) h(sibsp-2)*h(4-parch) h(2-sibsp)*h(4-parch) pclass3rd
[1,]                    0                     0                     8         0
[2,]                    0                     0                     4         0
[3,]                    0                     0                     0         0
[4,]                    0                     4                     0         0
[5,]                    0                     8                     0         0
[6,]                    0                    12                     0         0
     pclass3rd*h(4-parch) pclass2nd*survived
[1,]                    0                  0
[2,]                    0                  0
[3,]                    0                  0
[4,]                    0                  0
[5,]                    0                  0
[6,]                    0                  0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "male" returned length 49 min 0.8628005 max 0.9999385
                                      value 0.9557705 0.9209945 0.8628005 0.9588433 0.9885464 0.9968823 0.9999385 0.9407288 0.9090127 0.8628005 ...
persp(sibsp:parch) theta 235 ylim 0 1 cex 0.66

-------------------------------------------------------------------------------

> printh(a7$levels)
=== a7$levels
[1] "female" "male"  
> print.stripped.earth.model(a7, "a7")
print.stripped.earth.model(a7)
$dirs
                      pclass2nd pclass3rd survived age sibsp parch
(Intercept)                   0         0        0   0     0     0
survived                      0         0        2   0     0     0
h(parch-4)                    0         0        0   0     0     1
h(4-parch)                    0         0        0   0     0    -1
survived*h(age-15)            0         0        2   1     0     0
survived*h(15-age)            0         0        2  -1     0     0
pclass3rd*survived            0         2        2   0     0     0
h(age-25)*h(4-parch)          0         0        0   1     0    -1
h(25-age)*h(4-parch)          0         0        0  -1     0    -1
h(sibsp-2)*h(4-parch)         0         0        0   0     1    -1
h(2-sibsp)*h(4-parch)         0         0        0   0    -1    -1
pclass3rd                     0         2        0   0     0     0
pclass3rd*h(4-parch)          0         2        0   0     0    -1
pclass2nd*survived            2         0        2   0     0     0
survived*h(age-26)            0         0        2   1     0     0

$cuts
                      pclass2nd pclass3rd survived age sibsp parch
(Intercept)                   0         0        0   0     0     0
survived                      0         0        0   0     0     0
h(parch-4)                    0         0        0   0     0     4
h(4-parch)                    0         0        0   0     0     4
survived*h(age-15)            0         0        0  15     0     0
survived*h(15-age)            0         0        0  15     0     0
pclass3rd*survived            0         0        0   0     0     0
h(age-25)*h(4-parch)          0         0        0  25     0     4
h(25-age)*h(4-parch)          0         0        0  25     0     4
h(sibsp-2)*h(4-parch)         0         0        0   0     2     4
h(2-sibsp)*h(4-parch)         0         0        0   0     2     4
pclass3rd                     0         0        0   0     0     0
pclass3rd*h(4-parch)          0         0        0   0     0     4
pclass2nd*survived            0         0        0   0     0     0
survived*h(age-26)            0         0        0  26     0     0

$selected.terms
 [1]  1  2  6  7  9 10 11 12 13 14

$prune.terms
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    0    0    0    0    0    0    0    0     0     0     0     0
 [2,]    1    2    0    0    0    0    0    0    0     0     0     0     0
 [3,]    1    2    7    0    0    0    0    0    0     0     0     0     0
 [4,]    1    2    7   12    0    0    0    0    0     0     0     0     0
 [5,]    1    2    7   12   13    0    0    0    0     0     0     0     0
 [6,]    1    2    6    7   12   13    0    0    0     0     0     0     0
 [7,]    1    2    6    7   11   12   13    0    0     0     0     0     0
 [8,]    1    2    6    7   10   11   12   13    0     0     0     0     0
 [9,]    1    2    6    7    9   10   11   12   13     0     0     0     0
[10,]    1    2    6    7    9   10   11   12   13    14     0     0     0
[11,]    1    2    6    7    9   10   11   12   13    14    15     0     0
[12,]    1    2    5    6    7    9   10   11   12    13    14    15     0
[13,]    1    2    3    5    6    7    9   10   11    12    13    14    15
[14,]    1    2    3    5    6    7    8    9   10    11    12    13    14
[15,]    1    2    3    4    5    6    7    8    9    10    11    12    13
      [,14] [,15]
 [1,]     0     0
 [2,]     0     0
 [3,]     0     0
 [4,]     0     0
 [5,]     0     0
 [6,]     0     0
 [7,]     0     0
 [8,]     0     0
 [9,]     0     0
[10,]     0     0
[11,]     0     0
[12,]     0     0
[13,]     0     0
[14,]    15     0
[15,]    14    15

$rss
[1] 151.6135

$rsq
[1] 0.3788278

$gcv
[1] 0.1516851

$grsq
[1] 0.3511894

$rss.per.response
[1] 151.6135

$rsq.per.response
[1] 0.3788278

$gcv.per.response
[1] 0.1516851

$grsq.per.response
[1] 0.3511894

$rss.per.subset
 [1] 244.0765 173.4300 170.0254 166.5886 160.0286 157.7717 156.0432 154.6654
 [9] 152.7909 151.6135 151.5772 151.1297 150.6545 150.6090 150.6027

$gcv.per.subset
 [1] 0.2337895 0.1669182 0.1644292 0.1618828 0.1562603 0.1548034 0.1538516
 [8] 0.1532361 0.1521183 0.1516851 0.1523930 0.1526908 0.1529613 0.1536712
[15] 0.1544264

$rss.per.subset
 [1] 244.0765 173.4300 170.0254 166.5886 160.0286 157.7717 156.0432 154.6654
 [9] 152.7909 151.6135 151.5772 151.1297 150.6545 150.6090 150.6027

$gcv.per.subset
 [1] 0.2337895 0.1669182 0.1644292 0.1618828 0.1562603 0.1548034 0.1538516
 [8] 0.1532361 0.1521183 0.1516851 0.1523930 0.1526908 0.1529613 0.1536712
[15] 0.1544264

$coefficients
                              male
(Intercept)            0.804613271
survived              -0.629790111
survived*h(15-age)     0.041696739
pclass3rd*survived     0.256002228
h(25-age)*h(4-parch)  -0.003352047
h(sibsp-2)*h(4-parch)  0.057804726
h(2-sibsp)*h(4-parch)  0.022511021
pclass3rd             -0.567804687
pclass3rd*h(4-parch)   0.118919437
pclass2nd*survived    -0.133047191

$penalty
[1] 3

$nk
[1] 21

$thresh
[1] 0.001

$termcond
[1] 7

$weights
NULL

$glm.list
$glm.list[[1]]

Call:  glm(formula = yarg ~ ., family = family, data = bx.data.frame, 
    weights = weights, na.action = na.action, control = control, 
    model = TRUE, method = "glm.fit", x = TRUE, y = TRUE, contrasts = NULL, 
    trace = (trace >= 2))

Coefficients:
            (Intercept)                 survived     `survived*h(15-age)`  
                1.83875                 -3.56551                  0.22318  
   `pclass3rd*survived`   `h(25-age)*h(4-parch)`  `h(sibsp-2)*h(4-parch)`  
                1.67798                 -0.01902                  0.32740  
`h(2-sibsp)*h(4-parch)`                pclass3rd   `pclass3rd*h(4-parch)`  
                0.15430                 -3.10991                  0.52183  
   `pclass2nd*survived`  
               -0.76992  

Degrees of Freedom: 1045 Total (i.e. Null);  1036 Residual
Null Deviance:	    1380 
Residual Deviance: 942.5 	AIC: 962.5


$glm.coefficients
                            male
(Intercept)            1.8387477
survived              -3.5655119
survived*h(15-age)     0.2231755
pclass3rd*survived     1.6779843
h(25-age)*h(4-parch)  -0.0190203
h(sibsp-2)*h(4-parch)  0.3273980
h(2-sibsp)*h(4-parch)  0.1542971
pclass3rd             -3.1099128
pclass3rd*h(4-parch)   0.5218320
pclass2nd*survived    -0.7699247

$namesx.org
[1] "pclass"   "survived" "age"      "sibsp"    "parch"   

$namesx
[1] "pclass"   "survived" "age"      "sibsp"    "parch"   

$levels
[1] "female" "male"  

$terms
sex ~ pclass + survived + age + sibsp + parch
attr(,"variables")
list(sex, pclass, survived, age, sibsp, parch)
attr(,"factors")
         pclass survived age sibsp parch
sex           0        0   0     0     0
pclass        1        0   0     0     0
survived      0        1   0     0     0
age           0        0   1     0     0
sibsp         0        0   0     1     0
parch         0        0   0     0     1
attr(,"term.labels")
[1] "pclass"   "survived" "age"      "sibsp"    "parch"   
attr(,"order")
[1] 1 1 1 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(sex, pclass, survived, age, sibsp, parch)
attr(,"dataClasses")
      sex    pclass  survived       age     sibsp     parch 
 "factor"  "factor" "numeric" "numeric" "numeric" "numeric" 

$call
earth(formula = sex ~ ., data = etitanic, trace = 1, glm = list(family = "binomial"), 
    degree = 2)

attr(,"class")
[1] "earth"
-------------------------------------------------------------------------------

> 
> a7d <- earth(sex ~ .-pclass, data=etitanic, degree=2, glm=list(family="binomial"), trace=0)
> a7dupdate <- update(a7, form=sex ~ .-pclass)
update.earth: using 1046 by 6 data argument from original call to earth
x is a 1046 by 4 matrix: 1=survived, 2=age, 3=sibsp, 4=parch
y is a 1046 by 1 matrix: 1=male
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.307 RSq 0.366
Prune method "backward" penalty 3 nprune 19: selected 9 of 19 terms, and 4 of 4 predictors
After backward pass GRSq 0.334 RSq 0.36 
GLM male: null.deviance 1379.574 (1045 dof)   deviance 969.4921 (1037 dof)   iters 4
> check.models.equal(a7dupdate, a7d, msg="a7update a7d")
check.models.equal not identical: a7update a7d [but within numerical tolerances]
> printh(a7d$levels)
=== a7d$levels
[1] "female" "male"  
> 
> a7d <- earth(sex ~ .-pclass, data=etitanic, degree=2, glm=list(family="binomial"), trace=0, keepxy=1)
> a7dupdate <- update(a7, form=sex ~ .-pclass)
update.earth: using 1046 by 6 data argument from original call to earth
x is a 1046 by 4 matrix: 1=survived, 2=age, 3=sibsp, 4=parch
y is a 1046 by 1 matrix: 1=male
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.307 RSq 0.366
Prune method "backward" penalty 3 nprune 19: selected 9 of 19 terms, and 4 of 4 predictors
After backward pass GRSq 0.334 RSq 0.36 
GLM male: null.deviance 1379.574 (1045 dof)   deviance 969.4921 (1037 dof)   iters 4
> check.models.equal(a7dupdate, a7d, msg="a7update a7d with keepxy")
check.models.equal not identical: a7update a7d with keepxy [but within numerical tolerances]
> 
> subset. <- rep(TRUE, nrow(etitanic))
> subset.[1:10] <- FALSE
> a7e <- earth(sex ~ ., subset=subset., data=etitanic, degree=2, glm=list(family="binomial"), trace=0)
> a7eupdate <- update(a7, subset=subset.)
update.earth: using 1046 by 6 data argument from original call to earth
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=male
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.341 RSq 0.388
Prune method "backward" penalty 3 nprune 16: selected 12 of 16 terms, and 6 of 6 predictors
After backward pass GRSq 0.353 RSq 0.387 
GLM male: null.deviance 1365.015 (1035 dof)   deviance 922.4507 (1024 dof)   iters 5
> check.models.equal(a7eupdate, a7e, msg="a7update a7e")
check.models.equal not identical: a7update a7e [but within numerical tolerances]
> 
> subset. <- 1:nrow(etitanic) # another way of specifying a subset
> subset.[1:10] <- 0
> a7eeupdate <- update(a7, subset=subset.)
update.earth: using 1046 by 6 data argument from original call to earth
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=male
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.341 RSq 0.388
Prune method "backward" penalty 3 nprune 16: selected 12 of 16 terms, and 6 of 6 predictors
After backward pass GRSq 0.353 RSq 0.387 
GLM male: null.deviance 1365.015 (1035 dof)   deviance 922.4507 (1024 dof)   iters 5
> check.models.equal(a7eeupdate, a7e, msg="a7update a7e with alternative subset")
check.models.equal not identical: a7update a7e with alternative subset [but within numerical tolerances]
> 
> a7f <- earth(sex ~ ., data=etitanic, degree=2, glm=list(family=binomial(link="probit")), trace=0)
> a7fupdate <- update(a7, glm=list(family=binomial(link="probit")))
update.earth: using 1046 by 6 data argument from original call to earth
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=male
Skipped forward pass
Prune method "backward" penalty 3 nprune 15: selected 10 of 15 terms, and 6 of 6 predictors
After backward pass GRSq 0.351 RSq 0.379 
GLM male: null.deviance 1379.574 (1045 dof)   deviance 941.5551 (1036 dof)   iters 5
> check.models.equal(a7fupdate, a7f, msg="a7update a7f with link=probit")
check.models.equal not identical: a7update a7f with link=probit [but within numerical tolerances]
> 
> a7 <- earth(sex ~ ., data=etitanic, degree=2, glm=list(family="binomial"), keepxy=1)
> a7g <- earth(sex ~ ., data=etitanic, degree=2, glm=list(family=binomial(link="probit")), trace=0)
> a7gupdate <- update(a7, glm=list(family=binomial(link="probit")), trace=1)
update.earth: using 1046 by 6 data saved by keepxy in original call to earth
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=male
Skipped forward pass
Prune method "backward" penalty 3 nprune 15: selected 10 of 15 terms, and 6 of 6 predictors
After backward pass GRSq 0.351 RSq 0.379 
GLM male: null.deviance 1379.574 (1045 dof)   deviance 941.5551 (1036 dof)   iters 5
> check.models.equal(a7gupdate, a7g, msg="a7update a7g with link=probit and keepxy")
check.models.equal not identical: a7update a7g with link=probit and keepxy [but within numerical tolerances]
> 
> a8 <- earth(sex ~ ., data=etitanic, degree=2, glm=list(family="binomial"), keepxy=1)
> a8g <- earth(sex ~ ., data=etitanic[100:900,], degree=2, glm=list(family=binomial), trace=0)
> a8gupdate <- update(a8, data=etitanic[100:900,], trace=1)
x is a 801 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=age, 5=sibsp, ...
y is a 801 by 1 matrix: 1=male
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.344 RSq 0.408
Prune method "backward" penalty 3 nprune 17: selected 9 of 17 terms, and 6 of 6 predictors
After backward pass GRSq 0.368 RSq 0.399 
GLM male: null.deviance 1053.094 (800 dof)   deviance 695.3057 (792 dof)   iters 5
> check.models.equal(a8gupdate, a8g, msg="a8update a8g with new data")
check.models.equal not identical: a8update a8g with new data [but within numerical tolerances]
> 
> # poisson models
> 
> counts <- c(18,17,15,20,10,20,25,13,12)
> counts2 <- c(181,171,151,201,101,201,251,131,121)
> outcome <- gl(3,1,9)
> treatment <- gl(3,3)
> d.AD <- data.frame(treatment, outcome, counts, counts2)
> 
> # one response poisson model
> cat("a8p: one response poisson model\n\n")
a8p: one response poisson model

> a8p <- earth(counts ~ outcome + treatment, glm=list(family=poisson()), trace=3, pmethod="none")
x is a 9 by 4 matrix: 1=outcome2, 2=outcome3, 3=treatment2, 4=treatment3
y is a 9 by 1 matrix: 1=counts

Forward pass: minspan 3 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2     -0.2727 0.2841       0.2841    1     outcome2           0< 2       
4     -0.8939 0.5265       0.2424    2     outcome3           0< 3       
6     -6.5758 0.5265            0    -                                reject term

RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq -6.576 RSq 0.527
Forward pass complete: 5 terms (3 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds
          1      0.0000  0.0000     0.0000      0  
          2     -0.2727  0.2841    -0.2727      1  
chosen    3     -0.8939  0.5265    -0.6212      2  

Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 4 predictors
After backward pass GRSq -0.894 RSq 0.527 

GLM counts: null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4
> show.earth.models(a8p)

Print a8p 

Earth selected 3 of 3 terms, and 2 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 46.875    RSS 83.33333    GRSq -0.8939394    RSq 0.5265152

GLM null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4

Summary a8p 

Call: earth(formula=counts~outcome+treatment, trace=3, glm=list(family=poisson()), 
      pmethod="none")

GLM coefficients
                counts
(Intercept)  3.0445224
outcome2    -0.4542553
outcome3    -0.2929871

Earth selected 3 of 3 terms, and 2 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 46.875    RSS 83.33333    GRSq -0.8939394    RSq 0.5265152

GLM null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4

Summary a8p decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(formula=counts~outcome+treatment, trace=3, glm=list(family=poisson()), 
      pmethod="none")

Earth coefficients
             counts
(Intercept) 21.0000
outcome2    -7.6667
outcome3    -5.3333

GLM coefficients
              counts
(Intercept)  3.04452
outcome2    -0.45426
outcome3    -0.29299

GLM deviance residuals:
     Min        1Q    Median        3Q       Max  
-0.96656  -0.67125  -0.16965   0.84715   1.04939  

GLM coefficients (family poisson, link log)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)  3.04452    0.12599 24.1651  < 2e-16
outcome2    -0.45426    0.20217 -2.2469  0.02465
outcome3    -0.29299    0.19274 -1.5201  0.12849

Number of cases: 9
Earth selected 3 of 3 terms, and 2 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 46.875    RSS 83.333    GRSq -0.89394    RSq 0.52652

GLM null.deviance 10.581 (8 dof)   deviance 5.1291 (6 dof)   iters 4

evimp a8p 

         nsubsets   gcv    rss
outcome2        2 -100.0  100.0
outcome3        1 -83.4   67.9

evimp a8p trim=FALSE

                  nsubsets   gcv    rss
outcome2                 2 -100.0  100.0
outcome3                 1 -83.4   67.9
treatment2-unused        0   0.0    0.0
treatment3-unused        0   0.0    0.0

glm params: epsilon 1e-08 maxit 25 trace FALSE family poisson link log 

plotmo a8p 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula counts ~ outcome + treatment
stripped formula counts~outcome+treatment
no explicit data for formula
about to eval model.frame(formula=counts~outcome+treatment)
got x with colnames from object$call$formula

x[9,2]:
    outcome treatment
1         1         1
2         2         1
3         3         1
...       1         2
9         3         3

factors: outcome treatment 

nlevels: outcome=3 treatment=3 

--get.plotmo.y for earth object

formula counts ~ outcome + treatment
stripped formula counts~outcome+treatment
no explicit data for formula
about to eval model.frame(formula=counts~outcome+treatment)
got y from object$call$formula
get.plotmo.y returned length 9 min 10 max 25
             value 18 17 15 20 10 20 25 13 12 

clip.limits 10 25 

--get.plotmo.singles for earth object

singles: 1 outcome 

--get.plotmo.pairs for earth object

no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "outcome" with newdata[3,2]:
  outcome treatment
1       1         1
2       2         1
3       3         1

factors: outcome treatment 

get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 2 matrix: 1=outcome (factor), 2=treatment (factor)
Contents of x are
  outcome treatment
1       1         1
2       2         1
3       3         1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 2 matrix: 1=outcome (factor), 2=treatment (factor)
Contents of data after call to model.frame are
  outcome treatment
1       1         1
2       2         1
3       3         1
predict.earth: bx is a 3 by 3 matrix: 1=(Intercept), 2=outcome2, 3=outcome3
Contents of bx are
     (Intercept) outcome2 outcome3
[1,]           1        0        0
[2,]           1        1        0
[3,]           1        0        1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "counts" returned length 3 min 13.33333 max 21
                                      value 21 13.33333 15.66667 

ylim 13.33333 21 

--plot.degree1(draw.plot=TRUE)

 grid:    outcome treatment
                1         1

-------------------------------------------------------------------------------

> # build a standard GLM model for comparison
> cat("a9: one response poisson model, standard GLM model for comparison\n\n")
a9: one response poisson model, standard GLM model for comparison

> a9 <- glm(counts ~ outcome + treatment, family="poisson")
> cat("Direct GLM a9 summary:\n\n")
Direct GLM a9 summary:

> print(summary(a9))

Call:
glm(formula = counts ~ outcome + treatment, family = "poisson")

Deviance Residuals: 
       1         2         3         4         5         6         7         8  
-0.67125   0.96272  -0.16965  -0.21999  -0.95552   1.04939   0.84715  -0.09167  
       9  
-0.96656  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept)  3.045e+00  1.709e-01  17.815   <2e-16 ***
outcome2    -4.543e-01  2.022e-01  -2.247   0.0246 *  
outcome3    -2.930e-01  1.927e-01  -1.520   0.1285    
treatment2   1.338e-15  2.000e-01   0.000   1.0000    
treatment3   1.421e-15  2.000e-01   0.000   1.0000    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for poisson family taken to be 1)

    Null deviance: 10.5814  on 8  degrees of freedom
Residual deviance:  5.1291  on 4  degrees of freedom
AIC: 56.761

Number of Fisher Scoring iterations: 4

> plotmo(a9, grid.levels=list(outcome="2"), caption="a9 <- glm(counts ~ outcome + treatment, family=\"poisson\")")

 grid:    outcome treatment
                2         1

> 
> # two response poisson model
> cat("a10: two response poisson model\n\n")
a10: two response poisson model

> a10 <- earth(cbind(counts, counts2) ~ outcome + treatment, glm=list(fam="po"), trace=1, pmethod="none")
x is a 9 by 4 matrix: 1=outcome2, 2=outcome3, 3=treatment2, 4=treatment3
y is a 9 by 2 matrix: 1=counts, 2=counts2
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq -6.576 RSq 0.527
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 4 predictors
After backward pass GRSq -0.894 RSq 0.527 
GLM counts: null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4
GLM counts2: null.deviance 105.166 (8 dof)   deviance 50.96448 (6 dof)   iters 4
> show.earth.models(a10, nresponse="counts2")

Print a10 

Earth selected 3 of 3 terms, and 2 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
             GCV       RSS       GRSq       RSq
counts    46.875   83.3333 -0.8939394 0.5265152
counts2 4687.500 8333.3333 -0.8939394 0.5265152
All     4734.375 8416.6667 -0.8939394 0.5265152

GLM (family poisson, link log)
        null.deviance df  deviance df iters converged
counts       10.58145  8  5.129141  6     4         1
counts2     105.16600  8 50.964475  6     4         1

Summary a10 

Call: earth(formula=cbind(counts, counts2)~outcome+treatment, 
      trace=1, glm=list(fam="po"), pmethod="none")

GLM coefficients
                counts    counts2
(Intercept)  3.0445224  5.3518581
outcome2    -0.4542553 -0.4515339
outcome3    -0.2929871 -0.2913750

Earth selected 3 of 3 terms, and 2 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
             GCV       RSS       GRSq       RSq
counts    46.875   83.3333 -0.8939394 0.5265152
counts2 4687.500 8333.3333 -0.8939394 0.5265152
All     4734.375 8416.6667 -0.8939394 0.5265152

GLM (family poisson, link log)
        null.deviance df  deviance df iters converged
counts       10.58145  8  5.129141  6     4         1
counts2     105.16600  8 50.964475  6     4         1

Summary a10 digits=3, details=TRUE

Call: earth(formula=cbind(counts, counts2)~outcome+treatment, 
      trace=1, glm=list(fam="po"), pmethod="none")

Earth coefficients
            counts counts2
(Intercept)  21.00   211.0
outcome2     -7.67   -76.7
outcome3     -5.33   -53.3

GLM coefficients
            counts counts2
(Intercept)  3.045   5.352
outcome2    -0.454  -0.452
outcome3    -0.293  -0.291

GLM counts deviance residuals:
   Min      1Q  Median      3Q     Max  
-0.967  -0.671  -0.170   0.847   1.049  

GLM counts coefficients (family poisson, link log)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)    3.045      0.126   24.17   <2e-16
outcome2      -0.454      0.202   -2.25    0.025
outcome3      -0.293      0.193   -1.52    0.128

GLM counts2 deviance residuals:
   Min      1Q  Median      3Q     Max  
-3.046  -2.117  -0.535   2.673   3.309  

GLM counts2 coefficients (family poisson, link log)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)   5.3519     0.0397  134.65  < 2e-16
outcome2     -0.4515     0.0637   -7.09  1.4e-12
outcome3     -0.2914     0.0608   -4.79  1.6e-06

Number of cases: 9
Earth selected 3 of 3 terms, and 2 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
         GCV  RSS   GRSq   RSq
counts    47   83 -0.894 0.526
counts2 4688 8333 -0.894 0.526
All     4734 8417 -0.894 0.526

GLM (family poisson, link log)
        null.deviance df deviance df iters converged
counts           10.6  8     5.13  6     4         1
counts2         105.2  8    50.96  6     4         1

evimp a10 

         nsubsets   gcv    rss
outcome2        2 -100.0  100.0
outcome3        1 -83.4   67.9

evimp a10 trim=FALSE

                  nsubsets   gcv    rss
outcome2                 2 -100.0  100.0
outcome3                 1 -83.4   67.9
treatment2-unused        0   0.0    0.0
treatment3-unused        0   0.0    0.0

glm params: epsilon 1e-08 maxit 25 trace FALSE family poisson link log 

plotmo a10 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula cbind(counts, counts2) ~ outcome + treatment
stripped formula cbind(counts,counts2)~outcome+treatment
no explicit data for formula
about to eval model.frame(formula=cbind(counts, counts2)~outcome+treatment)
got x with colnames from object$call$formula

x[9,2]:
    outcome treatment
1         1         1
2         2         1
3         3         1
...       1         2
9         3         3

factors: outcome treatment 

nlevels: outcome=3 treatment=3 

--get.plotmo.y for earth object

formula cbind(counts, counts2) ~ outcome + treatment
stripped formula cbind(counts,counts2)~outcome+treatment
no explicit data for formula
about to eval model.frame(formula=cbind(counts, counts2)~outcome+treatment)
got y from object$call$formula
get.plotmo.y column "counts" returned length 9 min 10 max 25
             value 18 17 15 20 10 20 25 13 12 

clip.limits 10 25 

--get.plotmo.singles for earth object

singles: 1 outcome 

--get.plotmo.pairs for earth object

no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "outcome" with newdata[3,2]:
  outcome treatment
1       1         1
2       2         1
3       3         1

factors: outcome treatment 

get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 2 matrix: 1=outcome (factor), 2=treatment (factor)
Contents of x are
  outcome treatment
1       1         1
2       2         1
3       3         1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 2 matrix: 1=outcome (factor), 2=treatment (factor)
Contents of data after call to model.frame are
  outcome treatment
1       1         1
2       2         1
3       3         1
predict.earth: bx is a 3 by 3 matrix: 1=(Intercept), 2=outcome2, 3=outcome3
Contents of bx are
     (Intercept) outcome2 outcome3
[1,]           1        0        0
[2,]           1        1        0
[3,]           1        0        1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "counts2" returned length 3 min 134.3333 max 211
                                      value 211 134.3333 157.6667 
Warning: predicted values in the "outcome" graph are out of ylim=(10, 25).
         Use clip=FALSE to make this warning go away.

ylim 134.3333 211 

--plot.degree1(draw.plot=TRUE)

 grid:    outcome treatment
                1         1

-------------------------------------------------------------------------------

> 
> # compare family=gaussian to standard earth model
> cat("a11: compare family=gaussian to standard earth model\n\n")
a11: compare family=gaussian to standard earth model

> a11 <- earth(etitanic$sex ~ ., data=etitanic, degree=2, glm=list(family="gaussian"), trace=4)
Call: earth(formula=etitanic$sex~., data=etitanic, trace=4, 
      glm=list(family="gaussian"), degree=2)

x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=age, 5=sibsp, 6=parch
First few rows of x are
     pclass2nd pclass3rd survived     age sibsp parch
[1,]         0         0        1 29.0000     0     0
[2,]         0         0        1  0.9167     1     2
[3,]         0         0        0  2.0000     1     2
[4,]         0         0        0 30.0000     1     2
[5,]         0         0        0 25.0000     1     2
[6,]         0         0        1 48.0000     0     0

y is a 1046 by 1 matrix: 1=male
First few rows of y are
     male
[1,]    0
[2,]    1
[3,]    0
[4,]    1
[5,]    0
[6,]    1

Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.2860 0.2894       0.2894    3     survived           0< 2       
4      0.3055 0.3155      0.02604    6        parch           4  3   4   
6      0.3162 0.3325        0.017    4          age          15  5   6   2   
8      0.3227 0.3420     0.009563    2    pclass3rd           0< 7       2   
10     0.3270 0.3525      0.01049    4          age          25  8   9   5   
12     0.3288 0.3605     0.007986    5        sibsp           2  10  11  5   
14     0.3336 0.3682     0.007705    2    pclass3rd           0< 12      
16     0.3389 0.3763     0.008053    2    pclass3rd           0< 13      5   
18     0.3404 0.3808     0.004528    1    pclass2nd           0< 14      2   
20     0.3395 0.3830     0.002166    4          age          26  15      2   

Reached nk 21
After forward pass GRSq 0.339 RSq 0.383
Forward pass complete: 21 terms (15 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.2860  0.2894     0.2860      1  1 2
          3      0.2967  0.3034     0.0106      2  1 2 7
          4      0.3076  0.3175     0.0109      2  1 2 7 12
          5      0.3316  0.3444     0.0240      3  1 2 7 12 13
          6      0.3379  0.3536     0.0062      4  1 2 6 7 12 13
          7      0.3419  0.3607     0.0041      5  1 2 6 7 11 12 13
          8      0.3446  0.3663     0.0026      5  1 2 6 7 10 11 12 13
          9      0.3493  0.3740     0.0048      5  1 2 6 7 9 10 11 12 13
chosen   10      0.3512  0.3788     0.0019      6  1 2 6 7 9 10 11 12 13 14
         11      0.3482  0.3790    -0.0030      6  1 2 6 7 9 10 11 12 13 14 15
         12      0.3469  0.3808    -0.0013      6  1 2 5 6 7 9 10 11 12 13 14 15
         13      0.3457  0.3828    -0.0012      6  1 2 3 5 6 7 9 10 11 12 13 14 15
         14      0.3427  0.3829    -0.0030      6  1 2 3 5 6 7 8 9 10 11 12 13 14 15
         15      0.3395  0.3830    -0.0032      6  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Prune method "backward" penalty 3 nprune 15: selected 10 of 15 terms, and 6 of 6 predictors
After backward pass GRSq 0.351 RSq 0.379 

y arg to glm() is a 1046 by 1 matrix: 1=male
First few rows of y arg to glm() are
     male
[1,]    0
[2,]    1
[3,]    0
[4,]    1
[5,]    0
[6,]    1
GLM male: null.deviance 244.0765 (1045 dof)   deviance 151.6135 (1036 dof)   iters 2
> cat("\nsummary(a11, details=TRUE)\n\n", sep="")

summary(a11, details=TRUE)

> print(summary(a11, details=TRUE))
Call: earth(formula=etitanic$sex~., data=etitanic, trace=4, 
      glm=list(family="gaussian"), degree=2)

Earth coefficients
                               male
(Intercept)              0.80461327
pclass3rd               -0.56780469
survived                -0.62979011
pclass2nd * survived    -0.13304719
pclass3rd * survived     0.25600223
pclass3rd * h(4-parch)   0.11891944
survived * h(15-age)     0.04169674
h(25-age) * h(4-parch)  -0.00335205
h(2-sibsp) * h(4-parch)  0.02251102
h(sibsp-2) * h(4-parch)  0.05780473

GLM coefficients
                               male
(Intercept)              0.80461327
pclass3rd               -0.56780469
survived                -0.62979011
pclass2nd * survived    -0.13304719
pclass3rd * survived     0.25600223
pclass3rd * h(4-parch)   0.11891944
survived * h(15-age)     0.04169674
h(25-age) * h(4-parch)  -0.00335205
h(2-sibsp) * h(4-parch)  0.02251102
h(sibsp-2) * h(4-parch)  0.05780473

GLM deviance residuals:
       Min          1Q      Median          3Q         Max  
-0.9847014  -0.2423562   0.0603206   0.1623560   0.8906910  

GLM coefficients (family gaussian, link identity)
                             Estimate    Std. Error   t value   Pr(>|t|)
(Intercept)              0.8046132715  0.0434481395  18.51894 < 2.22e-16
survived                -0.6297901108  0.0377419095 -16.68676 < 2.22e-16
survived * h(15-age)     0.0416967388  0.0066634711   6.25751 5.7159e-10
pclass3rd * survived     0.2560022280  0.0554338985   4.61815 4.3579e-06
h(25-age) * h(4-parch)  -0.0033520473  0.0009866737  -3.39732 0.00070636
h(sibsp-2) * h(4-parch)  0.0578047263  0.0145956049   3.96042 7.9933e-05
h(2-sibsp) * h(4-parch)  0.0225110209  0.0056430761   3.98914 7.0976e-05
pclass3rd               -0.5678046868  0.0951592893  -5.96689 3.3161e-09
pclass3rd * h(4-parch)   0.1189194372  0.0244514624   4.86349 1.3321e-06
pclass2nd * survived    -0.1330471910  0.0469066015  -2.83643 0.00465100

GLM dispersion parameter for gaussian family taken to be 0.1463451

Number of cases: 1046
Earth selected 10 of 15 terms, and 6 of 6 predictors 
Termination condition: Reached nk 21
Importance: survived, pclass3rd, parch, age, sibsp, pclass2nd
Number of terms at each degree of interaction: 1 2 7
Earth GCV 0.1516851    RSS 151.6135    GRSq 0.3511894    RSq 0.3788278

GLM null.deviance 244.0765 (1045 dof)   deviance 151.6135 (1036 dof)   iters 2
> stopifnot(identical(a11$coefficients, a11$glm.coefficients))
> cat("-------------------------------------------------------------------------------\n\n")
-------------------------------------------------------------------------------

> 
> cat("a12: compare family=gaussian to standard earth model with two responses\n\n")
a12: compare family=gaussian to standard earth model with two responses

> a12 <- earth(cbind(etitanic$sex, (as.integer(etitanic$age)^2)) ~ ., data=etitanic, degree=2, glm=list(family="gaussian"), trace=4)
Call: earth(formula=cbind(etitanic$sex, (as.integer(etitanic$age)^2))~
      ., data=etitanic, trace=4, glm=list(family="gaussian"), 
      degree=2)

x is a 1046 by 5 matrix: 1=pclass2nd, 2=pclass3rd, 3=survived, 4=sibsp, 5=parch
First few rows of x are
     pclass2nd pclass3rd survived sibsp parch
[1,]         0         0        1     0     0
[2,]         0         0        1     1     2
[3,]         0         0        0     1     2
[4,]         0         0        0     1     2
[5,]         0         0        0     1     2
[6,]         0         0        1     0     0

y is a 1046 by 2 matrix: 1=y1, 2=y2
First few rows of y are
     y1   y2
[1,]  1  841
[2,]  2    0
[3,]  1    4
[4,]  2  900
[5,]  1  625
[6,]  2 2304

Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.1060 0.1103       0.1103    2    pclass3rd           0< 2       
4      0.1653 0.1733      0.06303    1    pclass2nd           0< 3       
6      0.2059 0.2210      0.04767    5        parch           2  4   5   
8      0.2210 0.2396      0.01859    3     survived           0< 6       
10     0.2226 0.2484      0.00886    5        parch           3  7   8   2   
12     0.2220 0.2552     0.006748    4        sibsp           1  9   10  
14     0.2168 0.2575      0.00233    4        sibsp           1  11  12  2   
16     0.2126 0.2608      0.00328    5        parch           1  13  14  12  
18     0.2112 0.2631     0.002336    3     survived           0< 15      2   
20     0.2055 0.2652     0.002045    4        sibsp           2  16  17  4   

Reached nk 21
After forward pass GRSq 0.206 RSq 0.265
Forward pass complete: 21 terms (17 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.1060  0.1103     0.1060      1  1 2
          3      0.1653  0.1733     0.0593      2  1 2 3
          4      0.1807  0.1925     0.0154      3  1 2 3 5
          5      0.2059  0.2210     0.0251      3  1 2 3 4 5
          6      0.2210  0.2396     0.0152      4  1 2 3 4 5 6
          7      0.2261  0.2481     0.0050      4  1 2 3 4 5 6 7
chosen    8      0.2293  0.2549     0.0032      5  1 2 3 4 5 6 7 9
          9      0.2278  0.2571    -0.0014      5  1 2 3 4 5 6 7 9 15
         10      0.2251  0.2582    -0.0027      5  1 2 3 4 5 6 7 9 11 15
         11      0.2233  0.2600    -0.0018      5  1 2 3 4 5 6 7 9 11 14 15
         12      0.2218  0.2622    -0.0015      5  1 2 3 4 5 6 7 9 11 12 14 15
         13      0.2189  0.2631    -0.0030      5  1 2 3 4 5 6 7 9 11 12 14 15 17
         14      0.2166  0.2645    -0.0023      5  1 2 3 4 5 6 7 9 10 11 12 14 15 17
         15      0.2132  0.2650    -0.0034      5  1 2 3 4 5 6 7 9 10 11 12 13 14 15 17
         16      0.2094  0.2651    -0.0038      5  1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17
         17      0.2055  0.2652    -0.0039      5  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17

Prune method "backward" penalty 3 nprune 17: selected 8 of 17 terms, and 5 of 5 predictors
After backward pass GRSq 0.229 RSq 0.255 

y arg to glm() is a 1046 by 1 matrix: 1=y1
First few rows of y arg to glm() are
     y1
[1,]  1
[2,]  2
[3,]  1
[4,]  2
[5,]  1
[6,]  2
GLM y1: null.deviance 244.0765 (1045 dof)   deviance 166.9413 (1038 dof)   iters 2
y arg to glm() is a 1046 by 1 matrix: 1=y2
First few rows of y arg to glm() are
       y2
[1,]  841
[2,]    0
[3,]    4
[4,]  900
[5,]  625
[6,] 2304
GLM y2: null.deviance 1022962131 (1045 dof)   deviance 762238527 (1038 dof)   iters 2
> cat("\nsummary(a12, details=TRUE)\n\n", sep="")

summary(a12, details=TRUE)

> print(summary(a12, details=TRUE))
Call: earth(formula=cbind(etitanic$sex, (as.integer(etitanic$age)^2))~
      ., data=etitanic, trace=4, glm=list(family="gaussian"), 
      degree=2)

Earth coefficients
                                y1         y2
(Intercept)             1.70936498  1613.0901
pclass2nd              -0.02982409  -743.6966
pclass3rd              -0.02597336 -1088.0284
survived               -0.51693551  -320.4618
h(sibsp-1)             -0.00579069  -144.9236
h(2-parch)              0.09547208   198.9535
h(parch-2)             -0.07206913  1097.6748
pclass3rd * h(parch-3) -0.01246201 -1098.7314

GLM coefficients
                                y1         y2
(Intercept)             1.70936498  1613.0901
pclass2nd              -0.02982409  -743.6966
pclass3rd              -0.02597336 -1088.0284
survived               -0.51693551  -320.4618
h(sibsp-1)             -0.00579069  -144.9236
h(2-parch)              0.09547208   198.9535
h(parch-2)             -0.07206913  1097.6748
pclass3rd * h(parch-3) -0.01246201 -1098.7314

GLM y1 deviance residuals:
       Min          1Q      Median          3Q         Max  
-0.9003091  -0.3535495   0.1256642   0.1295150   0.8509160  

GLM y1 coefficients (family gaussian, link identity)
                           Estimate   Std. Error   t value   Pr(>|t|)
(Intercept)             1.709364978  0.049830152  34.30383 < 2.22e-16
pclass3rd              -0.025973359  0.031760086  -0.81780    0.41366
pclass2nd              -0.029824090  0.034820121  -0.85652    0.39191
h(parch-2)             -0.072069128  0.101138228  -0.71258    0.47627
h(2-parch)              0.095472079  0.021862774   4.36688 1.3866e-05
survived               -0.516935514  0.027398232 -18.86748 < 2.22e-16
pclass3rd * h(parch-3) -0.012462011  0.156136175  -0.07982    0.93640
h(sibsp-1)             -0.005790694  0.022143196  -0.26151    0.79375

GLM y1 dispersion parameter for gaussian family taken to be 0.1608298

GLM y2 deviance residuals:
       Min          1Q      Median          3Q         Max  
-1721.9970   -522.9686   -193.9686    302.0314   4709.4648  

GLM y2 coefficients (family gaussian, link identity)
                          Estimate  Std. Error   t value   Pr(>|t|)
(Intercept)             1613.09008   106.47699  15.14966 < 2.22e-16
pclass3rd              -1088.02841    67.86490 -16.03227 < 2.22e-16
pclass2nd               -743.69660    74.40358  -9.99544 < 2.22e-16
h(parch-2)              1097.67484   216.11201   5.07919 4.4918e-07
h(2-parch)               198.95347    46.71634   4.25876 2.2421e-05
survived                -320.46182    58.54450  -5.47382 5.5224e-08
pclass3rd * h(parch-3) -1098.73135   333.63154  -3.29325  0.0010238
h(sibsp-1)              -144.92362    47.31555  -3.06292  0.0022484

GLM y2 dispersion parameter for gaussian family taken to be 734333.8

Number of cases: 1046
Earth selected 8 of 17 terms, and 5 of 5 predictors 
Termination condition: Reached nk 21
Importance: pclass3rd, pclass2nd, parch, survived, sibsp
Number of terms at each degree of interaction: 1 6 1

Earth
          GCV       RSS      GRSq       RSq
y1       0.17       167 0.2925321 0.3160288
y2  755194.68 762238527 0.2292736 0.2548712
All 755194.84 762238694 0.2292736 0.2548712

GLM (family gaussian, link identity)
   null.deviance   df     deviance   df iters converged
y1  2.440765e+02 1045 1.669413e+02 1038     2         1
y2  1.022962e+09 1045 7.622385e+08 1038     2         1
> stopifnot(identical(a12$coefficients, a12$glm.coefficients))
> 
> # test to see how standard model.matrix does column numbering with formula
> 
> my.x1 <- as.numeric(ToothGrowth[,2]) # supp was VC or OJ
> my.x2 <- as.numeric(ToothGrowth[,3]) # dose
> my.input.mat <- cbind(my.x1, my.x2)
> my.response <- ToothGrowth[,1]
> a13 <- earth(my.response~my.input.mat, trace=1)
x is a 60 by 2 matrix: 1=my.input.matmy.x1, 2=my.input.matmy.x2
y is a 60 by 1 matrix: 1=my.response
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.682 RSq 0.762
Prune method "backward" penalty 2 nprune 4: selected 4 of 4 terms, and 2 of 2 predictors
After backward pass GRSq 0.705 RSq 0.762 
> print(summary(a13, details=TRUE))
Call: earth(formula=my.response~my.input.mat, trace=1)

                       coefficients
(Intercept)                  25.285
my.input.matmy.x1            -3.700
h(1-my.input.matmy.x2)      -18.260
h(my.input.matmy.x2-1)        6.365

Number of cases: 60
Selected 4 of 4 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: my.input.matmy.x2, my.input.matmy.x1
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 17.52421    RSS 820.425    GRSq 0.7054941    RSq 0.7623478
> 
> stop.if.not.identical <- function(msg, a, b)
+ {
+     if(!identical(a, b)) {
+        cat(msg, "not identical\n")
+        cat(deparse(substitute(a)), ":\n", sep="")
+        print(a)
+        cat(deparse(substitute(b)), ":\n", sep="")
+        print(b)
+        stop("test failed")
+     }
+     cat(msg, "identical\n")
+ }
> 
> # some matrix interface tests
> 
> # double response glm model with two binomial paired cols
> SF.both <- cbind(SF, SF2)
> df <- data.frame(sex, ldose)
> aref <-  earth(SF.both ~ ., data=df, glm=list(family="binomial"), trace=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.881 RSq 0.975
Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.939 RSq 0.975 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 8.572466 (9 dof)   iters 4
> show.earth.models(aref, nresponse=1)

Print aref 

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary aref 

Call: earth(formula=SF.both~., data=df, trace=1, glm=list(family="binomial"))

GLM coefficients
              numdead   numdead2
(Intercept) -1.344727 -1.0620705
sexmale      1.100743  0.9311516
ldose        1.064214  1.0759950

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary aref decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(formula=SF.both~., data=df, trace=1, glm=list(family="binomial"))

Earth coefficients
            numdead numdead2
(Intercept)  5.8452   6.6429
ldose        3.6429   3.7143
sexmale      3.1667   2.6667

GLM coefficients
            numdead numdead2
(Intercept) -1.3447 -1.06207
ldose        1.0642  1.07600
sexmale      1.1007  0.93115

GLM numdead deviance residuals:
      Min         1Q     Median         3Q        Max  
-1.105398  -0.653432  -0.022249   0.484706   1.429444  

GLM numdead coefficients (family binomial, link logit)
            Estimate Std. Error z value  Pr(>|z|)
(Intercept) -1.34473    0.27965 -4.8085 1.520e-06
ldose        1.06421    0.13108  8.1190 4.702e-16
sexmale      1.10074    0.35583  3.0935  0.001978

GLM numdead2 deviance residuals:
     Min        1Q    Median        3Q       Max  
-1.25549  -0.73593   0.20315   0.69113   1.32952  

GLM numdead2 coefficients (family binomial, link logit)
            Estimate Std. Error z value  Pr(>|z|)
(Intercept) -1.06207    0.26721 -3.9747 7.048e-05
ldose        1.07600    0.13124  8.1987 2.429e-16
sexmale      0.93115    0.35232  2.6429  0.008219

Number of cases: 12
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
            GCV     RSS    GRSq     RSq
numdead  2.3761  9.7024 0.95249 0.98076
numdead2 3.7901 15.4762 0.92646 0.97022
All      6.1662 25.1786 0.93928 0.97541

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead         124.88 11   6.7571  9     4         1
numdead2        128.03 11   8.5725  9     4         1

evimp aref 

        nsubsets   gcv    rss
ldose          2 100.0  100.0
sexmale        1  23.3   22.7

evimp aref trim=FALSE

        nsubsets   gcv    rss
ldose          2 100.0  100.0
sexmale        1  23.3   22.7

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo aref 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula SF.both ~ .
stripped formula SF.both~.
get.data.for.formula: using x from "df" passed to earth 
about to eval model.frame(formula=SF.both~., data=structure(list(sex=structure(c(2L, 
    2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L), .Label=c("female", 
    "male"), class="factor"), ldose=c(-2, -1, 0, 1, 2, 3, -2, 
    -1, 0, 1, 2, 3)), .Names=c("sex", "ldose"), row.names=c(NA, 
    -12L), class="data.frame"))
got x with colnames from object$call$formula

x[12,2]:
       sex ldose
1     male    -2
2     male    -1
3     male     0
...   male     1
12  female     3

factors: sex 

nlevels: sex=2 ldose=6 

--get.plotmo.y for earth object

formula SF.both ~ .
stripped formula SF.both~.
get.data.for.formula: using y from "df" passed to earth 
about to eval model.frame(formula=SF.both~., data=structure(list(sex=structure(c(2L, 
    2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L), .Label=c("female", 
    "male"), class="factor"), ldose=c(-2, -1, 0, 1, 2, 3, -2, 
    -1, 0, 1, 2, 3)), .Names=c("sex", "ldose"), row.names=c(NA, 
    -12L), class="data.frame"))
got y from object$call$formula
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose
       female   0.5


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,2]:
     sex ldose
1 female   0.5
2   male   0.5

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female   0.5
2   male   0.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1 female   0.5
2   male   0.5
predict.earth: bx is a 2 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1   0.5       0
[2,]           1   0.5       1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.3073324 max 0.5715365
                                      value 0.3073324 0.5715365 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,2]:
       sex ldose
1   female    -2
2   female    -1
3   female     0
... female     1
6   female     3

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female    -2
2 female    -1
3 female     0
4 female     1
5 female     2
6 female     3
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 6 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1 female    -2
2 female    -1
3 female     0
4 female     1
5 female     2
6 female     3
predict.earth: bx is a 6 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       0
[2,]           1    -1       0
[3,]           1     0       0
[4,]           1     1       0
[5,]           1     2       0
[6,]           1     3       0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.03008577 max 0.8638821
                                      value 0.03008577 0.08249341 0.2067337 0.4303279 0.6864771 0.8638821 
-------------------------------------------------------------------------------

> 
> a21 <-  earth(data.frame(sex, ldose), SF.both, glm=list(family="binomial"), trace=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.881 RSq 0.975
Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.939 RSq 0.975 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 8.572466 (9 dof)   iters 4
> show.earth.models(a21, nresponse="numdead2")

Print a21 

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a21 

Call: earth(x=data.frame(sex, ldose), y=SF.both, trace=1, glm=list(family="binomial"))

GLM coefficients
              numdead   numdead2
(Intercept) -1.344727 -1.0620705
sexmale      1.100743  0.9311516
ldose        1.064214  1.0759950

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a21 digits=3, details=TRUE

Call: earth(x=data.frame(sex, ldose), y=SF.both, trace=1, glm=list(family="binomial"))

Earth coefficients
            numdead numdead2
(Intercept)    5.84     6.64
ldose          3.64     3.71
sexmale        3.17     2.67

GLM coefficients
            numdead numdead2
(Intercept)   -1.34   -1.062
ldose          1.06    1.076
sexmale        1.10    0.931

GLM numdead deviance residuals:
    Min       1Q   Median       3Q      Max  
-1.1054  -0.6534  -0.0222   0.4847   1.4294  

GLM numdead coefficients (family binomial, link logit)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)   -1.345      0.280   -4.81  1.5e-06
ldose          1.064      0.131    8.12  4.7e-16
sexmale        1.101      0.356    3.09    0.002

GLM numdead2 deviance residuals:
   Min      1Q  Median      3Q     Max  
-1.255  -0.736   0.203   0.691   1.330  

GLM numdead2 coefficients (family binomial, link logit)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)   -1.062      0.267   -3.97  7.0e-05
ldose          1.076      0.131    8.20  2.4e-16
sexmale        0.931      0.352    2.64   0.0082

Number of cases: 12
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
          GCV  RSS  GRSq   RSq
numdead  2.38  9.7 0.953 0.981
numdead2 3.79 15.5 0.926 0.970
All      6.17 25.2 0.939 0.975

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead            125 11     6.76  9     4         1
numdead2           128 11     8.57  9     4         1

evimp a21 

        nsubsets   gcv    rss
ldose          2 100.0  100.0
sexmale        1  23.3   22.7

evimp a21 trim=FALSE

        nsubsets   gcv    rss
ldose          2 100.0  100.0
sexmale        1  23.3   22.7

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a21 
Using env parent.frame()

--get.plotmo.x for earth object

got x with colnames from object$call$x

x[12,2]:
       sex ldose
1     male    -2
2     male    -1
3     male     0
...   male     1
12  female     3

factors: sex 

nlevels: sex=2 ldose=6 

--get.plotmo.y for earth object

got y from object$call$y
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose
       female   0.5


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,2]:
     sex ldose
1 female   0.5
2   male   0.5

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female   0.5
2   male   0.5
predict.earth: bx is a 2 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1   0.5       0
[2,]           1   0.5       1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead2" returned length 2 min 0.3719003 max 0.6003872
                                      value 0.3719003 0.6003872 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,2]:
       sex ldose
1   female    -2
2   female    -1
3   female     0
... female     1
6   female     3

factors: sex 

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1 female    -2
2 female    -1
3 female     0
4 female     1
5 female     2
6 female     3
predict.earth: bx is a 6 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       0
[2,]           1    -1       0
[3,]           1     0       0
[4,]           1     1       0
[5,]           1     2       0
[6,]           1     3       0
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead2" returned length 6 min 0.03864002 max 0.8971466
                                      value 0.03864002 0.1054517 0.256914 0.5034811 0.7483666 0.8971466 
-------------------------------------------------------------------------------

> check.models.equal(aref, a21, msg="aref a21")
check.models.equal not identical: aref a21 [but within numerical tolerances]
> 
> a21 <-  earth(cbind(sex, ldose), SF.both, glm=list(family="binomial"), trace=1)
x is a 12 by 2 matrix: 1=sex, 2=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.881 RSq 0.975
Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.939 RSq 0.975 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 8.572466 (9 dof)   iters 4
> show.earth.models(a21, nresponse="numdead")

Print a21 

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sex
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a21 

Call: earth(x=cbind(sex, ldose), y=SF.both, trace=1, glm=list(family="binomial"))

GLM coefficients
              numdead   numdead2
(Intercept) -2.445471 -1.9932220
sex          1.100743  0.9311516
ldose        1.064214  1.0759950

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sex
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a21 decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(x=cbind(sex, ldose), y=SF.both, trace=1, glm=list(family="binomial"))

Earth coefficients
            numdead numdead2
(Intercept)  2.6786   3.9762
ldose        3.6429   3.7143
sex          3.1667   2.6667

GLM coefficients
            numdead numdead2
(Intercept) -2.4455 -1.99322
ldose        1.0642  1.07600
sex          1.1007  0.93115

GLM numdead deviance residuals:
      Min         1Q     Median         3Q        Max  
-1.105398  -0.653432  -0.022249   0.484706   1.429444  

GLM numdead coefficients (family binomial, link logit)
            Estimate Std. Error z value  Pr(>|z|)
(Intercept) -2.44547    0.59191 -4.1315 3.604e-05
ldose        1.06421    0.13108  8.1190 4.702e-16
sex          1.10074    0.35583  3.0935  0.001978

GLM numdead2 deviance residuals:
     Min        1Q    Median        3Q       Max  
-1.25549  -0.73593   0.20315   0.69113   1.32952  

GLM numdead2 coefficients (family binomial, link logit)
            Estimate Std. Error z value  Pr(>|z|)
(Intercept) -1.99322    0.57606 -3.4601  0.000540
ldose        1.07600    0.13124  8.1987 2.429e-16
sex          0.93115    0.35232  2.6429  0.008219

Number of cases: 12
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sex
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
            GCV     RSS    GRSq     RSq
numdead  2.3761  9.7024 0.95249 0.98076
numdead2 3.7901 15.4762 0.92646 0.97022
All      6.1662 25.1786 0.93928 0.97541

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead         124.88 11   6.7571  9     4         1
numdead2        128.03 11   8.5725  9     4         1

evimp a21 

      nsubsets   gcv    rss
ldose        2 100.0  100.0
sex          1  23.3   22.7

evimp a21 trim=FALSE

      nsubsets   gcv    rss
ldose        2 100.0  100.0
sex          1  23.3   22.7

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a21 
Using env parent.frame()

--get.plotmo.x for earth object

got x with colnames from object$call$x

x[12,2]:
    sex ldose
1     2    -2
2     2    -1
3     2     0
...   2     1
12    1     3

nlevels: sex=2 ldose=6 

--get.plotmo.y for earth object

got y from object$call$y
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose
          1.5   0.5


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,2]:
  sex ldose
1   1   0.5
2   2   0.5

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=sex, 2=ldose
Contents of x are
  sex ldose
1   1   0.5
2   2   0.5
predict.earth: bx is a 2 by 3 matrix: 1=(Intercept), 2=ldose, 3=sex
Contents of bx are
     (Intercept) ldose sex
[1,]           1   0.5   1
[2,]           1   0.5   2
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.3073324 max 0.5715365
                                      value 0.3073324 0.5715365 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,2]:
    sex ldose
1   1.5    -2
2   1.5    -1
3   1.5     0
... 1.5     1
6   1.5     3

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 2 matrix: 1=sex, 2=ldose
Contents of x are
  sex ldose
1 1.5    -2
2 1.5    -1
3 1.5     0
4 1.5     1
5 1.5     2
6 1.5     3
predict.earth: bx is a 6 by 3 matrix: 1=(Intercept), 2=ldose, 3=sex
Contents of bx are
     (Intercept) ldose sex
[1,]           1    -2 1.5
[2,]           1    -1 1.5
[3,]           1     0 1.5
[4,]           1     1 1.5
[5,]           1     2 1.5
[6,]           1     3 1.5
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.05103871 max 0.9166965
                                      value 0.05103871 0.1348699 0.3112342 0.5670581 0.7915134 0.9166965 
-------------------------------------------------------------------------------

> # TODO does not match because different conversion of factor with cbind and earth, revisit
> # check.models.equal(aref, a21, msg="aref a21")
> 
> df.both <- data.frame(SF, SF2)
> a22 <-  earth(cbind(sex, ldose), df.both, glm=list(family="binomial"), trace=1)
x is a 12 by 2 matrix: 1=sex, 2=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.881 RSq 0.975
Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.939 RSq 0.975 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 128.0299 (11 dof)   deviance 8.572466 (9 dof)   iters 4
> show.earth.models(a22, nresponse=1)

Print a22 

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sex
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a22 

Call: earth(x=cbind(sex, ldose), y=df.both, trace=1, glm=list(family="binomial"))

GLM coefficients
              numdead   numdead2
(Intercept) -2.445471 -1.9932220
sex          1.100743  0.9311516
ldose        1.064214  1.0759950

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sex
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
              GCV       RSS      GRSq       RSq
numdead  2.376093  9.702381 0.9524860 0.9807588
numdead2 3.790087 15.476190 0.9264592 0.9702190
All      6.166181 25.178571 0.9392766 0.9754095

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead       124.8756 11 6.757064  9     4         1
numdead2      128.0299 11 8.572466  9     4         1

Summary a22 digits=3, details=TRUE

Call: earth(x=cbind(sex, ldose), y=df.both, trace=1, glm=list(family="binomial"))

Earth coefficients
            numdead numdead2
(Intercept)    2.68     3.98
ldose          3.64     3.71
sex            3.17     2.67

GLM coefficients
            numdead numdead2
(Intercept)   -2.45   -1.993
ldose          1.06    1.076
sex            1.10    0.931

GLM numdead deviance residuals:
    Min       1Q   Median       3Q      Max  
-1.1054  -0.6534  -0.0222   0.4847   1.4294  

GLM numdead coefficients (family binomial, link logit)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)   -2.445      0.592   -4.13  3.6e-05
ldose          1.064      0.131    8.12  4.7e-16
sex            1.101      0.356    3.09    0.002

GLM numdead2 deviance residuals:
   Min      1Q  Median      3Q     Max  
-1.255  -0.736   0.203   0.691   1.330  

GLM numdead2 coefficients (family binomial, link logit)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)   -1.993      0.576   -3.46  0.00054
ldose          1.076      0.131    8.20  2.4e-16
sex            0.931      0.352    2.64  0.00822

Number of cases: 12
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sex
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
          GCV  RSS  GRSq   RSq
numdead  2.38  9.7 0.953 0.981
numdead2 3.79 15.5 0.926 0.970
All      6.17 25.2 0.939 0.975

GLM (family binomial, link logit)
         null.deviance df deviance df iters converged
numdead            125 11     6.76  9     4         1
numdead2           128 11     8.57  9     4         1

evimp a22 

      nsubsets   gcv    rss
ldose        2 100.0  100.0
sex          1  23.3   22.7

evimp a22 trim=FALSE

      nsubsets   gcv    rss
ldose        2 100.0  100.0
sex          1  23.3   22.7

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a22 
Using env parent.frame()

--get.plotmo.x for earth object

got x with colnames from object$call$x

x[12,2]:
    sex ldose
1     2    -2
2     2    -1
3     2     0
...   2     1
12    1     3

nlevels: sex=2 ldose=6 

--get.plotmo.y for earth object

got y from object$call$y
get.plotmo.y column "numdead" returned length 12 min 0 max 20
             value 1 4 9 13 18 20 0 2 6 10 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 sex, 2 ldose 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    sex ldose
          1.5   0.5


plotmo.predict(type="response") for degree1 plot "sex" with newdata[2,2]:
  sex ldose
1   1   0.5
2   2   0.5

get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=sex, 2=ldose
Contents of x are
  sex ldose
1   1   0.5
2   2   0.5
predict.earth: bx is a 2 by 3 matrix: 1=(Intercept), 2=ldose, 3=sex
Contents of bx are
     (Intercept) ldose sex
[1,]           1   0.5   1
[2,]           1   0.5   2
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 2 min 0.3073324 max 0.5715365
                                      value 0.3073324 0.5715365 

plotmo.predict(type="response") for degree1 plot "ldose" with newdata[6,2]:
    sex ldose
1   1.5    -2
2   1.5    -1
3   1.5     0
... 1.5     1
6   1.5     3

get.earth.x from model.matrix.earth from predict.earth: x is a 6 by 2 matrix: 1=sex, 2=ldose
Contents of x are
  sex ldose
1 1.5    -2
2 1.5    -1
3 1.5     0
4 1.5     1
5 1.5     2
6 1.5     3
predict.earth: bx is a 6 by 3 matrix: 1=(Intercept), 2=ldose, 3=sex
Contents of bx are
     (Intercept) ldose sex
[1,]           1    -2 1.5
[2,]           1    -1 1.5
[3,]           1     0 1.5
[4,]           1     1 1.5
[5,]           1     2 1.5
[6,]           1     3 1.5
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "numdead" returned length 6 min 0.05103871 max 0.9166965
                                      value 0.05103871 0.1348699 0.3112342 0.5670581 0.7915134 0.9166965 
-------------------------------------------------------------------------------

> # TODO does not match because different conversion of factor with cbind and earth, revisit
> # check.models.equal(aref, a22, msg="a20 a22")
> check.models.equal(a21, a22, msg="a21 a22")
check.models.equal not identical: a21 a22 [but within numerical tolerances]
> 
> # --- predict with factors ------------------------------------------------------
> 
> # there is a lot of redundancy in this routine, it doesn't really matter
> 
> test.predict.with.factors <- function(trace)
+ {
+     cat("\n--- predict with single level factors and a single response, trace=", trace,
+         " ---\n\n", sep="")
+ 
+     cat("first do a quick test of predict.earth help page example\n")
+     a <- earth(Volume ~ ., data = trees)
+     if (trace) print(head(predict(a, trace=trace)))
+     if (trace) print(predict(a, c(10,80), trace=trace))
+ 
+     # test set A: prepare the data
+ 
+     ldose  <- rep(0:5, 2) - 2
+     # ldose1 <- c(0.1, 1.2, 2.3, 3.4, 4.5, 5.6, 0.3, 1.4, 2.5, 3.6, 4.7, 5.8)
+     ldose1 <- c(0.1, 1.2, 0.1, 1.2, 1.0, 0.1, 0.3, 1.4, 0.1, 1.2, 0.1, 0.9)
+     sex <- factor(rep(c("male", "female"), times=c(6,6)))
+     numdead <- c(1,4,9,13,18,20,0,2,6,10,12,16)
+ 
+     sexmale <- (sex == "male")
+     am <-  earth(cbind(sexmale, ldose, ldose1), numdead, trace=trace, pmethod="none", degree=2)
+     af <-  earth(numdead ~ sex + ldose + ldose1, trace=trace, pmethod="none", degree=2)
+     check.models.equal(am, af, "predict with single level factors and a single response")
+ 
+     cat("A-20m head(predict(am, trace=", trace, ")\n", sep="")
+     pm <- predict(am, trace=trace)
+     if (trace) print(head(pm))
+ 
+     cat("A-20f head(predict(af, trace=", trace, ")\n", sep="")
+     pf <- predict(af, trace=trace)
+     if (trace) print(head(pf))
+     stop.if.not.identical("A-20", pm, pf)
+ 
+     cat("A-21m predict(am, newdata=c(sex[1], -2, 0.1), trace=", trace, "))\n", sep="")
+     pm <- predict(am, newdata=c(sex[1]=="male", -2, 0.1), trace=trace)
+     pm.ref <- pm
+     if (trace) print(pm)
+ 
+     cat("A-21f predict(af, newdata=c(sex[1], -2, 0.1), trace=", trace, "))\n", sep="")
+     pf <- predict(af, newdata=c(sex[1]=="male", -2, 0.1), trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-21", pm.ref, pf)
+ 
+     cat("A-22m predict(am, newdata=c(1, -2, 0.1), trace=", trace, ")) use numeric instead of factor sex\n", sep="")
+     pm <- predict(am, newdata=c(1, -2, 0.1), trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-22", pm.ref, pm)
+ 
+     cat("A-22f predict(af, newdata=c(1, -2, 0.1), trace=", trace, ")) use numeric instead of factor sex\n", sep="")
+     pf <- predict(af, newdata=c(1, -2, 0.1), trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-22", pm, pf)
+ 
+     cat("A-23m predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=", trace, ")) multiple rows as a vec\n", sep="")
+     pm <- predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=trace)
+     if (trace) print(pm)
+ 
+     cat("A-23f predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=", trace, ")) multiple rows as a vec\n", sep="")
+     pf <- predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-23", pm, pf)
+ 
+     cat("A-24m predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=", trace, ")) more multiple rows as a vec\n", sep="")
+     pm <- predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=trace)
+     if (trace) print(pm)
+     pm2.ref <- pm
+ 
+     cat("A-24f predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=", trace, ")) more multiple rows as a vec\n", sep="")
+     pf <- predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-24", pm, pf)
+ 
+     cat("A-25m predict(am, xpredict matrix trace=", trace, "\n", sep="")
+     new.data <- matrix(c(sex[1], sex[1], -2, -1, 0.1, 0.1), nrow=2)
+     pm <- predict(am, newdata=new.data, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-25", pm2.ref, pm)
+ 
+     cat("A-25f predict(af, xpredict matrix trace=", trace, "\n", sep="")
+     pf <- predict(af, newdata=new.data, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-25", pm, pf)
+ 
+     cat("A-26m predict(am, new.data with col names) trace=", trace, "\n", sep="")
+     new.data <- matrix(c(sex[1], sex[1], -2, -1, 0.1, 0.1), nrow=2)
+     colnames(new.data) <- c("sex", "ldose", "ldose1")
+     pm <- predict(am, newdata=new.data, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-26m", pm2.ref, pm)
+ 
+     cat("A-26f predict(af, new.data with col names) trace=", trace, "\n", sep="")
+     pf <- predict(af, newdata=new.data, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-26f", pm, pf)
+ 
+     cat("A-27m predict(am, new.data with out of order col names) trace=", trace, "\n", sep="")
+     new.data <- matrix(c(sex[1], sex[1], 0.1, 0.1, -2, -1), nrow=2)
+     colnames(new.data) <- c("sex", "ldose1", "ldose")
+     pm <- predict(am, newdata=new.data, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-27", pm2.ref, pm)
+ 
+     cat("A-27f predict(af, new.data with out of order col names) trace=", trace, "\n", sep="")
+     pf <- predict(af, newdata=new.data, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-27", pm, pf)
+ 
+     cat("A-28m predict(am, xdata.frame without col names) trace=", trace, "\n", sep="")
+     if (trace) print(pm)
+     stop.if.not.identical("A-28", pm2.ref, pm)
+ 
+     cat("A-28f predict(af, xdata.frame without col names) trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(c(sex[1], sex[1]), c(-2, -1), c(0.1, 0.1))
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-28", pm, pf)
+ 
+     cat("A-29m predict(am, xdata.frame with col names) trace=", trace, "\n", sep="")
+     xdata.frame.29 <- data.frame(sex[1], -2, 0.1)
+     colnames(xdata.frame.29) <- c("sex", "ldose", "ldose1")
+     pm <- predict(am, xdata.frame.29, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-29", pm.ref, pm)
+ 
+     cat("A-29f predict(af, xdata.frame with col names) trace=", trace, "\n", sep="")
+     pf <- predict(af, xdata.frame.29, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-29", pm, pf)
+ 
+     cat("A2-29m predict(am, xdata.frame with col names) trace=", trace, "\n", sep="")
+     xdata.frame.29.2 <- data.frame(c(sex[1], sex[1]), c(-2, -1), c(0.1, 0.1))
+     colnames(xdata.frame.29.2) <- c("sex", "ldose", "ldose1")
+     pm <- predict(am, xdata.frame.29.2, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A2-29", pm2.ref, pm)
+ 
+     cat("A2-29f predict(af, xdata.frame with col names) trace=", trace, "\n", sep="")
+     pf <- predict(af, xdata.frame.29.2, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A2-29", pm, pf)
+ 
+     cat("A-31m predict(am, xdata.frame, trace=", trace, ") data frame with factors and wrong col names\n", sep="")
+     xdata.frame <- data.frame(sex[1], -2, 0.1)
+     pm <- predict(am, xdata.frame, trace=trace)
+     stop.if.not.identical("A-31", pm.ref, pm)
+     if (trace) print(pm)
+ 
+     cat("A-31f predict(af, xdata.frame, trace=", trace, ") data frame with factors and wrong col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-31", pm, pf)
+ 
+     cat("A-31bm predict(am, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     xdata.frame <- data.frame(sex=sex[1], ldose=-2, ldose1=0.1)
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-31", pm.ref, pm)
+ 
+     cat("A-31bf predict(af, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-31b", pm, pf)
+ 
+     cat("A-32m predict(am, xdata.frame, trace=", trace, ") # data frame with names\n", sep="")
+     xdata.frame <- data.frame(sex[1], -2, 0.1)
+     colnames(xdata.frame) <- c("sex", "ldose", "ldose1")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-32", pm, pf)
+     stop.if.not.identical("A-32", pm.ref, pm)
+ 
+     cat("A-32f predict(af, xdata.frame, trace=", trace, ") # data frame with names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-32", pm, pf)
+ 
+     cat("A-42am predict(am, newdata=c(1, -2, 0.1), trace=", trace, ")) use numeric instead of factor sex\n", sep="")
+     pm <- predict(am, newdata=c(1, -2, 0.1), trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-42a", pm.ref, pm)
+ 
+     cat("A-42af predict(af, newdata=c(1, -2, 0.1), trace=", trace, ")) use numeric instead of factor sex\n", sep="")
+     pf <- predict(af, newdata=c(1, -2, 0.1), trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-42a", pm, pf)
+ 
+     cat("A-43am predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=", trace, ")) multiple rows as a vec\n", sep="")
+     pm <- predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=trace)
+     if (trace) print(pm)
+ 
+     cat("A-43af predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=", trace, ")) multiple rows as a vec\n", sep="")
+     pf <- predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-43a", pm, pf)
+ 
+     cat("A-44am predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=", trace, ")) more multiple rows as a vec\n", sep="")
+     pm <- predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-44a", pm2.ref, pm)
+ 
+     cat("A-44fm predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=", trace, ")) more multiple rows as a vec\n", sep="")
+     pf <- predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-44f", pm, pf)
+ 
+     cat("A-53m predict(am, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     xdata.frame <- data.frame(sex[1], -2)
+     expect.err(try(predict(am, xdata.frame, trace=trace)))
+ 
+     cat("A-53f predict(af, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     xdata.frame <- data.frame(sex[1], -2)
+     expect.err(try(predict(af, xdata.frame, trace=trace)))
+ 
+     cat("A-54m predict(am, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     xdata.frame <- data.frame(-2, sex[1], 0.1)
+     colnames(xdata.frame) <- c("ldose", "sex", "ldose1")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-54", pm.ref, pm)
+ 
+     cat("A-54f predict(af, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-54", pm, pf)
+ 
+     cat("A-55m predict(am, xdata.frame, trace=", trace, ") data frame without col names\n", sep="")
+     xdata.frame <- data.frame(sex[c(1,7)], c(-2,-1), c(0.1, 0.1))
+     pm <- predict(am, xdata.frame, trace=trace)
+     pm3.ref <- pm
+     if (trace) print(pm)
+ 
+     cat("A-55f predict(af, xdata.frame, trace=", trace, ") data frame without col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-55", pm, pf)
+ 
+     cat("A-56m predict(am, xdata.frame, trace=", trace, ") # data frame with col names\n", sep="")
+     xdata.frame <- data.frame(sex[c(1,7)], c(-2,-1), c(0.1, 0.1))
+     colnames(xdata.frame) <- c("sex", "ldose", "ldose1")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-56", pm3.ref, pm)
+ 
+     cat("A-56f predict(af, xdata.frame, trace=", trace, ") # data frame with col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-56", pm, pf)
+ 
+     cat("A-57m predict(am, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     xdata.frame <- data.frame(sex[c(1,7)], c(-2,-1))
+     expect.err(try(predict(am, xdata.frame, trace=trace)))
+ 
+     cat("A-57f predict(af, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     expect.err(try(predict(af, xdata.frame, trace=trace)))
+     stop.if.not.identical("A-57", pm, pf)
+ 
+     cat("A-58m predict(am, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     xdata.frame <- data.frame(c(-2,-1), sex[c(1,7)], c(0.1, 0.1))
+     colnames(xdata.frame) <- c("ldose", "sex", "ldose1")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-58", pm3.ref, pm)
+ 
+     cat("A-58f predict(af, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-58", pm, pf)
+ 
+     cat("A-59m predict(am, xdata.frame, trace=", trace, ") numeric where factor expected, expect forge on message\n", sep="")
+     xdata.frame.39 <- data.frame(c(sex[1], sex[7]), c(-2,-1), c(0.1, 0.1))
+     colnames(xdata.frame.39) <- c("sex", "ldose", "ldose1")
+     pm <- predict(am, xdata.frame.39, trace=trace)
+     if (trace) print(pm)
+     # stop.if.not.identical("A-59", pm3.ref, pm) # TODO fails but "forge on" message is correctly issued
+ 
+     cat("A-59f predict(af, xdata.frame, trace=", trace, ") numeric where factor expected, expect forge on message\n", sep="")
+     pf <- predict(af, xdata.frame.39, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-59", pm, pf)
+ 
+     cat("A-50m data frame without column names, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex[1], -2, 0.1)
+     colnames(xdata.frame) <- NULL
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-34", pm.ref, pm)
+ 
+     cat("A-60f data frame without column names, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex[1], -2, 0.1)
+     colnames(xdata.frame) <- NULL
+     pf <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-60", pm, pf)
+ 
+     cat("A-61f data frame without extra columns, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex=sex[1], extra1=99, ldose=-2, extra2=99, ldose1=0.1, extra3=sex[7])
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-61", pm, pf)
+ 
+     #-----------------------------------
+ 
+     my.x1 <- as.numeric(ToothGrowth[,2]) # supp was VC or OJ
+     my.x2 <- as.numeric(ToothGrowth[,3]) # dose
+     my.input.mat <- cbind(my.x1, my.x2)
+     my.response <- ToothGrowth[,1]
+ 
+     cat("A-68 input matrix to formula interface trace=", trace, ", expect error \"could not interpret\"\n", sep="")
+     a41 <- earth(my.response~my.input.mat, trace=trace)
+     expect.err(try(predict(a41, c(2.1, 0.6), trace=trace))) #
+ 
+     cat("A-69 above test but with properly named dataframe trace=", trace, "\n", sep="")
+     df <- data.frame(growth=my.response, supp=my.x1, dose=my.x2)
+     a42 <- earth(formula=growth~., data=df, trace=0)
+     p <- predict(a42, c(2.1, 0.6), trace=0) # now gives the correct result
+     if (trace) print(head(p))
+ 
+     cat("Tests with not all predictors used in the model so can pass fewer columns\n")
+     # No factor tests done, they probably won't work in this setup.
+ 
+     # first for earth.default
+     dummy <- rep(0, 12)
+     am <-  earth(cbind(ldose, dummy, ldose1), numdead, trace=trace, pmethod="none", degree=2)
+     # prepare reference prediction, using all columns
+     newdata <- matrix(c(-2, 0, 0.1), ncol=3, nrow=1)
+     colnames(newdata) <- c("ldose", "dummy", "ldose1")
+     pm.ref <- predict(am, newdata=newdata, trace=trace)
+     if (trace) print(pm.ref)
+ 
+     cat("A-72m predict(am, newdata=newdata[two columns], trace=trace)\n")
+     newdata <- matrix(c(-2, 0.1), ncol=2, nrow=1)
+     colnames(newdata) <- c("ldose", "ldose1")
+     pm <- predict(am, newdata=newdata, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-72m", pm, pm.ref)
+ 
+     # prepare reference prediction, using all columns
+     newdata <- data.frame(cbind(ldose, dummy, ldose1))
+     print(newdata)
+     pm.ref <- predict(am, newdata=newdata, trace=trace)
+     if (trace) print(pm.ref)
+ 
+     cat("A-73m predict(am, newdata=newdata[two columns], trace=trace)\n")
+     newdata <- newdata[, c(1,3)]
+     pm <- predict(am, newdata=newdata, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("A-73m", pm, pm.ref)
+ 
+     # now for earth.formula
+     dummy <- rep(0, 12)
+     af <-  earth(numdead ~ ldose + dummy + ldose1, trace=trace, pmethod="none", degree=2)
+     # prepare reference prediction, using all columns
+     newdata <- matrix(c(-2, 0, 0.1), ncol=3, nrow=1)
+     colnames(newdata) <- c("ldose", "dummy", "ldose1")
+     newdata <- as.data.frame(newdata)
+     pf.ref <- predict(af, newdata=newdata, trace=trace)
+     if (trace) print(pf.ref)
+ 
+     cat("A-72f predict(af, newdata=newdata[two columns], trace=trace)\n")
+     newdata <- matrix(c(-2, 0.1), ncol=2, nrow=1)
+     colnames(newdata) <- c("ldose", "ldose1")
+     newdata <- as.data.frame(newdata)
+     pf <- predict(af, newdata=newdata, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-72f", pf, pf.ref)
+ 
+     # prepare reference prediction, using all columns
+     newdata <- data.frame(cbind(ldose, dummy, ldose1))
+     print(newdata)
+     pf.ref <- predict(af, newdata=newdata, trace=trace)
+     if (trace) print(pf.ref)
+ 
+     cat("A-73f predict(af, newdata=newdata[two columns], trace=trace)\n")
+     newdata <- newdata[, c(1,3)]
+     pf <- predict(af, newdata=newdata, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("A-73f", pf, pf.ref)
+ 
+     cat("\n--- B predict with multiple level factors and a multiple real response, trace=", trace,
+         " ---\n\n", sep="")
+ 
+     # note that we can no now longer get away with using numerics for
+     # factors because factors have more than two levels
+ 
+     # test set B: prepare the data
+ 
+     ldose  <- rep(0:5, 2) - 2
+     ldose1 <- c(0.1, 1.2, 2.3, 3.4, 4.5, 5.6, 0.3, 1.4, 2.5, 3.6, 4.7, 5.8)
+     sex3 <- factor(rep(c("male", "female", "andro"), times=c(6,4,2)))
+     fac3 <- factor(c("lev2", "lev2", "lev1", "lev1", "lev3", "lev3",
+                      "lev2", "lev2", "lev1", "lev1", "lev3", "lev3"))
+     numdead <- c(1,4,9,13,18,20,0,2,6,10,12,16)
+     numdead2 <- c(2,3,10,13,19,20,0,3,7,11,13,17)
+     numdeadboth <- cbind(numdead, numdead2)
+     isex <- as.double(sex3) # sex3 as an index
+     df <- data.frame(sex3, ldose, ldose1, fac3)
+     am <-  earth(df, numdeadboth, trace=trace, pmethod="none", degree=2)
+     af <-  earth(numdeadboth ~ ., data=df, trace=trace, pmethod="none", degree=2)
+     check.models.equal(am, af, "B predict with multiple level factors and a multiple real response")
+     cat("20m head(predict(am, trace=", trace, ")\n", sep="")
+     pm <- predict(am, trace=trace)
+     if (trace) print(head(pm))
+ 
+     cat("B-21f head(predict(af, trace=", trace, ")\n", sep="")
+     pf <- predict(af, trace=trace)
+     if (trace) print(head(pf))
+     stop.if.not.identical("B-20", pm, pf)
+ 
+     cat("B-31m predict(am, xdata.frame, trace=", trace, ") data frame with factors and wrong col names\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     pm <- predict(am, xdata.frame, trace=trace)
+     pm.ref <- pm
+     stop.if.not.identical("B-31", pm.ref, pm)
+     if (trace) print(pm)
+ 
+     cat("B-31f predict(af, xdata.frame, trace=", trace, ") data frame with factors and wrong col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-31", pm, pf)
+ 
+     cat("B-31bm predict(am, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     xdata.frame <- data.frame(sex3=sex3[1], ldose=-2, ldose1=0.1, fac3=fac3[1])
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("B-31", pm.ref, pm)
+ 
+     cat("B-31bf predict(af, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-31b", pm, pf)
+ 
+     cat("B-32m predict(am, xdata.frame, trace=", trace, ") # data frame with names\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     colnames(xdata.frame) <- c("sex3", "ldose", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("B-32", pm, pf)
+     stop.if.not.identical("B-32", pm.ref, pm)
+ 
+     cat("B-32f predict(af, xdata.frame, trace=", trace, ") # data frame with names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-32", pm, pf)
+ 
+     cat("B-53m predict(am, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2)
+     expect.err(try(predict(am, xdata.frame, trace=trace)))
+ 
+     cat("B-53f predict(af, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     expect.err(try(predict(af, xdata.frame, trace=trace)))
+ 
+     cat("B-54m predict(am, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     xdata.frame <- data.frame(-2, sex3[1], 0.1, fac3[1])
+     colnames(xdata.frame) <- c("ldose", "sex3", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("B-54", pm.ref, pm)
+ 
+     cat("B-54f predict(af, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-54", pm, pf)
+ 
+     cat("B-55m predict(am, xdata.frame, trace=", trace, ") data frame without col names\n", sep="")
+     xdata.frame <- data.frame(sex3[c(1,7)], c(-2,-1), c(0.1, 0.1), fac3[c(1,9)])
+     pm <- predict(am, xdata.frame, trace=trace)
+     pm3.ref <- pm
+     if (trace) print(pm)
+     cat("B-55m again, but with same x data for both reponses\n")
+     xdata.frame <- data.frame(sex3[c(1,1)], c(-2,-2), c(0.1, 0.1), fac3[c(1,1)])
+     pm <- predict(am, xdata.frame, trace=trace)
+     print(pm)
+ 
+     cat("B-55f predict(af, xdata.frame, trace=", trace, ") data frame without col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-55", pm, pf)
+ 
+     cat("B2-55bm predict(am, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     xdata.frame <- data.frame(sex3=sex3[c(1,7)], ldose=c(-2,-1), ldose1=c(0.1,0.1), fac3=fac3[c(1,9)])
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("B2-55", pm3.ref, pm)
+ 
+     cat("B2-55bf predict(af, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B2-55b", pm, pf)
+ 
+     cat("B-56m predict(am, xdata.frame, trace=", trace, ") # data frame with col names\n", sep="")
+     xdata.frame <- data.frame(sex3[c(1,7)], c(-2,-1), c(0.1, 0.1), fac3[c(1,9)])
+     colnames(xdata.frame) <- c("sex3", "ldose", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("B-56", pm3.ref, pm)
+ 
+     cat("B-56f predict(af, xdata.frame, trace=", trace, ") # data frame with col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-56", pm, pf)
+ 
+     cat("B-57m predict(am, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     xdata.frame <- data.frame(sex3[c(1,7)], c(-2,-1))
+     expect.err(try(predict(am, xdata.frame, trace=trace)))
+ 
+     cat("B-57f predict(af, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     expect.err(try(predict(af, xdata.frame, trace=trace)))
+     stop.if.not.identical("B-57", pm, pf)
+ 
+     cat("B-58m predict(am, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     xdata.frame <- data.frame(c(-2,-1), sex3[c(1,7)], c(0.1, 0.1),  fac3[c(1,9)])
+     colnames(xdata.frame) <- c("ldose", "sex3", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("B-58", pm3.ref, pm)
+ 
+     cat("B-58f predict(af, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-58", pm, pf)
+ 
+     cat("B-50m data frame without column names, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     colnames(xdata.frame) <- NULL
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("B-34", pm.ref, pm)
+ 
+     cat("B-60f data frame without column names, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     colnames(xdata.frame) <- NULL
+     pf <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-60", pm, pf)
+ 
+     cat("B-60f data frame without extra columns, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex3=sex3[1], extra1=99, ldose=-2, extra2=99,
+                                ldose1=0.1, fac3=fac3[1], extra3=sex3[7])
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("B-60f", pm, pf)
+ 
+     cat("\n--- C predict with multiple level factors and a 3 level factor response, trace=", trace,
+         " ---\n\n", sep="")
+ 
+     # test set C: prepare the data
+ 
+     ldose  <- rep(0:5, 2) - 2
+     ldose1 <- c(0.1, 1.2, 2.3, 3.4, 4.5, 5.6, 0.3, 1.4, 2.5, 3.6, 4.7, 5.8)
+     sex3 <- factor(rep(c("male", "female", "andro"), times=c(6,4,2)))
+     fac3 <- factor(c("lev2", "lev2", "lev1", "lev1", "lev3", "lev3",
+                      "lev2", "lev2", "lev1", "lev1", "lev3", "lev3"))
+     facdead <- factor(c("dead2", "dead2", "dead3", "dead1", "dead3", "dead3",
+                         "dead1", "dead2", "dead1", "dead1", "dead3", "dead3"))
+ 
+     isex <- as.double(sex3) # sex3 as an index
+     df <- data.frame(sex3=sex3, ldose=ldose, ldose1=ldose1, fac3=fac3)
+     am <-  earth(df, facdead, trace=trace, pmethod="none", degree=2)
+     df.with.response <- data.frame(sex3=sex3, ldose=ldose, ldose1=ldose1, facdead=facdead, fac3=fac3)
+     af <-  earth(facdead ~ ., data=df.with.response, trace=trace, pmethod="none", degree=2)
+     check.models.equal(am, af, "C predict with multiple level factors and a multiple real response")
+     cat("20m head(predict(am, trace=", trace, ")\n", sep="")
+     pm <- predict(am, trace=trace)
+     if (trace) print(head(pm))
+ 
+     cat("C-21f head(predict(af, trace=", trace, ")\n", sep="")
+     pf <- predict(af, trace=trace)
+     if (trace) print(head(pf))
+     stop.if.not.identical("C-20", pm, pf)
+ 
+     cat("C-31m predict(am, xdata.frame, trace=", trace, ") data frame with factors and wrong col names\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     pm <- predict(am, xdata.frame, trace=trace)
+     pm.ref <- pm
+     stop.if.not.identical("C-31", pm.ref, pm)
+     if (trace) print(pm)
+ 
+     cat("C-31f predict(af, xdata.frame, trace=", trace, ") data frame with factors and wrong col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-31", pm, pf)
+ 
+     cat("C-31bm predict(am, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     xdata.frame <- data.frame(sex3=sex3[1], ldose=-2, ldose1=0.1, fac3=fac3[1])
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("C-31", pm.ref, pm)
+ 
+     cat("C-31bf predict(af, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-31b", pm, pf)
+ 
+     cat("C-32m predict(am, xdata.frame, trace=", trace, ") # data frame with names\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     colnames(xdata.frame) <- c("sex3", "ldose", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("C-32", pm, pf)
+     stop.if.not.identical("C-32", pm.ref, pm)
+ 
+     cat("C-32f predict(af, xdata.frame, trace=", trace, ") # data frame with names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-32", pm, pf)
+ 
+     cat("C-53m predict(am, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2)
+     expect.err(try(predict(am, xdata.frame, trace=trace)))
+ 
+     cat("C-53f predict(af, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     expect.err(try(predict(af, xdata.frame, trace=trace)))
+ 
+     cat("C-54m predict(am, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     xdata.frame <- data.frame(-2, sex3[1], 0.1, fac3[1])
+     colnames(xdata.frame) <- c("ldose", "sex3", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("C-54", pm.ref, pm)
+ 
+     cat("C-54f predict(af, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-54", pm, pf)
+ 
+     cat("C-55m predict(am, xdata.frame, trace=", trace, ") data frame without col names\n", sep="")
+     xdata.frame <- data.frame(sex3[c(1,7)], c(-2,-1), c(0.1, 0.1), fac3[c(1,9)])
+     pm <- predict(am, xdata.frame, trace=trace)
+     pm3.ref <- pm
+     if (trace) print(pm)
+ 
+     cat("C-55f predict(af, xdata.frame, trace=", trace, ") data frame without col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-55", pm, pf)
+ 
+     cat("C2-55bm predict(am, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     xdata.frame <- data.frame(sex3=sex3[c(1,7)], ldose=c(-2,-1), ldose1=c(0.1,0.1), fac3=fac3[c(1,9)])
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("C2-55", pm3.ref, pm)
+ 
+     cat("C2-55bf predict(af, xdata.frame, trace=", trace, ") data frame col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C2-55b", pm, pf)
+ 
+     cat("C-56m predict(am, xdata.frame, trace=", trace, ") # data frame with col names\n", sep="")
+     xdata.frame <- data.frame(sex3[c(1,7)], c(-2,-1), c(0.1, 0.1), fac3[c(1,9)])
+     colnames(xdata.frame) <- c("sex3", "ldose", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("C-56", pm3.ref, pm)
+ 
+     cat("C-56f predict(af, xdata.frame, trace=", trace, ") # data frame with col names\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-56", pm, pf)
+ 
+     cat("C-57m predict(am, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     xdata.frame <- data.frame(sex3[c(1,7)], c(-2,-1))
+     expect.err(try(predict(am, xdata.frame, trace=trace)))
+ 
+     cat("C-57f predict(af, xdata.frame, trace=", trace, ") data frame with not enough columns, expect error message\n", sep="")
+     expect.err(try(predict(af, xdata.frame, trace=trace)))
+     stop.if.not.identical("C-57", pm, pf)
+ 
+     cat("C-58m predict(am, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     xdata.frame <- data.frame(c(-2,-1), sex3[c(1,7)], c(0.1, 0.1),  fac3[c(1,9)])
+     colnames(xdata.frame) <- c("ldose", "sex3", "ldose1", "fac3")
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("C-58", pm3.ref, pm)
+ 
+     cat("C-58f predict(af, xdata.frame, trace=", trace, ") # data frame with cols in different order\n", sep="")
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-58", pm, pf)
+ 
+     cat("C-50m data frame without column names, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     colnames(xdata.frame) <- NULL
+     pm <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pm)
+     stop.if.not.identical("C-34", pm.ref, pm)
+ 
+     cat("C-60f data frame without column names, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex3[1], -2, 0.1, fac3[1])
+     colnames(xdata.frame) <- NULL
+     pf <- predict(am, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-60", pm, pf)
+ 
+     cat("C-61f data frame without extra columns, trace=", trace, "\n", sep="")
+     xdata.frame <- data.frame(sex3=sex3[1], extra1=99, ldose=-2, extra2=99,
+                                ldose1=0.1, fac3=fac3[1], extra3=sex3[7])
+     pf <- predict(af, xdata.frame, trace=trace)
+     if (trace) print(pf)
+     stop.if.not.identical("C-61", pm, pf)
+ }
> test.predict.with.factors(trace=1)

--- predict with single level factors and a single response, trace=1 ---

first do a quick test of predict.earth help page example
predict.earth: returning earth fitted.values 
        Volume
[1,]  7.752710
[2,]  8.928323
[3,]  9.712065
[4,] 16.373874
[5,] 20.062292
[6,] 21.422389
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
predict.earth: returning earth predictions 
       Volume
[1,] 16.83508
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
x is a 12 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.999
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 3 predictors
After backward pass GRSq 0.836 RSq 0.999 
check.models.equal not identical: predict with single level factors and a single response [but within numerical tolerances]
A-20m head(predict(am, trace=1)
predict.earth: returning earth fitted.values 
       numdead
[1,]  1.059809
[2,]  4.060611
[3,]  8.699886
[4,] 13.339161
[5,] 17.680532
[6,] 20.160001
A-20f head(predict(af, trace=1)
predict.earth: returning earth fitted.values 
       numdead
[1,]  1.059809
[2,]  4.060611
[3,]  8.699886
[4,] 13.339161
[5,] 17.680532
[6,] 20.160001
A-20 identical
A-21m predict(am, newdata=c(sex[1], -2, 0.1), trace=1))
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       1    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-21f predict(af, newdata=c(sex[1], -2, 0.1), trace=1))
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   1    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   1    -2    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   1    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-21 identical
A-22m predict(am, newdata=c(1, -2, 0.1), trace=1)) use numeric instead of factor sex
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       1    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-22 identical
A-22f predict(af, newdata=c(1, -2, 0.1), trace=1)) use numeric instead of factor sex
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   1    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   1    -2    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   1    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-22 identical
A-23m predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=1)) multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       2    -2    0.1
[2,]       2    -2    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -2       2            -4         -0.2
predict.earth: returning earth predictions 
     numdead
[1,] 1.80849
[2,] 1.80849
A-23f predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=1)) multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -2       2            -4         -0.2
predict.earth: returning earth predictions 
     numdead
[1,] 1.80849
[2,] 1.80849
A-23 identical
A-24m predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=1)) more multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       2    -2    0.1
[2,]       2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-24f predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=1)) more multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-24 identical
A-25m predict(am, xpredict matrix trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       2    -2    0.1
[2,]       2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-25 identical
A-25f predict(af, xpredict matrix trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-25 identical
A-26m predict(am, new.data with col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
[1,]   2    -2    0.1
[2,]   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-26m identical
A-26f predict(af, new.data with col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-26f identical
A-27m predict(am, new.data with out of order col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: sex ldose1 ldose
    New columns: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
[1,]   2    -2    0.1
[2,]   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-27 identical
A-27f predict(af, new.data with out of order col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: sex ldose1 ldose
    New columns: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-27 identical
A-28m predict(am, xdata.frame without col names) trace=1
      numdead
[1,] 1.808490
[2,] 6.595723
A-28 identical
A-28f predict(af, xdata.frame without col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: c.sex.1...sex.1.. c..2...1. c.0.1..0.1.
    New names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-28 identical
A-29m predict(am, xdata.frame with col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-29 identical
A-29f predict(af, xdata.frame with col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-29 identical
A2-29m predict(am, xdata.frame with col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A2-29 identical
A2-29f predict(af, xdata.frame with col names) trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A2-29 identical
A-31m predict(am, xdata.frame, trace=1) data frame with factors and wrong col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex.1. X.2 X0.1
    New names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sexmale (factor), 2=ldose, 3=ldose1
Contents of x are
  sexmale ldose ldose1
1    male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
A-31 identical
      numdead
[1,] 1.059809
A-31f predict(af, xdata.frame, trace=1) data frame with factors and wrong col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex.1. X.2 X0.1
    New names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-31 identical
A-31bm predict(am, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-31 identical
A-31bf predict(af, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-31b identical
A-32m predict(am, xdata.frame, trace=1) # data frame with names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-32 identical
A-32 identical
A-32f predict(af, xdata.frame, trace=1) # data frame with names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-32 identical
A-42am predict(am, newdata=c(1, -2, 0.1), trace=1)) use numeric instead of factor sex
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       1    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-42a identical
A-42af predict(af, newdata=c(1, -2, 0.1), trace=1)) use numeric instead of factor sex
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   1    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   1    -2    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   1    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-42a identical
A-43am predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=1)) multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -2       2            -4         -0.2
predict.earth: returning earth predictions 
     numdead
[1,] 1.80849
[2,] 1.80849
A-43af predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=1)) multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       2    -2    0.1
[2,]       2    -2    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -2       2            -4         -0.2
predict.earth: returning earth predictions 
     numdead
[1,] 1.80849
[2,] 1.80849
A-43a identical
A-44am predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=1)) more multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex, 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-44a identical
A-44fm predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=1)) more multiple rows as a vec
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sexmale, 2=ldose, 3=ldose1
Contents of x are
     sexmale ldose ldose1
[1,]       2    -2    0.1
[2,]       2    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       2            -2         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 6.595723
A-44f identical
A-53m predict(am, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sexmale ldose ldose1
Got error as expected
A-53f predict(af, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sex ldose ldose1
Got error as expected
A-54m predict(am, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex ldose1
    New columns: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-54 identical
A-54f predict(af, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex ldose1
    New columns: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
   sex ldose ldose1
1 male    -2    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-54 identical
A-55m predict(am, xdata.frame, trace=1) data frame without col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex.c.1..7.. c..2...1. c.0.1..0.1.
    New names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sexmale (factor), 2=ldose, 3=ldose1
Contents of x are
  sexmale ldose ldose1
1    male    -2    0.1
2  female    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
[2,]           1    -1       0             0         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
[2,] 3.163972
A-55f predict(af, xdata.frame, trace=1) data frame without col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex.c.1..7.. c..2...1. c.0.1..0.1.
    New names: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
[2,]           1    -1       0             0         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
[2,] 3.163972
A-55 identical
A-56m predict(am, xdata.frame, trace=1) # data frame with col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
[2,]           1    -1       0             0         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
[2,] 3.163972
A-56 identical
A-56f predict(af, xdata.frame, trace=1) # data frame with col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
[2,]           1    -1       0             0         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
[2,] 3.163972
A-56 identical
A-57m predict(am, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sexmale ldose ldose1
Got error as expected
A-57f predict(af, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sex ldose ldose1
Got error as expected
A-57 identical
A-58m predict(am, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex ldose1
    New columns: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
[2,]           1    -1       0             0         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
[2,] 3.163972
A-58 identical
A-58f predict(af, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex ldose1
    New columns: sex ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of x are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
     sex ldose ldose1
1   male    -2    0.1
2 female    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
[2,]           1    -1       0             0         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
[2,] 3.163972
A-58 identical
A-59m predict(am, xdata.frame, trace=1) numeric where factor expected, expect forge on message
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   1    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       1            -1         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 4.879847
A-59f predict(af, xdata.frame, trace=1) numeric where factor expected, expect forge on message
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of x are
  sex ldose ldose1
1   2    -2    0.1
2   1    -1    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 3 matrix: 1=sex (integer), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
  sex ldose ldose1
1   2    -2    0.1
2   1    -1    0.1
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   1    -1    0.1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       2            -4         -0.2
[2,]           1    -1       1            -1         -0.1
predict.earth: returning earth predictions 
      numdead
[1,] 1.808490
[2,] 4.879847
A-59 identical
A-50m data frame without column names, trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sexmale (factor), 2=ldose, 3=ldose1
Contents of x are
  sexmale ldose ldose1
1    male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-34 identical
A-60f data frame without column names, trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sexmale ldose ldose1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=sexmale (factor), 2=ldose, 3=ldose1
Contents of x are
  sexmale ldose ldose1
1    male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-60 identical
A-61f data frame without extra columns, trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 6 matrix: 1=sex (factor), 2=extra1, 3=ldose, 4=extra2, 5=ldose1, 6=extra3 (factor)
Contents of x are
   sex extra1 ldose extra2 ldose1 extra3
1 male     99    -2     99    0.1 female
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=sex (factor), 2=ldose, 3=ldose1
Contents of data after call to model.frame are
   sex ldose ldose1
1 male    -2    0.1
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sexmale, 4=sexmale*ldose, 5=ldose*ldose1
Contents of bx are
     (Intercept) ldose sexmale sexmale*ldose ldose*ldose1
[1,]           1    -2       1            -2         -0.2
predict.earth: returning earth predictions 
      numdead
[1,] 1.059809
A-61 identical
A-68 input matrix to formula interface trace=1, expect error "could not interpret"
x is a 60 by 2 matrix: 1=my.input.matmy.x1, 2=my.input.matmy.x2
y is a 60 by 1 matrix: 1=my.response
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.682 RSq 0.762
Prune method "backward" penalty 2 nprune 4: selected 4 of 4 terms, and 2 of 2 predictors
After backward pass GRSq 0.705 RSq 0.762 
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: my.x1 my.x2
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=my.x1, 2=my.x2
Contents of x are
  my.x1 my.x2
1   2.1   0.6
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 60 by 1 matrix: 1=my.input.mat (data.frame)
First few rows of data after call to model.frame are
  my.input.mat.my.x1 my.input.mat.my.x2
1                2.0                0.5
2                2.0                0.5
3                2.0                0.5
4                2.0                0.5
5                2.0                0.5
6                2.0                0.5
Error : model.frame.default could not interpret the data passed to get.earth.x from model.matrix.earth from predict.earth
        (actual.nrows=60 expected.nrows=1 fitted.nrows=60)
Got error as expected
A-69 above test but with properly named dataframe trace=1
     growth
[1,] 10.211
Tests with not all predictors used in the model so can pass fewer columns
x is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0.00015)
After forward pass GRSq 0.251 RSq 0.924
Prune method "none" penalty 3 nprune 3: selected 3 of 3 terms, and 2 of 3 predictors
After backward pass GRSq 0.745 RSq 0.924 
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
Contents of x are
     ldose dummy ldose1
[1,]    -2     0    0.1
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
Contents of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
predict.earth: returning earth predictions 
       numdead
[1,] 0.4686592
A-72m predict(am, newdata=newdata[two columns], trace=trace)
get.earth.x from model.matrix.earth from predict.earth: x has missing columns, creating a new x with all cols
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
Contents of x are
     ldose dummy ldose1
[1,]    -2   999    0.1
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
Contents of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
predict.earth: returning earth predictions 
       numdead
[1,] 0.4686592
A-72m identical
   ldose dummy ldose1
1     -2     0    0.1
2     -1     0    1.2
3      0     0    0.1
4      1     0    1.2
5      2     0    1.0
6      3     0    0.1
7     -2     0    0.3
8     -1     0    1.4
9      0     0    0.1
10     1     0    1.2
11     2     0    0.1
12     3     0    0.9
get.earth.x from model.matrix.earth from predict.earth: x is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
First few rows of x are
  ldose dummy ldose1
1    -2     0    0.1
2    -1     0    1.2
3     0     0    0.1
4     1     0    1.2
5     2     0    1.0
6     3     0    0.1
predict.earth: bx is a 12 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
First few rows of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
[2,]           1    -1         -1.2
[3,]           1     0          0.0
[4,]           1     1          1.2
[5,]           1     2          2.0
[6,]           1     3          0.3
predict.earth: returning earth predictions 
         numdead
 [1,]  0.4686592
 [2,]  3.4356368
 [3,]  7.3864088
 [4,] 11.3371809
 [5,] 15.1090812
 [6,] 17.7630332
 [7,]  0.2897875
 [8,]  3.3462009
 [9,]  7.3864088
[10,] 11.3371809
[11,] 14.3041584
[12,] 18.8362636
A-73m predict(am, newdata=newdata[two columns], trace=trace)
get.earth.x from model.matrix.earth from predict.earth: x has missing columns, creating a new x with all cols
get.earth.x from model.matrix.earth from predict.earth: x is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
First few rows of x are
     ldose dummy ldose1
[1,]    -2   999    0.1
[2,]    -1   999    1.2
[3,]     0   999    0.1
[4,]     1   999    1.2
[5,]     2   999    1.0
[6,]     3   999    0.1
predict.earth: bx is a 12 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
First few rows of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
[2,]           1    -1         -1.2
[3,]           1     0          0.0
[4,]           1     1          1.2
[5,]           1     2          2.0
[6,]           1     3          0.3
predict.earth: returning earth predictions 
         numdead
 [1,]  0.4686592
 [2,]  3.4356368
 [3,]  7.3864088
 [4,] 11.3371809
 [5,] 15.1090812
 [6,] 17.7630332
 [7,]  0.2897875
 [8,]  3.3462009
 [9,]  7.3864088
[10,] 11.3371809
[11,] 14.3041584
[12,] 18.8362636
A-73m identical
x is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0.00015)
After forward pass GRSq 0.251 RSq 0.924
Prune method "none" penalty 3 nprune 3: selected 3 of 3 terms, and 2 of 3 predictors
After backward pass GRSq 0.745 RSq 0.924 
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
Contents of x are
  ldose dummy ldose1
1    -2     0    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
Contents of data after call to model.frame are
  ldose dummy ldose1
1    -2     0    0.1
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
Contents of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
predict.earth: returning earth predictions 
       numdead
[1,] 0.4686592
A-72f predict(af, newdata=newdata[two columns], trace=trace)
get.earth.x from model.matrix.earth from predict.earth: x has missing columns, creating a new x with all cols
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
Contents of x are
  ldose dummy ldose1
1    -2   999    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
Contents of data after call to model.frame are
  ldose dummy ldose1
1    -2   999    0.1
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
Contents of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
predict.earth: returning earth predictions 
       numdead
[1,] 0.4686592
A-72f identical
   ldose dummy ldose1
1     -2     0    0.1
2     -1     0    1.2
3      0     0    0.1
4      1     0    1.2
5      2     0    1.0
6      3     0    0.1
7     -2     0    0.3
8     -1     0    1.4
9      0     0    0.1
10     1     0    1.2
11     2     0    0.1
12     3     0    0.9
get.earth.x from model.matrix.earth from predict.earth: x is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
First few rows of x are
  ldose dummy ldose1
1    -2     0    0.1
2    -1     0    1.2
3     0     0    0.1
4     1     0    1.2
5     2     0    1.0
6     3     0    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
First few rows of data after call to model.frame are
  ldose dummy ldose1
1    -2     0    0.1
2    -1     0    1.2
3     0     0    0.1
4     1     0    1.2
5     2     0    1.0
6     3     0    0.1
predict.earth: bx is a 12 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
First few rows of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
[2,]           1    -1         -1.2
[3,]           1     0          0.0
[4,]           1     1          1.2
[5,]           1     2          2.0
[6,]           1     3          0.3
predict.earth: returning earth predictions 
         numdead
 [1,]  0.4686592
 [2,]  3.4356368
 [3,]  7.3864088
 [4,] 11.3371809
 [5,] 15.1090812
 [6,] 17.7630332
 [7,]  0.2897875
 [8,]  3.3462009
 [9,]  7.3864088
[10,] 11.3371809
[11,] 14.3041584
[12,] 18.8362636
A-73f predict(af, newdata=newdata[two columns], trace=trace)
get.earth.x from model.matrix.earth from predict.earth: x has missing columns, creating a new x with all cols
get.earth.x from model.matrix.earth from predict.earth: x is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
First few rows of x are
  ldose dummy ldose1
1    -2   999    0.1
2    -1   999    1.2
3     0   999    0.1
4     1   999    1.2
5     2   999    1.0
6     3   999    0.1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 12 by 3 matrix: 1=ldose, 2=dummy, 3=ldose1
First few rows of data after call to model.frame are
  ldose dummy ldose1
1    -2   999    0.1
2    -1   999    1.2
3     0   999    0.1
4     1   999    1.2
5     2   999    1.0
6     3   999    0.1
predict.earth: bx is a 12 by 3 matrix: 1=(Intercept), 2=ldose, 3=ldose*ldose1
First few rows of bx are
     (Intercept) ldose ldose*ldose1
[1,]           1    -2         -0.2
[2,]           1    -1         -1.2
[3,]           1     0          0.0
[4,]           1     1          1.2
[5,]           1     2          2.0
[6,]           1     3          0.3
predict.earth: returning earth predictions 
         numdead
 [1,]  0.4686592
 [2,]  3.4356368
 [3,]  7.3864088
 [4,] 11.3371809
 [5,] 15.1090812
 [6,] 17.7630332
 [7,]  0.2897875
 [8,]  3.3462009
 [9,]  7.3864088
[10,] 11.3371809
[11,] 14.3041584
[12,] 18.8362636
A-73f identical

--- B predict with multiple level factors and a multiple real response, trace=1 ---

x is a 12 by 6 matrix: 1=sex3female, 2=sex3male, 3=ldose, 4=ldose1, 5=fac3lev2, ...
y is a 12 by 2 matrix: 1=numdead, 2=numdead2
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.995
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 6 predictors
After backward pass GRSq -0.446 RSq 0.988 
x is a 12 by 6 matrix: 1=sex3female, 2=sex3male, 3=ldose, 4=ldose1, 5=fac3lev2, ...
y is a 12 by 2 matrix: 1=numdead, 2=numdead2
Forward pass term 1, 2, 4, 6, 8, 10
GRSq -Inf at 9 terms
After forward pass GRSq -in RSq 0.995
Prune method "none" penalty 3 nprune 5: selected 5 of 5 terms, and 3 of 6 predictors
After backward pass GRSq -0.446 RSq 0.988 
check.models.equal not identical: B predict with multiple level factors and a multiple real response [but within numerical tolerances]
20m head(predict(am, trace=1)
predict.earth: returning earth fitted.values 
        numdead   numdead2
[1,]  0.6363636  0.8181818
[2,]  4.3636364  4.1818182
[3,]  9.4090909 10.4545455
[4,] 13.1363636 13.8181818
[5,] 16.8636364 17.1818182
[6,] 20.5909091 20.5454545
B-21f head(predict(af, trace=1)
predict.earth: returning earth fitted.values 
        numdead   numdead2
[1,]  0.6363636  0.8181818
[2,]  4.3636364  4.1818182
[3,]  9.4090909 10.4545455
[4,] 13.1363636 13.8181818
[5,] 16.8636364 17.1818182
[6,] 20.5909091 20.5454545
B-20 identical
B-31m predict(am, xdata.frame, trace=1) data frame with factors and wrong col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.1. X.2 X0.1 fac3.1.
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
B-31 identical
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-31f predict(af, xdata.frame, trace=1) data frame with factors and wrong col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.1. X.2 X0.1 fac3.1.
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-31 identical
B-31bm predict(am, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-31 identical
B-31bf predict(af, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-31b identical
B-32m predict(am, xdata.frame, trace=1) # data frame with names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-32 identical
B-32 identical
B-32f predict(af, xdata.frame, trace=1) # data frame with names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-32 identical
B-53m predict(am, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-53f predict(af, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-54m predict(am, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-54 identical
B-54f predict(af, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-54 identical
B-55m predict(am, xdata.frame, trace=1) data frame without col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.c.1..7.. c..2...1. c.0.1..0.1. fac3.c.1..9..
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -1        0              0                 0
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 2.7809524 3.4000000
B-55m again, but with same x data for both reponses
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.c.1..1.. c..2...2. c.0.1..0.1. fac3.c.1..1..
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
2 male    -2    0.1 lev2
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 0.6363636 0.8181818
B-55f predict(af, xdata.frame, trace=1) data frame without col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.c.1..1.. c..2...2. c.0.1..0.1. fac3.c.1..1..
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
2 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
2 male    -2    0.1 lev2
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 0.6363636 0.8181818
B-55 identical
B2-55bm predict(am, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -1        0              0                 0
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 2.7809524 3.4000000
B2-55 identical
B2-55bf predict(af, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -1        0              0                 0
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 2.7809524 3.4000000
B2-55b identical
B-56m predict(am, xdata.frame, trace=1) # data frame with col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -1        0              0                 0
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 2.7809524 3.4000000
B-56 identical
B-56f predict(af, xdata.frame, trace=1) # data frame with col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -1        0              0                 0
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 2.7809524 3.4000000
B-56 identical
B-57m predict(am, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-57f predict(af, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-57 identical
B-58m predict(am, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -1        0              0                 0
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 2.7809524 3.4000000
B-58 identical
B-58f predict(af, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
[2,]           1    -1        0              0                 0
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 2.7809524 3.4000000
B-58 identical
B-50m data frame without column names, trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-34 identical
B-60f data frame without column names, trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-60 identical
B-60f data frame without extra columns, trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 7 matrix: 1=sex3 (factor), 2=extra1, 3=ldose, 4=extra2, 5=ldose1, 6=fac3 (factor), 7=extra3 (factor)
Contents of x are
  sex3 extra1 ldose extra2 ldose1 fac3 extra3
1 male     99    -2     99    0.1 lev2 female
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 5 matrix: 1=(Intercept), 2=ldose, 3=sex3male, 4=sex3male*ldose, 5=sex3male*fac3lev2
Contents of bx are
     (Intercept) ldose sex3male sex3male*ldose sex3male*fac3lev2
[1,]           1    -2        1             -2                 1
predict.earth: returning earth predictions 
       numdead  numdead2
[1,] 0.6363636 0.8181818
B-60f identical

--- C predict with multiple level factors and a 3 level factor response, trace=1 ---

x is a 12 by 6 matrix: 1=sex3female, 2=sex3male, 3=ldose, 4=ldose1, 5=fac3lev2, ...
y is a 12 by 3 matrix: 1=dead1, 2=dead2, 3=dead3
Forward pass term 1, 2, 4, 6, 8
Reached minimum GRSq -10 at 7 terms (GRSq -26)
After forward pass GRSq -26.032 RSq 0.777
Prune method "none" penalty 3 nprune 4: selected 4 of 4 terms, and 3 of 6 predictors
After backward pass GRSq -1.84 RSq 0.713 
x is a 12 by 6 matrix: 1=sex3female, 2=sex3male, 3=ldose, 4=ldose1, 5=fac3lev2, ...
y is a 12 by 3 matrix: 1=dead1, 2=dead2, 3=dead3
Forward pass term 1, 2, 4, 6, 8
Reached minimum GRSq -10 at 7 terms (GRSq -26)
After forward pass GRSq -26.032 RSq 0.777
Prune method "none" penalty 3 nprune 4: selected 4 of 4 terms, and 3 of 6 predictors
After backward pass GRSq -1.84 RSq 0.713 
check.models.equal not identical: C predict with multiple level factors and a multiple real response [but within numerical tolerances]
20m head(predict(am, trace=1)
predict.earth: returning earth fitted.values 
             dead1         dead2 dead3
[1,] -9.380014e-17  8.750000e-01 0.125
[2,]  2.707054e-16  8.750000e-01 0.125
[3,]  5.000000e-01  1.250000e-01 0.375
[4,]  5.000000e-01  1.250000e-01 0.375
[5,] -2.716119e-20 -2.428613e-17 1.000
[6,] -2.716119e-20 -2.428613e-17 1.000
C-21f head(predict(af, trace=1)
predict.earth: returning earth fitted.values 
             dead1         dead2 dead3
[1,] -9.380014e-17  8.750000e-01 0.125
[2,]  2.707054e-16  8.750000e-01 0.125
[3,]  5.000000e-01  1.250000e-01 0.375
[4,]  5.000000e-01  1.250000e-01 0.375
[5,] -2.716119e-20 -2.428613e-17 1.000
[6,] -2.716119e-20 -2.428613e-17 1.000
C-20 identical
C-31m predict(am, xdata.frame, trace=1) data frame with factors and wrong col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.1. X.2 X0.1 fac3.1.
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
C-31 identical
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-31f predict(af, xdata.frame, trace=1) data frame with factors and wrong col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.1. X.2 X0.1 fac3.1.
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-31 identical
C-31bm predict(am, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-31 identical
C-31bf predict(af, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-31b identical
C-32m predict(am, xdata.frame, trace=1) # data frame with names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-32 identical
C-32 identical
C-32f predict(af, xdata.frame, trace=1) # data frame with names
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-32 identical
C-53m predict(am, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-53f predict(af, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-54m predict(am, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-54 identical
C-54f predict(af, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-54 identical
C-55m predict(am, xdata.frame, trace=1) data frame without col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.c.1..7.. c..2...1. c.0.1..0.1. fac3.c.1..9..
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C-55f predict(af, xdata.frame, trace=1) data frame without col names
get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: sex3.c.1..7.. c..2...1. c.0.1..0.1. fac3.c.1..9..
    New names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C-55 identical
C2-55bm predict(am, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C2-55 identical
C2-55bf predict(af, xdata.frame, trace=1) data frame col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C2-55b identical
C-56m predict(am, xdata.frame, trace=1) # data frame with col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C-56 identical
C-56f predict(af, xdata.frame, trace=1) # data frame with col names
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C-56 identical
C-57m predict(am, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-57f predict(af, xdata.frame, trace=1) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-57 identical
C-58m predict(am, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C-58 identical
C-58f predict(af, xdata.frame, trace=1) # data frame with cols in different order
get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: ldose sex3 ldose1 fac3
    New columns: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
    sex3 ldose ldose1 fac3
1   male    -2    0.1 lev2
2 female    -1    0.1 lev1
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
[2,]           1        0        0          1
predict.earth: returning earth predictions 
            dead1  dead2 dead3
[1,] 2.220446e-16  0.875 0.125
[2,] 1.000000e+00 -0.125 0.125
C-58 identical
C-50m data frame without column names, trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-34 identical
C-60f data frame without column names, trace=1
get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: sex3 ldose ldose1 fac3
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of x are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-60 identical
C-61f data frame without extra columns, trace=1
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 7 matrix: 1=sex3 (factor), 2=extra1, 3=ldose, 4=extra2, 5=ldose1, 6=fac3 (factor), 7=extra3 (factor)
Contents of x are
  sex3 extra1 ldose extra2 ldose1 fac3 extra3
1 male     99    -2     99    0.1 lev2 female
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 4 matrix: 1=sex3 (factor), 2=ldose, 3=ldose1, 4=fac3 (factor)
Contents of data after call to model.frame are
  sex3 ldose ldose1 fac3
1 male    -2    0.1 lev2
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=fac3lev3, 3=fac3lev2, 4=sex3female
Contents of bx are
     (Intercept) fac3lev3 fac3lev2 sex3female
[1,]           1        0        1          0
predict.earth: returning earth predictions 
            dead1 dead2 dead3
[1,] 2.220446e-16 0.875 0.125
C-61 identical
> test.predict.with.factors(trace=0)

--- predict with single level factors and a single response, trace=0 ---

first do a quick test of predict.earth help page example
check.models.equal not identical: predict with single level factors and a single response [but within numerical tolerances]
A-20m head(predict(am, trace=0)
A-20f head(predict(af, trace=0)
A-20 identical
A-21m predict(am, newdata=c(sex[1], -2, 0.1), trace=0))
A-21f predict(af, newdata=c(sex[1], -2, 0.1), trace=0))
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   1    -2    0.1
A-21 identical
A-22m predict(am, newdata=c(1, -2, 0.1), trace=0)) use numeric instead of factor sex
A-22 identical
A-22f predict(af, newdata=c(1, -2, 0.1), trace=0)) use numeric instead of factor sex
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   1    -2    0.1
A-22 identical
A-23m predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=0)) multiple rows as a vec
A-23f predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=0)) multiple rows as a vec
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
A-23 identical
A-24m predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=0)) more multiple rows as a vec
A-24f predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=0)) more multiple rows as a vec
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
A-24 identical
A-25m predict(am, xpredict matrix trace=0
A-25 identical
A-25f predict(af, xpredict matrix trace=0
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
A-25 identical
A-26m predict(am, new.data with col names) trace=0
A-26m identical
A-26f predict(af, new.data with col names) trace=0
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
A-26f identical
A-27m predict(am, new.data with out of order col names) trace=0
A-27 identical
A-27f predict(af, new.data with out of order col names) trace=0
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
A-27 identical
A-28m predict(am, xdata.frame without col names) trace=0
A-28 identical
A-28f predict(af, xdata.frame without col names) trace=0
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
A-28 identical
A-29m predict(am, xdata.frame with col names) trace=0
A-29 identical
A-29f predict(af, xdata.frame with col names) trace=0
A-29 identical
A2-29m predict(am, xdata.frame with col names) trace=0
A2-29 identical
A2-29f predict(af, xdata.frame with col names) trace=0
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
A2-29 identical
A-31m predict(am, xdata.frame, trace=0) data frame with factors and wrong col names
A-31 identical
A-31f predict(af, xdata.frame, trace=0) data frame with factors and wrong col names
A-31 identical
A-31bm predict(am, xdata.frame, trace=0) data frame col names
A-31 identical
A-31bf predict(af, xdata.frame, trace=0) data frame col names
A-31b identical
A-32m predict(am, xdata.frame, trace=0) # data frame with names
A-32 identical
A-32 identical
A-32f predict(af, xdata.frame, trace=0) # data frame with names
A-32 identical
A-42am predict(am, newdata=c(1, -2, 0.1), trace=0)) use numeric instead of factor sex
A-42a identical
A-42af predict(af, newdata=c(1, -2, 0.1), trace=0)) use numeric instead of factor sex
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   1    -2    0.1
A-42a identical
A-43am predict(af, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=0)) multiple rows as a vec
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -2    0.1
A-43af predict(am, newdata=c(sex[1], sex[1], -2, -2, 0.1, 0.1), trace=0)) multiple rows as a vec
A-43a identical
A-44am predict(af, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=0)) more multiple rows as a vec
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   2    -1    0.1
A-44a identical
A-44fm predict(am, newdata=c(sex[1], sex[1], -2, -1, 0.1, 0.1), trace=0)) more multiple rows as a vec
A-44f identical
A-53m predict(am, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sexmale ldose ldose1
Got error as expected
A-53f predict(af, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sex ldose ldose1
Got error as expected
A-54m predict(am, xdata.frame, trace=0) # data frame with cols in different order
A-54 identical
A-54f predict(af, xdata.frame, trace=0) # data frame with cols in different order
A-54 identical
A-55m predict(am, xdata.frame, trace=0) data frame without col names
A-55f predict(af, xdata.frame, trace=0) data frame without col names
A-55 identical
A-56m predict(am, xdata.frame, trace=0) # data frame with col names
A-56 identical
A-56f predict(af, xdata.frame, trace=0) # data frame with col names
A-56 identical
A-57m predict(am, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sexmale ldose ldose1
Got error as expected
A-57f predict(af, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 3 to match: sex ldose ldose1
Got error as expected
A-57 identical
A-58m predict(am, xdata.frame, trace=0) # data frame with cols in different order
A-58 identical
A-58f predict(af, xdata.frame, trace=0) # data frame with cols in different order
A-58 identical
A-59m predict(am, xdata.frame, trace=0) numeric where factor expected, expect forge on message
A-59f predict(af, xdata.frame, trace=0) numeric where factor expected, expect forge on message
Error : variable 'sex' was fitted with type "factor" but type "numeric" was supplied
Forging on regardless, first few rows of x are
  sex ldose ldose1
1   2    -2    0.1
2   1    -1    0.1
A-59 identical
A-50m data frame without column names, trace=0
A-34 identical
A-60f data frame without column names, trace=0
A-60 identical
A-61f data frame without extra columns, trace=0
A-61 identical
A-68 input matrix to formula interface trace=0, expect error "could not interpret"
Error : model.frame.default could not interpret the data passed to get.earth.x from model.matrix.earth from predict.earth
        (actual.nrows=60 expected.nrows=1 fitted.nrows=60)
Got error as expected
A-69 above test but with properly named dataframe trace=0
Tests with not all predictors used in the model so can pass fewer columns
A-72m predict(am, newdata=newdata[two columns], trace=trace)
A-72m identical
   ldose dummy ldose1
1     -2     0    0.1
2     -1     0    1.2
3      0     0    0.1
4      1     0    1.2
5      2     0    1.0
6      3     0    0.1
7     -2     0    0.3
8     -1     0    1.4
9      0     0    0.1
10     1     0    1.2
11     2     0    0.1
12     3     0    0.9
A-73m predict(am, newdata=newdata[two columns], trace=trace)
A-73m identical
A-72f predict(af, newdata=newdata[two columns], trace=trace)
A-72f identical
   ldose dummy ldose1
1     -2     0    0.1
2     -1     0    1.2
3      0     0    0.1
4      1     0    1.2
5      2     0    1.0
6      3     0    0.1
7     -2     0    0.3
8     -1     0    1.4
9      0     0    0.1
10     1     0    1.2
11     2     0    0.1
12     3     0    0.9
A-73f predict(af, newdata=newdata[two columns], trace=trace)
A-73f identical

--- B predict with multiple level factors and a multiple real response, trace=0 ---

check.models.equal not identical: B predict with multiple level factors and a multiple real response [but within numerical tolerances]
20m head(predict(am, trace=0)
B-21f head(predict(af, trace=0)
B-20 identical
B-31m predict(am, xdata.frame, trace=0) data frame with factors and wrong col names
B-31 identical
B-31f predict(af, xdata.frame, trace=0) data frame with factors and wrong col names
B-31 identical
B-31bm predict(am, xdata.frame, trace=0) data frame col names
B-31 identical
B-31bf predict(af, xdata.frame, trace=0) data frame col names
B-31b identical
B-32m predict(am, xdata.frame, trace=0) # data frame with names
B-32 identical
B-32 identical
B-32f predict(af, xdata.frame, trace=0) # data frame with names
B-32 identical
B-53m predict(am, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-53f predict(af, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-54m predict(am, xdata.frame, trace=0) # data frame with cols in different order
B-54 identical
B-54f predict(af, xdata.frame, trace=0) # data frame with cols in different order
B-54 identical
B-55m predict(am, xdata.frame, trace=0) data frame without col names
B-55m again, but with same x data for both reponses
       numdead  numdead2
[1,] 0.6363636 0.8181818
[2,] 0.6363636 0.8181818
B-55f predict(af, xdata.frame, trace=0) data frame without col names
B-55 identical
B2-55bm predict(am, xdata.frame, trace=0) data frame col names
B2-55 identical
B2-55bf predict(af, xdata.frame, trace=0) data frame col names
B2-55b identical
B-56m predict(am, xdata.frame, trace=0) # data frame with col names
B-56 identical
B-56f predict(af, xdata.frame, trace=0) # data frame with col names
B-56 identical
B-57m predict(am, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-57f predict(af, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
B-57 identical
B-58m predict(am, xdata.frame, trace=0) # data frame with cols in different order
B-58 identical
B-58f predict(af, xdata.frame, trace=0) # data frame with cols in different order
B-58 identical
B-50m data frame without column names, trace=0
B-34 identical
B-60f data frame without column names, trace=0
B-60 identical
B-60f data frame without extra columns, trace=0
B-60f identical

--- C predict with multiple level factors and a 3 level factor response, trace=0 ---

check.models.equal not identical: C predict with multiple level factors and a multiple real response [but within numerical tolerances]
20m head(predict(am, trace=0)
C-21f head(predict(af, trace=0)
C-20 identical
C-31m predict(am, xdata.frame, trace=0) data frame with factors and wrong col names
C-31 identical
C-31f predict(af, xdata.frame, trace=0) data frame with factors and wrong col names
C-31 identical
C-31bm predict(am, xdata.frame, trace=0) data frame col names
C-31 identical
C-31bf predict(af, xdata.frame, trace=0) data frame col names
C-31b identical
C-32m predict(am, xdata.frame, trace=0) # data frame with names
C-32 identical
C-32 identical
C-32f predict(af, xdata.frame, trace=0) # data frame with names
C-32 identical
C-53m predict(am, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-53f predict(af, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-54m predict(am, xdata.frame, trace=0) # data frame with cols in different order
C-54 identical
C-54f predict(af, xdata.frame, trace=0) # data frame with cols in different order
C-54 identical
C-55m predict(am, xdata.frame, trace=0) data frame without col names
C-55f predict(af, xdata.frame, trace=0) data frame without col names
C-55 identical
C2-55bm predict(am, xdata.frame, trace=0) data frame col names
C2-55 identical
C2-55bf predict(af, xdata.frame, trace=0) data frame col names
C2-55b identical
C-56m predict(am, xdata.frame, trace=0) # data frame with col names
C-56 identical
C-56f predict(af, xdata.frame, trace=0) # data frame with col names
C-56 identical
C-57m predict(am, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-57f predict(af, xdata.frame, trace=0) data frame with not enough columns, expect error message
Error : get.earth.x from model.matrix.earth from predict.earth: x has 2 columns, expected 4 to match: sex3 ldose ldose1 fac3
Got error as expected
C-57 identical
C-58m predict(am, xdata.frame, trace=0) # data frame with cols in different order
C-58 identical
C-58f predict(af, xdata.frame, trace=0) # data frame with cols in different order
C-58 identical
C-50m data frame without column names, trace=0
C-34 identical
C-60f data frame without column names, trace=0
C-60 identical
C-61f data frame without extra columns, trace=0
C-61 identical
> 
> cat("---test glm.predict---\n")
---test glm.predict---
> 
> ldose  <- rep(0:5, 2) - 2
> sex <- factor(rep(c("male", "female"), times=c(6,6)))
> numdead <- c(1,4,9,13,18,20,0,2,6,10,12,16)
> SF <- cbind(numdead, numalive=20 - numdead)
> 
> cat("c1a: single response glm model with a binomial pair of y columns, fitted values, keepxy=0\n")
c1a: single response glm model with a binomial pair of y columns, fitted values, keepxy=0
> c1a <-  earth(SF ~ sex + ldose, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=0)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
> c1ae <-  earth(numdead ~ sex + ldose, trace=1, pmethod="none", degree=1, keepxy=0)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
> c1ag <- glm(SF ~ sex + ldose, family="binomial") # use this as a reference
> 
> c1a.predict <- predict(c1a, trace=1)
predict.earth: returning glm fitted.values
> c1ag.predict <- predict(c1ag, trace=1)
> check.fuzzy.equal(c1a.predict, c1ag.predict, fuzz=1e-10, msg="c1a fitted values, type=default link, keepxy=0", verbose=TRUE)
c1a fitted values, type=default link, keepxy=0 OK
> c1a.predict <- predict(c1a, type="link", trace=1)
predict.earth: returning glm fitted.values
> c1ag.predict <- predict(c1ag, type="li", trace=1)
> check.fuzzy.equal(c1a.predict, c1ag.predict, fuzz=1e-10, msg="c1a fitted values, type=link, keepxy=0", verbose=TRUE)
c1a fitted values, type=link, keepxy=0 OK
> c1a.predict <- predict(c1a, type="response", trace=1)
predict.earth: returning glm fitted.values
> c1ag.predict <- predict(c1ag, type="resp", trace=1)
> check.fuzzy.equal(c1a.predict, c1ag.predict, fuzz=1e-10, msg="c1a fitted values, type=response, keepxy=0", verbose=TRUE)
c1a fitted values, type=response, keepxy=0 OK
> c1a.predict <- predict(c1a, type="e", trace=1)
predict.earth: returning earth (not glm) fitted.values 
> c1ae.predict <- predict(c1ae, trace=1)
predict.earth: returning earth fitted.values 
> check.fuzzy.equal(c1a.predict, c1ae.predict, fuzz=1e-10, msg="c1a fitted values, type=earth, keepxy=0", verbose=TRUE)
c1a fitted values, type=earth, keepxy=0 OK
> 
> cat("c1b: single response glm model with a binomial pair of y columns\n")
c1b: single response glm model with a binomial pair of y columns
> c1b <-  earth(SF ~ sex + ldose, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
Warning: No "data" argument to earth so "keepxy" is limited

> c1be <-  earth(numdead ~ sex + ldose, trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
Warning: No "data" argument to earth so "keepxy" is limited

> c1bg <- glm(SF ~ sex + ldose, family="binomial") # use this as a reference
> 
> newdata <- data.frame(sex=sex[1], ldose=2)
> c1b.predict <- predict(c1b, newdata, trace=1)
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
   sex ldose
1 male     2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
   sex ldose
1 male     2
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1     2       1
predict.earth: returning glm link predictions
> stopifnot(dim(c1b.predict) == c(1,1))
> check.fuzzy.equal(c1b.predict, predict(c1bg, newdata), fuzz=1e-10, msg="c1b", verbose=TRUE)
c1b OK
> 
> c1b.link.predict <- predict(c1b, newdata, type="link", trace=1) # should be same as above because default is link
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
   sex ldose
1 male     2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
   sex ldose
1 male     2
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1     2       1
predict.earth: returning glm link predictions
> check.fuzzy.equal(c1b.link.predict, c1b.predict, fuzz=1e-10, msg="c1b link", verbose=TRUE)
c1b link OK
> 
> c1b.predict <- predict(c1b, newdata, type="r")
> stopifnot(dim(c1b.predict) == c(1,1))
> check.fuzzy.equal(c1b.predict, predict(c1bg, newdata, type="response"), fuzz=1e-10, msg="c1b type=response", verbose=TRUE)
c1b type=response OK
> 
> c1b.predict <- predict(c1b, newdata, type="earth")
> stopifnot(dim(c1b.predict) == c(1,1))
> check.fuzzy.equal(c1b.predict, predict(c1be, newdata), fuzz=1e-10, msg="c1b type=earth", verbose=TRUE)
c1b type=earth OK
> 
> newdata <- data.frame(sex=sex[c(1,3,7,9)], ldose=ldose[c(1,3,7,9)])
> c1b.predict <- predict(c1b, newdata, trace=1)
get.earth.x from model.matrix.earth from predict.earth: x is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
predict.earth: bx is a 4 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       1
[2,]           1     0       1
[3,]           1    -2       0
[4,]           1     0       0
predict.earth: returning glm link predictions
> stopifnot(dim(c1b.predict) == c(4,1))
> check.fuzzy.equal(c1b.predict, predict(c1bg, newdata), fuzz=1e-10, msg="c1b multiple rows", verbose=TRUE)
c1b multiple rows OK
> 
> c1b.predict <- predict(c1b, newdata, type="response", trace=1)
get.earth.x from model.matrix.earth from predict.earth: x is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
predict.earth: bx is a 4 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       1
[2,]           1     0       1
[3,]           1    -2       0
[4,]           1     0       0
predict.earth: returning glm response predictions
> stopifnot(dim(c1b.predict) == c(4,1))
> check.fuzzy.equal(c1b.predict, predict(c1bg, newdata, type="response"), fuzz=1e-10, msg="c1b multiple rows type=response", verbose=TRUE)
c1b multiple rows type=response OK
> 
> c1b.predict <- predict(c1b, newdata, type="terms", trace=0)
Warning: predict.earth: returning the earth (not glm) terms
> c1be.predict <- predict(c1be, newdata, type="terms")
> c1bg.predict <- predict(c1bg, newdata, type="terms")
> check.fuzzy.equal(c1b.predict, c1be.predict, fuzz=1e-10, msg="c1b multiple rows type=terms", verbose=TRUE)
c1b multiple rows type=terms OK
> 
> cat("c2: double response glm model with two y binomial pairs\n")
c2: double response glm model with two y binomial pairs
> SF2 <- cbind(numdead, numalive=20 - numdead, numdead2=numdead, numalive2=20 - numdead)
> c2 <-  earth(SF2 ~ sex + ldose, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
Warning: No "data" argument to earth so "keepxy" is limited

> c2e <-  earth(data.frame(sex, ldose), data.frame(numdead,numdead), trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 2 matrix: 1=numdead, 2=numdead.1
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
> c2g <- glm(SF ~ sex + ldose, family="binomial") # use this as a reference
> 
> newdata <- data.frame(sex=sex[1], ldose=2)
> c2.predict <- predict(c2, newdata, trace=1)
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
   sex ldose
1 male     2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
   sex ldose
1 male     2
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1     2       1
predict.earth: returning glm link predictions
> stopifnot(dim(c2.predict) == c(1,2))
> check.fuzzy.equal(c2.predict[,1], predict(c2g, newdata), fuzz=1e-10, msg="c2", verbose=TRUE)
c2 OK
> 
> c2.link.predict <- predict(c2, newdata, type="link", trace=1) # should be same as above because default is link
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
   sex ldose
1 male     2
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
   sex ldose
1 male     2
predict.earth: bx is a 1 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1     2       1
predict.earth: returning glm link predictions
> check.fuzzy.equal(c2.link.predict, c2.predict, fuzz=1e-10, msg="c2 link", verbose=TRUE)
c2 link OK
> 
> c2.predict <- predict(c2, newdata, type="response")
> stopifnot(dim(c2.predict) == c(1,2))
> check.fuzzy.equal(c2.predict[,1], predict(c2g, newdata, type="response"), fuzz=1e-10, msg="c2 multiple rows type=response", verbose=TRUE)
c2 multiple rows type=response OK
> 
> newdata <- data.frame(sex=sex[c(1,3,7,9)], ldose=ldose[c(1,3,7,9)])
> c2.predict <- predict(c2, newdata)
> stopifnot(dim(c2.predict) == c(4,2))
> check.fuzzy.equal(c2.predict[,1], predict(c2g, newdata), fuzz=1e-10, msg="c2 column1", verbose=TRUE)
c2 column1 OK
> check.fuzzy.equal(c2.predict[,2], predict(c2g, newdata), fuzz=1e-10, msg="c2 column2", verbose=TRUE)
c2 column2 OK
> 
> c2.predict <- predict(c2, newdata, type="response")
> stopifnot(dim(c2.predict) == c(4,2))
> check.fuzzy.equal(c2.predict[,1], predict(c2g, newdata, type="response"), fuzz=1e-10, msg="c2 column1 multiple rows type=response", verbose=TRUE)
c2 column1 multiple rows type=response OK
> check.fuzzy.equal(c2.predict[,2], predict(c2g, newdata, type="response"), fuzz=1e-10, msg="c2 column2 multiple rows type=response", verbose=TRUE)
c2 column2 multiple rows type=response OK
> 
> c2.predict <- predict(c2, newdata, type="earth", trace=1)
get.earth.x from model.matrix.earth from predict.earth: x is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of data after call to model.frame are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
predict.earth: bx is a 4 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       1
[2,]           1     0       1
[3,]           1    -2       0
[4,]           1     0       0
predict.earth: returning earth (not glm) predictions 
> stopifnot(dim(c2.predict) == c(4,2))
> check.fuzzy.equal(c2.predict[,1], predict(c2e, newdata, trace=1), fuzz=1e-10, msg="c2 column1 multiple rows type=earth", verbose=TRUE)
get.earth.x from model.matrix.earth from predict.earth: x is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
predict.earth: bx is a 4 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       1
[2,]           1     0       1
[3,]           1    -2       0
[4,]           1     0       0
predict.earth: returning earth predictions 
c2 column1 multiple rows type=earth OK
> check.fuzzy.equal(c2.predict[,2], predict(c2e, newdata, trace=1), fuzz=1e-10, msg="c2 column2 multiple rows type=earth", verbose=TRUE)
get.earth.x from model.matrix.earth from predict.earth: x is a 4 by 2 matrix: 1=sex (factor), 2=ldose
Contents of x are
     sex ldose
1   male    -2
2   male     0
3 female    -2
4 female     0
predict.earth: bx is a 4 by 3 matrix: 1=(Intercept), 2=ldose, 3=sexmale
Contents of bx are
     (Intercept) ldose sexmale
[1,]           1    -2       1
[2,]           1     0       1
[3,]           1    -2       0
[4,]           1     0       0
predict.earth: returning earth predictions 
c2 column2 multiple rows type=earth OK
> 
> cat("c3a: single response glm model with a boolean response, fitted values, keepxy=0\n")
c3a: single response glm model with a boolean response, fitted values, keepxy=0
> 
> mybool <- rep(c(FALSE, TRUE), times=c(6,6))
> data1 <- data.frame(mybool, sex, ldose)
> c3a <-  earth(mybool ~ sex + ldose, data=data1, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=0)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 1 matrix: 1=mybool
Forward pass term 1, 2
Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Prune method "none" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
GLM mybool: null.deviance 16.63553 (11 dof)   deviance 5.144045e-10 (10 dof)   iters 23
> c3ag <- glm(mybool ~ sex + ldose, family="binomial") # use this as a reference
> c3ae <- earth(mybool ~ sex + ldose, data=data1, pmethod="none", degree=1, keepxy=1)
> 
> c3a.predict <- predict(c3a, trace=1)
predict.earth: returning glm fitted.values
> c3ag.predict <- predict(c3ag, trace=1)
> # TODO why does fuzz have to be big here?
> check.fuzzy.equal(c3a.predict, c3ag.predict, fuzz=1e-7, msg="c3a fitted values, type=default link, keepxy=0", verbose=TRUE)
c3a fitted values, type=default link, keepxy=0 OK
> c3a.predict <- predict(c3a, type="link", trace=1)
predict.earth: returning glm fitted.values
> c3ag.predict <- predict(c3ag, type="link", trace=1)
> check.fuzzy.equal(c3a.predict, c3ag.predict, fuzz=1e-7, msg="c3a fitted values, type=link, keepxy=0", verbose=TRUE)
c3a fitted values, type=link, keepxy=0 OK
> c3a.predict <- predict(c3a, type="response", trace=1)
predict.earth: returning glm fitted.values
> c3ag.predict <- predict(c3ag, type="response", trace=1)
> check.fuzzy.equal(c3a.predict, c3ag.predict, fuzz=1e-10, msg="c3a fitted values, type=response, keepxy=0", verbose=TRUE)
c3a fitted values, type=response, keepxy=0 OK
> c3a.predict <- predict(c3a, type="earth", trace=1)
predict.earth: returning earth (not glm) fitted.values 
> c3ae.predict <- predict(c3ae, trace=1)
predict.earth: returning earth fitted.values 
> check.fuzzy.equal(c3a.predict, c3ae.predict, fuzz=1e-10, msg="c3a fitted values, type=earth, keepxy=0", verbose=TRUE)
c3a fitted values, type=earth, keepxy=0 OK
> 
> c3a.response.predict <- predict(c3a, type="response")
> c3a.class.predict <- predict(c3a,type="class")
> stopifnot(c3a.class.predict == (c3a.response.predict > .5))
> 
> cat("c3b: single response glm model with a boolean response, fitted values, keepxy=1\n")
c3b: single response glm model with a boolean response, fitted values, keepxy=1
> 
> c3b <-  earth(mybool ~ sex + ldose, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 1 matrix: 1=mybool
Forward pass term 1, 2
Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Prune method "none" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
GLM mybool: null.deviance 16.63553 (11 dof)   deviance 5.144045e-10 (10 dof)   iters 23
Warning: No "data" argument to earth so "keepxy" is limited

> c3bg <- glm(mybool ~ sex + ldose, family="binomial") # use this as a reference
> c3be <- earth(mybool ~ sex + ldose, pmethod="none", degree=1, keepxy=0)
> 
> c3b.predict <- predict(c3b, trace=1) # fitted values
predict.earth: returning glm fitted.values
> c3bg.predict <- predict(c3bg, trace=1)
> check.fuzzy.equal(c3b.predict, c3bg.predict, fuzz=1e-7, msg="c3b fitted values, type=default link, keepxy=0", verbose=TRUE)
c3b fitted values, type=default link, keepxy=0 OK
> c3b.predict <- predict(c3b, type="link", trace=1)
predict.earth: returning glm fitted.values
> c3bg.predict <- predict(c3bg, type="link", trace=1)
> check.fuzzy.equal(c3b.predict, c3bg.predict, fuzz=1e-7, msg="c3b fitted values, type=link, keepxy=0", verbose=TRUE)
c3b fitted values, type=link, keepxy=0 OK
> c3b.predict <- predict(c3b, type="response", trace=1)
predict.earth: returning glm fitted.values
> c3bg.predict <- predict(c3bg, type="response", trace=1)
> check.fuzzy.equal(c3b.predict, c3bg.predict, fuzz=1e-10, msg="c3b fitted values, type=response, keepxy=0", verbose=TRUE)
c3b fitted values, type=response, keepxy=0 OK
> c3b.predict <- predict(c3b, type="earth", trace=1)
predict.earth: returning earth (not glm) fitted.values 
> c3be.predict <- predict(c3be, trace=1)
predict.earth: returning earth fitted.values 
> check.fuzzy.equal(c3b.predict, c3be.predict, fuzz=1e-10, msg="c3b fitted values, type=earth, keepxy=0", verbose=TRUE)
c3b fitted values, type=earth, keepxy=0 OK
> 
> c3b.response.predict <- predict(c3b, type="response")
> c3b.class.predict <- predict(c3b,type="class")
> stopifnot(c3b.class.predict == (c3b.response.predict > .5))
> 
> cat("c3c: single response glm model with a boolean response\n")
c3c: single response glm model with a boolean response
> 
> c3c <-  earth(mybool ~ sex + ldose, data=data1, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=0)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 1 matrix: 1=mybool
Forward pass term 1, 2
Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Prune method "none" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
GLM mybool: null.deviance 16.63553 (11 dof)   deviance 5.144045e-10 (10 dof)   iters 23
> c3cg <- glm(mybool ~ sex + ldose, data=data1, family="binomial") # use this as a reference
> c3ce <- earth(mybool ~ sex + ldose, data=data1, pmethod="none", degree=1, keepxy=0)
> 
> newdata <- data.frame(sex=sex[1], ldose=2)
> c3c.predict <- predict(c3c, newdata)
> stopifnot(dim(c3c.predict) == c(1,1))
> check.fuzzy.equal(c3c.predict, predict(c3cg, newdata), fuzz=1e-10, msg="c3c", verbose=TRUE)
c3c OK
> 
> c3c.predict <- predict(c3c, newdata, type="response")
> stopifnot(dim(c3c.predict) == c(1,1))
> check.fuzzy.equal(c3c.predict, predict(c3cg, newdata, type="response"), fuzz=1e-10, msg="c3c type=response", verbose=TRUE)
c3c type=response OK
> 
> newdata <- data.frame(sex=sex[c(1,3,7,9)], ldose=ldose[c(1,3,7,9)])
> c3c.predict <- predict(c3c, newdata)
> stopifnot(dim(c3c.predict) == c(4,1))
> # TODO why does the fuzz have to be bigger on this?
> check.fuzzy.equal(c3c.predict, predict(c3cg, newdata), fuzz=1e-7, msg="c3c multiple rows", verbose=TRUE)
c3c multiple rows OK
> 
> c3c.predict <- predict(c3c, newdata, type="response")
> stopifnot(dim(c3c.predict) == c(4,1))
> check.fuzzy.equal(c3c.predict, predict(c3cg, newdata, type="response"), fuzz=1e-10, msg="c3c multiple rows type=response", verbose=TRUE)
c3c multiple rows type=response OK
> 
> c3c.response.predict <- predict(c3c, type="response")
> c3c.class.predict <- predict(c3c,type="class")
> stopifnot(c3c.class.predict == (c3c.response.predict > .5))
> 
> cat("c3d: single response glm model with a two level factor response\n")
c3d: single response glm model with a two level factor response
> cat("Expect \"did not converge warnings\", it doesn't matter for our purposes here\n")
Expect "did not converge warnings", it doesn't matter for our purposes here
> myfac <- gl(2, 3, length=12, labels = c("Control", "Treat"))
> c3d <-  earth(myfac ~ ldose + sex, data=data1, glm=list(family="binomial"), trace=0, pmethod="none", degree=1)
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
> c3d.class.predict <- predict(c3d,type="cl") # we also test here that the type can be abbreviated
> stopifnot(c3d.class.predict == myfac)
> 
> cat("c4: multiple response glm model with a factor response\n")
c4: multiple response glm model with a factor response
> fac3 <- factor(rep(c("A", "B", "C"), times=c(4,3,5)))
> cat("Expect \"did not converge warnings\", it doesn't matter for our purposes here\n")
Expect "did not converge warnings", it doesn't matter for our purposes here
> c4 <-  earth(fac3 ~ sex + ldose, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 3 matrix: 1=A, 2=B, 3=C
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq -1.245 RSq 0.536
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq -0.145 RSq 0.536 
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM A: null.deviance 15.27634 (11 dof)   deviance 9.406236e-10 (9 dof)   iters 25 did not converge
GLM B: null.deviance 13.49604 (11 dof)   deviance 12.68403 (9 dof)   iters 4
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM C: null.deviance 16.30064 (11 dof)   deviance 1.037213e-09 (9 dof)   iters 25 did not converge
Warning: No "data" argument to earth so "keepxy" is limited

> c4g <- glm(fac3 ~ sex + ldose, family="binomial") # use this as a reference
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
> 
> newdata <- data.frame(sex=sex[1], ldose=2)
> c4.predict <- predict(c4, newdata)
> stopifnot(dim(c4.predict) == c(1,3))
> # minus needed on predict because of different handling of factors
> check.fuzzy.equal(c4.predict[1,1], -predict(c4g, newdata), fuzz=1e-8, msg="c4", verbose=TRUE)
c4 OK
> 
> newdata <- data.frame(sex=sex[c(1,3,7,9)], ldose=ldose[c(1,3,7,9)])
> c4.predict <- predict(c4, newdata)
> stopifnot(dim(c4.predict) == c(4,3))
> check.fuzzy.equal(c4.predict[,1], -predict(c4g, newdata), fuzz=1e-8, msg="c4 multiple rows", verbose=TRUE)
c4 multiple rows OK
> 
> c4.predict <- predict(c4, newdata, type="response")
> stopifnot(dim(c4.predict) == c(4,3))
> check.fuzzy.equal(1-c4.predict[,1], predict(c4g, newdata, type="response"), fuzz=1e-10, msg="c4 multiple rows type=response", verbose=TRUE)
c4 multiple rows type=response OK
> 
> cat("c5: multiple response glm model with two multi level factor responses\n")
c5: multiple response glm model with two multi level factor responses
> 
> fac3 <- factor(rep(c("A", "B", "C"), times=c(4,3,5)))
> fac4 <- factor(rep(c("P", "Q", "R", "S"), times=c(3,3,3,3)))
> big.dataframe <- data.frame(fac3, fac4)
> c5 <-  earth(data.frame(sex, ldose), big.dataframe, trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 7 matrix: 1=fac3A, 2=fac3B, 3=fac3C, 4=fac4P, 5=fac4Q, ...
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq -1.104 RSq 0.565
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq -0.0737 RSq 0.565 
> stopifnot(colnames(c5$coef) == c("fac3A", "fac3B", "fac3C",
+                                  "fac4P", "fac4Q", "fac4R", "fac4S"))
> stopifnot(is.null(c5$glm.bpairs))
> 
> cat("c6: multiple response earth model with mixed responses\n")
c6: multiple response earth model with mixed responses
> 
> big.dataframe2 <- data.frame(SF, fac3, fac4, SF+1, sex, fac4, SF+3)
> c6 <-  earth(data.frame(sex, ldose), big.dataframe2, trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 18 matrix: 1=numdead, 2=numalive, 3=fac3A, 4=fac3B, 5=fac3C, ...
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.890 RSq 0.977
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.944 RSq 0.977 
> stopifnot(colnames(c6$coef) == c("numdead", "numalive", "fac3A", "fac3B", "fac3C",
+                                   "fac4P", "fac4Q", "fac4R", "fac4S", "numdead.1", "numalive.1",
+                                   "sex", "fac4.1P", "fac4.1Q", "fac4.1R", "fac4.1S",
+                                   "numdead.2", "numalive.2"))
> stopifnot(is.null(c6$glm.bpairs))
> 
> cat("c7: multiple response glm model with mixed responses\n")
c7: multiple response glm model with mixed responses
> cat("Expect \"did not converge warnings\", it doesn't matter for our purposes here\n")
Expect "did not converge warnings", it doesn't matter for our purposes here
> c7 <-  earth(data.frame(sex, ldose), big.dataframe2, glm=list(family="binomial"), trace=1, pmethod="none", degree=1, keepxy=1)
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 18 matrix: 1=numdead (paired with numalive), 2=fac3A, 3=fac3B, 4=fac3C, ...
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.874 RSq 0.974
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.936 RSq 0.974 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac3A: null.deviance 15.27634 (11 dof)   deviance 9.406236e-10 (9 dof)   iters 25 did not converge
GLM fac3B: null.deviance 13.49604 (11 dof)   deviance 12.68403 (9 dof)   iters 4
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac3C: null.deviance 16.30064 (11 dof)   deviance 1.037213e-09 (9 dof)   iters 25 did not converge
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4P: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4Q: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4R: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4S: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
GLM numdead.1: null.deviance 105.9173 (11 dof)   deviance 2.709378 (9 dof)   iters 4
GLM sex: null.deviance 16.63553 (11 dof)   deviance 5.144045e-10 (9 dof)   iters 23
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4.1P: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4.1Q: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4.1R: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM fac4.1S: null.deviance 13.49604 (11 dof)   deviance 9.190018e-10 (9 dof)   iters 25 did not converge
GLM numdead.2: null.deviance 84.92686 (11 dof)   deviance 1.525354 (9 dof)   iters 4
> print(summary(c7))
Call: earth(x=data.frame(sex, ldose), y=big.dataframe2, keepxy=1, 
      trace=1, glm=list(family="binomial"), pmethod="none", 
      degree=1)

GLM coefficients
              numdead      fac3A      fac3B      fac3C      fac4P      fac4Q
(Intercept) -1.344727 -113.03612 -1.7885429   66.31010 -113.12505 -157.68291
sexmale      1.100743  179.74852  0.9447634 -223.30835  135.40398  135.40398
ldose        1.064214  -44.50778  0.2438926   44.32151  -44.55786   44.55786
                 fac4R      fac4S  numdead.1       sex    fac4.1P    fac4.1Q
(Intercept)   22.27893  -22.27893 -1.0901672 -24.56607 -113.12505 -157.68291
sexmale     -135.40398 -135.40398  0.8798704  49.13214  135.40398  135.40398
ldose        -44.55786   44.55786  0.8810902   0.00000  -44.55786   44.55786
               fac4.1R    fac4.1S  numdead.2
(Intercept)   22.27893  -22.27893 -0.8122353
sexmale     -135.40398 -135.40398  0.6440487
ldose        -44.55786   44.55786  0.6736460

Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
                GCV       RSS        GRSq        RSq
numdead   2.3760933  9.702381  0.95248599 0.98075879
fac3A     0.2145773  0.876190  0.18862974 0.67142857
fac3B     0.5148688  2.102381 -1.30737501 0.06560847
fac3C     0.1603499  0.654762  0.44564765 0.77551020
fac4P     0.2256560  0.921429 -0.01127308 0.59047619
fac4Q     0.2256560  0.921429 -0.01127308 0.59047619
fac4R     0.2256560  0.921429 -0.01127308 0.59047619
fac4S     0.2256560  0.921429 -0.01127308 0.59047619
numdead.1 2.3760933  9.702381  0.95248599 0.98075879
sex       0.0000000  0.000000  1.00000000 1.00000000
fac4.1P   0.2256560  0.921429 -0.01127308 0.59047619
fac4.1Q   0.2256560  0.921429 -0.01127308 0.59047619
fac4.1R   0.2256560  0.921429 -0.01127308 0.59047619
fac4.1S   0.2256560  0.921429 -0.01127308 0.59047619
numdead.2 2.3760933  9.702381  0.95248599 0.98075879
All       9.8233236 40.111905  0.93574668 0.97398006

GLM (family binomial, link logit)
          null.deviance df  deviance df iters converged
numdead       124.87559 11  6.757064  9     4         1
fac3A          15.27634 11  0.000000  9    25         0
fac3B          13.49604 11 12.684034  9     4         1
fac3C          16.30064 11  0.000000  9    25         0
fac4P          13.49604 11  0.000000  9    25         0
fac4Q          13.49604 11  0.000000  9    25         0
fac4R          13.49604 11  0.000000  9    25         0
fac4S          13.49604 11  0.000000  9    25         0
numdead.1     105.91731 11  2.709378  9     4         1
sex            16.63553 11  0.000000  9    23         1
fac4.1P        13.49604 11  0.000000  9    25         0
fac4.1Q        13.49604 11  0.000000  9    25         0
fac4.1R        13.49604 11  0.000000  9    25         0
fac4.1S        13.49604 11  0.000000  9    25         0
numdead.2      84.92686 11  1.525354  9     4         1
> print(summary(c7, details=1))
Call: earth(x=data.frame(sex, ldose), y=big.dataframe2, keepxy=1, 
      trace=1, glm=list(family="binomial"), pmethod="none", 
      degree=1)

Earth coefficients
             numdead       fac3A      fac3B       fac3C       fac4P       fac4Q
(Intercept) 5.845238  0.05714286 0.14523810  0.79761905  0.06428571 -0.06428571
sexmale     3.166667  0.66666667 0.16666667 -0.83333333  0.50000000  0.50000000
ldose       3.642857 -0.11428571 0.04285714  0.07142857 -0.12857143  0.12857143
                 fac4R      fac4S numdead.1 sex     fac4.1P     fac4.1Q
(Intercept)  0.5642857  0.4357143  6.845238   0  0.06428571 -0.06428571
sexmale     -0.5000000 -0.5000000  3.166667   1  0.50000000  0.50000000
ldose       -0.1285714  0.1285714  3.642857   0 -0.12857143  0.12857143
               fac4.1R    fac4.1S numdead.2
(Intercept)  0.5642857  0.4357143  8.845238
sexmale     -0.5000000 -0.5000000  3.166667
ldose       -0.1285714  0.1285714  3.642857

GLM coefficients
              numdead      fac3A      fac3B      fac3C      fac4P      fac4Q
(Intercept) -1.344727 -113.03612 -1.7885429   66.31010 -113.12505 -157.68291
sexmale      1.100743  179.74852  0.9447634 -223.30835  135.40398  135.40398
ldose        1.064214  -44.50778  0.2438926   44.32151  -44.55786   44.55786
                 fac4R      fac4S  numdead.1       sex    fac4.1P    fac4.1Q
(Intercept)   22.27893  -22.27893 -1.0901672 -24.56607 -113.12505 -157.68291
sexmale     -135.40398 -135.40398  0.8798704  49.13214  135.40398  135.40398
ldose        -44.55786   44.55786  0.8810902   0.00000  -44.55786   44.55786
               fac4.1R    fac4.1S  numdead.2
(Intercept)   22.27893  -22.27893 -0.8122353
sexmale     -135.40398 -135.40398  0.6440487
ldose        -44.55786   44.55786  0.6736460

GLM numdead deviance residuals:
        Min           1Q       Median           3Q          Max  
-1.10539830  -0.65343193  -0.02224909   0.48470636   1.42944423  

GLM numdead coefficients (family binomial, link logit)
              Estimate Std. Error  z value   Pr(>|z|)
(Intercept) -1.3447274  0.2796543 -4.80854 1.5204e-06
ldose        1.0642140  0.1310775  8.11897 4.7015e-16
sexmale      1.1007434  0.3558271  3.09348  0.0019782

GLM fac3A deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.029766e-05  -2.107342e-08  -2.107342e-08   2.107342e-08   2.132271e-05  

GLM fac3A coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)   -113.03612 153504.75174 -0.00074  0.99941
ldose          -44.50778  58344.69727 -0.00076  0.99939
sexmale        179.74852 227841.50658  0.00079  0.99937

GLM fac3B deviance residuals:
        Min           1Q       Median           3Q          Max  
-0.93544432  -0.76469903  -0.65327347  -0.06582089   2.17901533  

GLM fac3B coefficients (family binomial, link logit)
              Estimate Std. Error  z value Pr(>|z|)
(Intercept) -1.7885429  1.1779712 -1.51832  0.12893
ldose        0.2438926  0.4143509  0.58861  0.55612
sexmale      0.9447634  1.4198549  0.66539  0.50580

GLM fac3C deviance residuals:
          Min             1Q         Median             3Q            Max  
-1.999798e-05  -2.107342e-08  -2.107342e-08   2.107342e-08   2.375481e-05  

GLM fac3C coefficients (family binomial, link logit)
               Estimate  Std. Error  z value Pr(>|z|)
(Intercept)     66.3101  83995.3183  0.00079  0.99937
ldose           44.3215  56068.0621  0.00079  0.99937
sexmale       -223.3083 268535.6889 -0.00083  0.99934

GLM fac4P deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4P coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)   -113.12505 154210.44310 -0.00073  0.99941
ldose          -44.55786  59044.00259 -0.00075  0.99940
sexmale        135.40398 180267.24670  0.00075  0.99940

GLM fac4Q deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4Q coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)   -157.68291 203006.41260 -0.00078  0.99938
ldose           44.55786  59044.00260  0.00075  0.99940
sexmale        135.40398 180267.24674  0.00075  0.99940

GLM fac4R deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4R coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)     22.27893  41750.98788  0.00053  0.99957
ldose          -44.55786  59044.00199 -0.00075  0.99940
sexmale       -135.40398 180267.24493 -0.00075  0.99940

GLM fac4S deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4S coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)    -22.27893  41750.98787 -0.00053  0.99957
ldose           44.55786  59044.00251  0.00075  0.99940
sexmale       -135.40398 180267.24648 -0.00075  0.99940

GLM numdead.1 deviance residuals:
       Min          1Q      Median          3Q         Max  
-0.6940559  -0.3139168  -0.0640255   0.4899520   0.7013721  

GLM numdead.1 coefficients (family binomial, link logit)
              Estimate Std. Error  z value   Pr(>|z|)
(Intercept) -1.0901672  0.2406990 -4.52917 5.9215e-06
ldose        0.8810902  0.1086101  8.11242 4.9622e-16
sexmale      0.8798704  0.3128030  2.81286  0.0049103

GLM sex deviance residuals:
          Min             1Q         Median             3Q            Max  
-6.547293e-06  -6.547293e-06   0.000000e+00   6.547293e-06   6.547293e-06  

GLM sex coefficients (family binomial, link logit)
                 Estimate    Std. Error  z value Pr(>|z|)
(Intercept) -2.456607e+01  5.461898e+04 -0.00045  0.99964
ldose        1.582666e-13  2.214486e+04  0.00000  1.00000
sexmale      4.913214e+01  7.563908e+04  0.00065  0.99948

GLM fac4.1P deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4.1P coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)   -113.12505 154210.44310 -0.00073  0.99941
ldose          -44.55786  59044.00259 -0.00075  0.99940
sexmale        135.40398 180267.24670  0.00075  0.99940

GLM fac4.1Q deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4.1Q coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)   -157.68291 203006.41260 -0.00078  0.99938
ldose           44.55786  59044.00260  0.00075  0.99940
sexmale        135.40398 180267.24674  0.00075  0.99940

GLM fac4.1R deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4.1R coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)     22.27893  41750.98788  0.00053  0.99957
ldose          -44.55786  59044.00199 -0.00075  0.99940
sexmale       -135.40398 180267.24493 -0.00075  0.99940

GLM fac4.1S deviance residuals:
          Min             1Q         Median             3Q            Max  
-2.054501e-05  -2.107342e-08  -2.107342e-08  -1.053671e-08   2.054501e-05  

GLM fac4.1S coefficients (family binomial, link logit)
                Estimate   Std. Error  z value Pr(>|z|)
(Intercept)    -22.27893  41750.98787 -0.00053  0.99957
ldose           44.55786  59044.00251  0.00075  0.99940
sexmale       -135.40398 180267.24648 -0.00075  0.99940

GLM numdead.2 deviance residuals:
        Min           1Q       Median           3Q          Max  
-0.56274566  -0.35651851   0.06861009   0.31863617   0.52780010  

GLM numdead.2 coefficients (family binomial, link logit)
               Estimate  Std. Error  z value   Pr(>|z|)
(Intercept) -0.81223527  0.19856859 -4.09045 4.3053e-05
ldose        0.67364596  0.08606233  7.82742 4.9799e-15
sexmale      0.64404875  0.26392328  2.44029   0.014676

Number of cases: 12
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
                GCV       RSS        GRSq        RSq
numdead   2.3760933  9.702381  0.95248599 0.98075879
fac3A     0.2145773  0.876190  0.18862974 0.67142857
fac3B     0.5148688  2.102381 -1.30737501 0.06560847
fac3C     0.1603499  0.654762  0.44564765 0.77551020
fac4P     0.2256560  0.921429 -0.01127308 0.59047619
fac4Q     0.2256560  0.921429 -0.01127308 0.59047619
fac4R     0.2256560  0.921429 -0.01127308 0.59047619
fac4S     0.2256560  0.921429 -0.01127308 0.59047619
numdead.1 2.3760933  9.702381  0.95248599 0.98075879
sex       0.0000000  0.000000  1.00000000 1.00000000
fac4.1P   0.2256560  0.921429 -0.01127308 0.59047619
fac4.1Q   0.2256560  0.921429 -0.01127308 0.59047619
fac4.1R   0.2256560  0.921429 -0.01127308 0.59047619
fac4.1S   0.2256560  0.921429 -0.01127308 0.59047619
numdead.2 2.3760933  9.702381  0.95248599 0.98075879
All       9.8233236 40.111905  0.93574668 0.97398006

GLM (family binomial, link logit)
          null.deviance df  deviance df iters converged
numdead       124.87559 11  6.757064  9     4         1
fac3A          15.27634 11  0.000000  9    25         0
fac3B          13.49604 11 12.684034  9     4         1
fac3C          16.30064 11  0.000000  9    25         0
fac4P          13.49604 11  0.000000  9    25         0
fac4Q          13.49604 11  0.000000  9    25         0
fac4R          13.49604 11  0.000000  9    25         0
fac4S          13.49604 11  0.000000  9    25         0
numdead.1     105.91731 11  2.709378  9     4         1
sex            16.63553 11  0.000000  9    23         1
fac4.1P        13.49604 11  0.000000  9    25         0
fac4.1Q        13.49604 11  0.000000  9    25         0
fac4.1R        13.49604 11  0.000000  9    25         0
fac4.1S        13.49604 11  0.000000  9    25         0
numdead.2      84.92686 11  1.525354  9     4         1
> stopifnot(colnames(c7$coef) == c("numdead", "fac3A", "fac3B", "fac3C",
+                                  "fac4P", "fac4Q", "fac4R", "fac4S",
+                                   "numdead.1", "sex",
+                                   "fac4.1P", "fac4.1Q", "fac4.1R", "fac4.1S", "numdead.2"))
> stopifnot(c7$glm.bpairs == c(TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE))
> 
> # residuals
> 
> a <- earth(pclass ~ ., data=etitanic)
> printh(residuals(a), max.print=3)
=== residuals(a)
        1st        2nd        3rd
1 0.6459266 -0.2575797 -0.3883469
2 0.7904775 -0.3372244 -0.4532531
3 1.0316575 -0.3335720 -0.6980855
> a <- earth(pclass ~ ., data=etitanic, glm=list(family="b"))
> printh(residuals(a), expect.warning=TRUE, max.print=3)
=== residuals(a) expect warning -->Warning: residuals.earth: returning earth (not glm) residuals
        1st        2nd        3rd
1 0.6459266 -0.2575797 -0.3883469
2 0.7904775 -0.3372244 -0.4532531
3 1.0316575 -0.3335720 -0.6980855
> printh(residuals(a, warn=FALSE), max.print=3)
=== residuals(a, warn = FALSE)
        1st        2nd        3rd
1 0.6459266 -0.2575797 -0.3883469
2 0.7904775 -0.3372244 -0.4532531
3 1.0316575 -0.3335720 -0.6980855
> printh(resid(a, type="earth"), max.print=3)
=== resid(a, type = "earth")
        1st        2nd        3rd
1 0.6459266 -0.2575797 -0.3883469
2 0.7904775 -0.3372244 -0.4532531
3 1.0316575 -0.3335720 -0.6980855
> printh(resid(a, type="deviance"), max.print=3)
=== resid(a, type = "deviance")
       1st        2nd        3rd
1 1.463565 -0.7712447 -0.9440797
2 2.002755 -0.9266706 -1.0226283
3 2.611499 -0.9184549 -1.5622542
> printh(resid(a, type="glm.pearson"), max.print=3)
=== resid(a, type = "glm.pearson")
       1st        2nd        3rd
1 1.385038 -0.5885288 -0.7493292
2 2.535727 -0.7323065 -0.8287859
3 5.409631 -0.7243429 -1.5454025
> printh(resid(a, type="glm.working"), max.print=3)
=== resid(a, type = "glm.working")
        1st       2nd       3rd
1  2.918329 -1.346366 -1.561494
2  7.429912 -1.536273 -1.686886
3 30.264104 -1.524673 -3.388269
> printh(resid(a, type="glm.response"), max.print=3)
=== resid(a, type = "glm.response")
        1st        2nd        3rd
1 0.6573382 -0.2572600 -0.3595878
2 0.8654089 -0.3490739 -0.4071918
3 0.9669576 -0.3441215 -0.7048640
> printh(resid(a, type="glm.partial"), max.print=3)
=== resid(a, type = "glm.partial")
  `h(age-26)` `h(26-age)`  survived `h(sibsp-1)` `h(1-sibsp)` `h(parch-2)`
1    2.551986    3.229034  3.868894     2.971321     2.716353     2.967871
2    6.823847    5.636241  8.380477     7.482904     7.813164     7.479454
3   29.658038   28.561316 29.608383    30.317096    30.647355    30.313645
  `h(2-parch)` `h(age-26)` `h(26-age)`  survived `h(sibsp-1)` `h(1-sibsp)`
1     2.814339   -1.286898   -1.291444 -1.323918    -1.226331    -1.459130
2     7.875285   -1.437891   -1.853336 -1.513824    -1.416238    -1.322303
3    30.709476   -1.426291   -1.825670 -1.540158    -1.404638    -1.310703
  `h(parch-2)` `h(2-parch)` `h(age-26)` `h(26-age)`  survived `h(sibsp-1)`
1    -1.308344    -1.430315   -1.238589  -1.8139051 -2.342634    -1.688705
2    -1.498251    -1.176736   -1.152683  -0.2297406 -2.468026    -1.814097
3    -1.486651    -1.165135   -2.854066  -2.0049559 -2.849421    -3.515480
  `h(1-sibsp)` `h(parch-2)` `h(2-parch)`
1    -1.266139    -1.631657    -1.398041
2    -2.247324    -1.757049    -2.386927
3    -3.948707    -3.458432    -4.088310
> expect.err(try(printh(resid(a, type="nonesuch"), max.print=3))) # type="nonesuch" is illegal.
=== resid(a, type = "nonesuch")Error : type="nonesuch" is not allowed.
Choose one of: "earth" "pearson" "deviance" "glm.pearson" "glm.working" "glm.response" "glm.partial"
Got error as expected
> expect.err(try(printh(resid(a, type="g"), max.print=3))) # type="g" is ambiguous.
=== resid(a, type = "g")Error : type="g" is ambiguous.
Choose one of: "earth" "pearson" "deviance" "glm.pearson" "glm.working" "glm.response" "glm.partial"
Got error as expected
> expect.err(try(printh(resid(a, type="pearson"), max.print=3))) # model was not built with varmod.method
=== resid(a, type = "pearson")Error : "pearson" is not allowed because
the model was not built with varmod.method
Got error as expected
> 
> # tests based on Gavin Simpson's bug report
> # fit a MARS model allowing one-way interactions
> mod.Gamma <- earth(O3 ~ . - doy, data = ozone1, degree = 2, glm = list(family = Gamma))
> for(type in c("earth", "deviance", "glm.pearson", "glm.working", "glm.response", "glm.partial"))
+ {
+     cat("residuals.earth Gamma type=", type, ":\n", sep="")
+     print(head(resid(mod.Gamma, type = type), n=2))
+     print(tail(resid(mod.Gamma, type = type), n=2))
+ }
residuals.earth Gamma type=earth:
           O3
1 -2.50823663
2  0.05212937
           O3
329 -1.054294
330 -0.472548
residuals.earth Gamma type=deviance:
           O3
1 -0.43519457
2 -0.09573671
            O3
329 -0.2329995
330 -1.0956016
residuals.earth Gamma type=glm.pearson:
           O3
1 -0.37448865
2 -0.09270622
            O3
329 -0.2152657
330 -0.7375595
residuals.earth Gamma type=glm.working:
          O3
1 0.07808230
2 0.01682236
            O3
329 0.03378527
330 0.19356548
residuals.earth Gamma type=glm.response:
          O3
1 -1.7960761
2 -0.5108942
           O3
329 -1.371583
330 -2.810387
residuals.earth Gamma type=glm.partial:
  `h(temp-58)` `h(58-temp)` `h(1108-ibh)` `h(55-humidity)*h(temp-58)`
1   0.09820093   0.13942804    0.07910327                  0.07757070
2   0.03694099   0.05588756    0.01424791                  0.01631075
  `h(temp-58)*h(dpg-54)` `h(1108-ibh)*h(44-dpg)` `h(wind-6)*h(1108-ibh)`
1             0.07742274              0.07244562              0.07769265
2             0.01616279              0.04180520              0.01643271
  `h(ibt-109)*h(250-vis)` `h(temp-70)*h(250-vis)` `h(humidity-45)*h(ibh-1108)`
1              0.09310507             0.070613754                   0.06666157
2              0.02760365             0.009353809                   0.00540162
  `h(45-humidity)*h(ibh-1108)`
1                  0.094508566
2                  0.005701488
    `h(temp-58)` `h(58-temp)` `h(1108-ibh)` `h(55-humidity)*h(temp-58)`
329    0.0539039   0.05056994    0.03480624                  0.03327367
330    0.2136841   0.25936733    0.19458646                  0.19305388
    `h(temp-58)*h(dpg-54)` `h(1108-ibh)*h(44-dpg)` `h(wind-6)*h(1108-ibh)`
329             0.03312571              0.02814859              0.03339562
330             0.19290592              0.18792880              0.19317584
    `h(ibt-109)*h(250-vis)` `h(temp-70)*h(250-vis)`
329              0.04880803              0.02631672
330              0.20858825              0.18609694
    `h(humidity-45)*h(ibh-1108)` `h(45-humidity)*h(ibh-1108)`
329                   0.04291582                    0.0226644
330                   0.25917249                    0.1824446
> mod.binomial <- earth(survived ~ ., data = etitanic, degree = 2, glm = list(family = binomial))
> for(type in c("earth", "deviance", "glm.pearson", "glm.working", "glm.response", "glm.partial"))
+ {
+     cat("residuals.earth binomial type=", type, ":\n", sep="")
+     print(head(residuals(mod.binomial, type = type), n=2))
+     print(tail(residuals(mod.binomial, type = type), n=2))
+ }
residuals.earth binomial type=earth:
     survived
1  0.06779661
2 -0.08081757
       survived
1045 -0.1820999
1046 -0.1820999
residuals.earth binomial type=deviance:
   survived
1 0.3747112
2 0.2530402
       survived
1045 -0.6089263
1046 -0.6089263
residuals.earth binomial type=glm.pearson:
   survived
1 0.2696799
2 0.1803681
       survived
1045 -0.4513253
1046 -0.4513253
residuals.earth binomial type=glm.working:
  survived
1 1.072727
2 1.032533
      survived
1045 -1.203695
1046 -1.203695
residuals.earth binomial type=glm.response:
    survived
1 0.06779661
2 0.03150762
       survived
1045 -0.1692244
1046 -0.1692244
residuals.earth binomial type=glm.partial:
      sexmale pclass3rd `sexmale*h(16-age)` `pclass2nd*sexmale`
1  2.84198863  3.366587           0.9417264            1.348156
2 -0.01074001  3.326392           4.5185382            1.307962
  `pclass3rd*h(4-sibsp)` `pclass3rd*sexmale` `sexmale*h(age-32)`
1             0.05291975           0.7637710            1.215762
2             0.01272512           0.7235764            1.175567
       sexmale pclass3rd `sexmale*h(16-age)` `pclass2nd*sexmale`
1045 -2.246967 -3.699011           -1.334695          -0.9282653
1046 -2.246967 -3.699011           -1.334695          -0.9282653
     `pclass3rd*h(4-sibsp)` `pclass3rd*sexmale` `sexmale*h(age-32)`
1045              0.2400515          -0.5866673            -1.06066
1046              0.2400515          -0.5866673            -1.06066
> # intercept only model
> 
> cat("a.intercept.only: intercept only logistic model\n\n")
a.intercept.only: intercept only logistic model

> # This seed chosen so call to earth below has one predictor model in 1st
> # cv fold and intercept-only in 2nd cv fold, that way we test both.
> set.seed(3)
> df <- data.frame(aaa = round(runif(18)), bbb = runif(18), ccc = rnorm(18))
> a.intercept.only <- earth(aaa ~ bbb + ccc, data = df, glm=list(family=binomial), trace=1, nfold=2)
x is a 18 by 2 matrix: 1=bbb, 2=ccc
y is a 18 by 1 matrix: 1=aaa
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 0)
After forward pass GRSq -6.415 RSq 0.359
Prune method "backward" penalty 2 nprune 6: selected 1 of 6 terms, and 0 of 2 predictors
After backward pass GRSq 0 RSq 0 
earth.glm: intercept-only earth model, faking the glm model
GLM aaa: null.deviance 22.91451 (17 dof)   deviance 22.91451 (17 dof)   iters 4

CV fold 1 --------------------------------------------------------------------
x is a 8 by 2 matrix: 1=bbb, 2=ccc
y is a 8 by 1 matrix: 1=infold.y
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq -7.312 RSq 0.830
Prune method "backward" penalty 2 nprune 3: selected 2 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.525 RSq 0.758 
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
GLM infold.y: null.deviance 8.997362 (7 dof)   deviance 4.413181e-10 (6 dof)   iters 25
CV fold 1  CVRSq -1.068 n.oof  8 56%  n.infold.nz 6 75%  n.oof.nz 6 60%  

CV fold 2 --------------------------------------------------------------------
x is a 10 by 2 matrix: 1=bbb, 2=ccc
y is a 10 by 1 matrix: 1=infold.y
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq -7.486 RSq 0.057
Prune method "backward" penalty 2 nprune 3: selected 1 of 3 terms, and 0 of 2 predictors
After backward pass GRSq 0 RSq 0 
earth.glm: intercept-only earth model, faking the glm model
GLM infold.y: null.deviance 13.46023 (9 dof)   deviance 13.46023 (9 dof)   iters 4
CV fold 2  CVRSq -0.120 n.oof 10 44%  n.infold.nz 6 60%  n.oof.nz 6 75%  

CV all     CVRSq -0.594                n.infold.nz 12 67%  

> show.earth.models(a.intercept.only)

Print a.intercept.only 

Earth selected 1 of 6 terms, and 0 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: bbb-unused, ccc-unused
Number of terms at each degree of interaction: 1 (intercept only model)
Earth GCV 0.2491349  RSS 4  GRSq 0  RSq 0  CVRSq -0.5938784

GLM null.deviance 22.91451 (17 dof)   deviance 22.91451 (17 dof)   iters 4

Summary a.intercept.only 

Call: earth(formula=aaa~bbb+ccc, data=df, trace=1, glm=list(family=binomial), 
      nfold=2)

GLM coefficients
                  aaa
(Intercept) 0.6931472

Earth selected 1 of 6 terms, and 0 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: bbb-unused, ccc-unused
Number of terms at each degree of interaction: 1 (intercept only model)
Earth GCV 0.2491349  RSS 4  GRSq 0  RSq 0  CVRSq -0.5938784

GLM null.deviance 22.91451 (17 dof)   deviance 22.91451 (17 dof)   iters 4

Note: the cross-validation sd's below are standard deviations across folds

Cross validation:   nterms 1.50 sd 0.71    nvars 0.50 sd 0.71

 CVRSq   sd ClassRate    sd MaxErr   sd  AUC  sd MeanDev sd CalibInt   sd
 -0.59 0.67      0.72 0.035     -1 0.28 0.57 0.1      11 14     0.79 0.44
 CalibSlope sd
         NA NA

Summary a.intercept.only decomp="none", digits=5, fixed.point=FALSE, details=TRUE

Call: earth(formula=aaa~bbb+ccc, data=df, trace=1, glm=list(family=binomial), 
      nfold=2)

Earth coefficients
                aaa
(Intercept) 0.66667

GLM coefficients
                aaa
(Intercept) 0.69315

GLM deviance residuals:
     Min        1Q    Median        3Q       Max  
-1.48230  -1.48230   0.90052   0.90052   0.90052  

GLM coefficients (family binomial, link logit)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)  0.69315    0.50000  1.3863   0.1657

Number of cases: 18
Earth selected 1 of 6 terms, and 0 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: bbb-unused, ccc-unused
Number of terms at each degree of interaction: 1 (intercept only model)
Earth GCV 0.24913  RSS 4  GRSq 0  RSq 0  CVRSq -0.59388

GLM null.deviance 22.915 (17 dof)   deviance 22.915 (17 dof)   iters 4

Note: the cross-validation sd's below are standard deviations across folds

Cross validation:   nterms 1.50 sd 0.71    nvars 0.50 sd 0.71

 CVRSq   sd ClassRate    sd MaxErr   sd  AUC  sd MeanDev sd CalibInt   sd
 -0.59 0.67      0.72 0.035     -1 0.28 0.57 0.1      11 14     0.79 0.44
 CalibSlope sd
         NA NA

evimp a.intercept.only 

    nsubsets   gcv    rss

evimp a.intercept.only trim=FALSE

           nsubsets   gcv    rss
bbb-unused        0   0.0    0.0
ccc-unused        0   0.0    0.0

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a.intercept.only 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula aaa ~ bbb + ccc
stripped formula aaa~bbb+ccc
get.data.for.formula: using x from "df" passed to earth 
about to eval model.frame(formula=aaa~bbb+ccc, data=structure(list(
    aaa=c(0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
    1), bbb=c(0.897488264366984, 0.279732553754002, 0.228201881283894, 
    0.0153298925142735, 0.128981558606029, 0.0933819285128266, 
    0.236885007470846, 0.791147409472615, 0.599731565685943, 
    0.910147710936144, 0.560424553928897, 0.755704769166186, 
    0.379171891137958, 0.373280976898968, 0.170290642883629, 
    0.453307323623449, 0.258413960458711, 0.336265952326357), ...
got x with colnames from object$call$formula

x[18,2]:
           bbb        ccc
1   0.89748826  1.2243136
2   0.27973255  0.1998116
3   0.22820188 -0.5784837
... 0.01532989 -0.9423007
18  0.33626595  0.7055155

nlevels: bbb=18 ccc=18 

--get.plotmo.y for earth object

formula aaa ~ bbb + ccc
stripped formula aaa~bbb+ccc
get.data.for.formula: using y from "df" passed to earth 
about to eval model.frame(formula=aaa~bbb+ccc, data=structure(list(
    aaa=c(0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
    1), bbb=c(0.897488264366984, 0.279732553754002, 0.228201881283894, 
    0.0153298925142735, 0.128981558606029, 0.0933819285128266, 
    0.236885007470846, 0.791147409472615, 0.599731565685943, 
    0.910147710936144, 0.560424553928897, 0.755704769166186, 
    0.379171891137958, 0.373280976898968, 0.170290642883629, 
    0.453307323623449, 0.258413960458711, 0.336265952326357), ...
got y from object$call$formula
get.plotmo.y returned length 18 min 0 max 1
             value 0 1 0 0 1 1 0 0 1 1 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 bbb 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    bbb        ccc
    0.3547735 0.06386657


plotmo.predict(type="response") for degree1 plot "bbb" with newdata[18,2]:
           bbb        ccc
1   0.01532989 0.06386657
2   0.09338193 0.06386657
3   0.12898156 0.06386657
... 0.17029064 0.06386657
18  0.91014771 0.06386657

get.earth.x from model.matrix.earth from predict.earth: x is a 18 by 2 matrix: 1=bbb, 2=ccc
First few rows of x are
         bbb        ccc
1 0.01532989 0.06386657
2 0.09338193 0.06386657
3 0.12898156 0.06386657
4 0.17029064 0.06386657
5 0.22820188 0.06386657
6 0.23688501 0.06386657
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 18 by 2 matrix: 1=bbb, 2=ccc
First few rows of data after call to model.frame are
         bbb        ccc
1 0.01532989 0.06386657
2 0.09338193 0.06386657
3 0.12898156 0.06386657
4 0.17029064 0.06386657
5 0.22820188 0.06386657
6 0.23688501 0.06386657
predict.earth: bx is a 18 by 1 matrix: 1=(Intercept)
First few rows of bx are
     (Intercept)
[1,]           1
[2,]           1
[3,]           1
[4,]           1
[5,]           1
[6,]           1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "aaa" returned length 18 min 0.6666667 max 0.6666667
                                      value 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 ...
-------------------------------------------------------------------------------

> cat("\nsummary(a.intercept.only, details=TRUE)\n\n", sep="")

summary(a.intercept.only, details=TRUE)

> print(summary(a.intercept.only, details=TRUE))
Call: earth(formula=aaa~bbb+ccc, data=df, trace=1, glm=list(family=binomial), 
      nfold=2)

Earth coefficients
                  aaa
(Intercept) 0.6666667

GLM coefficients
                  aaa
(Intercept) 0.6931472

GLM deviance residuals:
       Min          1Q      Median          3Q         Max  
-1.4823038  -1.4823038   0.9005166   0.9005166   0.9005166  

GLM coefficients (family binomial, link logit)
             Estimate Std. Error z value Pr(>|z|)
(Intercept) 0.6931472  0.4999999 1.38629  0.16566

Number of cases: 18
Earth selected 1 of 6 terms, and 0 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: bbb-unused, ccc-unused
Number of terms at each degree of interaction: 1 (intercept only model)
Earth GCV 0.2491349  RSS 4  GRSq 0  RSq 0  CVRSq -0.5938784

GLM null.deviance 22.91451 (17 dof)   deviance 22.91451 (17 dof)   iters 4

Note: the cross-validation sd's below are standard deviations across folds

Cross validation:   nterms 1.50 sd 0.71    nvars 0.50 sd 0.71

 CVRSq   sd ClassRate    sd MaxErr   sd  AUC  sd MeanDev sd CalibInt   sd
 -0.59 0.67      0.72 0.035     -1 0.28 0.57 0.1      11 14     0.79 0.44
 CalibSlope sd
         NA NA
> printh(predict(a.intercept.only))
=== predict(a.intercept.only)
            aaa
 [1,] 0.6931472
 [2,] 0.6931472
 [3,] 0.6931472
 [4,] 0.6931472
 [5,] 0.6931472
 [6,] 0.6931472
 [7,] 0.6931472
 [8,] 0.6931472
 [9,] 0.6931472
[10,] 0.6931472
[11,] 0.6931472
[12,] 0.6931472
[13,] 0.6931472
[14,] 0.6931472
[15,] 0.6931472
[16,] 0.6931472
[17,] 0.6931472
[18,] 0.6931472
> printh(predict(a.intercept.only, type="link"))
=== predict(a.intercept.only, type = "link")
            aaa
 [1,] 0.6931472
 [2,] 0.6931472
 [3,] 0.6931472
 [4,] 0.6931472
 [5,] 0.6931472
 [6,] 0.6931472
 [7,] 0.6931472
 [8,] 0.6931472
 [9,] 0.6931472
[10,] 0.6931472
[11,] 0.6931472
[12,] 0.6931472
[13,] 0.6931472
[14,] 0.6931472
[15,] 0.6931472
[16,] 0.6931472
[17,] 0.6931472
[18,] 0.6931472
> printh(predict(a.intercept.only, type="response"))
=== predict(a.intercept.only, type = "response")
            aaa
 [1,] 0.6666667
 [2,] 0.6666667
 [3,] 0.6666667
 [4,] 0.6666667
 [5,] 0.6666667
 [6,] 0.6666667
 [7,] 0.6666667
 [8,] 0.6666667
 [9,] 0.6666667
[10,] 0.6666667
[11,] 0.6666667
[12,] 0.6666667
[13,] 0.6666667
[14,] 0.6666667
[15,] 0.6666667
[16,] 0.6666667
[17,] 0.6666667
[18,] 0.6666667
> printh(predict(a.intercept.only, type="earth"))
=== predict(a.intercept.only, type = "earth")
            aaa
 [1,] 0.6666667
 [2,] 0.6666667
 [3,] 0.6666667
 [4,] 0.6666667
 [5,] 0.6666667
 [6,] 0.6666667
 [7,] 0.6666667
 [8,] 0.6666667
 [9,] 0.6666667
[10,] 0.6666667
[11,] 0.6666667
[12,] 0.6666667
[13,] 0.6666667
[14,] 0.6666667
[15,] 0.6666667
[16,] 0.6666667
[17,] 0.6666667
[18,] 0.6666667
> g <- a.intercept.only$glm.list[[1]]
> printh(predict(g, type="link"))
=== predict(g, type = "link")
        1         2         3         4         5         6         7         8 
0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 
        9        10        11        12        13        14        15        16 
0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 0.6931472 
       17        18 
0.6931472 0.6931472 
> printh(predict(g, type="response"))
=== predict(g, type = "response")
        1         2         3         4         5         6         7         8 
0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 
        9        10        11        12        13        14        15        16 
0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 
       17        18 
0.6666667 0.6666667 
> 
> new.df <- df[3:5, ]
> printh(predict(a.intercept.only, type="response"))
=== predict(a.intercept.only, type = "response")
            aaa
 [1,] 0.6666667
 [2,] 0.6666667
 [3,] 0.6666667
 [4,] 0.6666667
 [5,] 0.6666667
 [6,] 0.6666667
 [7,] 0.6666667
 [8,] 0.6666667
 [9,] 0.6666667
[10,] 0.6666667
[11,] 0.6666667
[12,] 0.6666667
[13,] 0.6666667
[14,] 0.6666667
[15,] 0.6666667
[16,] 0.6666667
[17,] 0.6666667
[18,] 0.6666667
> printh(predict(a.intercept.only, newdata=new.df, trace=1, type="link"))
=== predict(a.intercept.only, newdata = new.df, trace = 1, type = "link")get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 3 matrix: 1=aaa, 2=bbb, 3=ccc
Contents of x are
  aaa        bbb        ccc
1   0 0.22820188 -0.5784837
2   0 0.01532989 -0.9423007
3   1 0.12898156 -0.2037282
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 2 matrix: 1=bbb, 2=ccc
Contents of data after call to model.frame are
         bbb        ccc
1 0.22820188 -0.5784837
2 0.01532989 -0.9423007
3 0.12898156 -0.2037282
predict.earth: bx is a 3 by 1 matrix: 1=(Intercept)
Contents of bx are
     (Intercept)
[1,]           1
[2,]           1
[3,]           1
predict.earth: returning glm link predictions

           aaa
[1,] 0.6931472
[2,] 0.6931472
[3,] 0.6931472
> printh(predict(a.intercept.only, newdata=new.df, trace=1, type="response"))
=== predict(a.intercept.only, newdata = new.df, trace = 1, type = "response")get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 3 matrix: 1=aaa, 2=bbb, 3=ccc
Contents of x are
  aaa        bbb        ccc
1   0 0.22820188 -0.5784837
2   0 0.01532989 -0.9423007
3   1 0.12898156 -0.2037282
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 2 matrix: 1=bbb, 2=ccc
Contents of data after call to model.frame are
         bbb        ccc
1 0.22820188 -0.5784837
2 0.01532989 -0.9423007
3 0.12898156 -0.2037282
predict.earth: bx is a 3 by 1 matrix: 1=(Intercept)
Contents of bx are
     (Intercept)
[1,]           1
[2,]           1
[3,]           1
predict.earth: returning glm response predictions

           aaa
[1,] 0.6666667
[2,] 0.6666667
[3,] 0.6666667
> printh(predict(a.intercept.only, newdata=new.df, type="earth"))
=== predict(a.intercept.only, newdata = new.df, type = "earth")
           aaa
[1,] 0.6666667
[2,] 0.6666667
[3,] 0.6666667
> printh(predict(a.intercept.only, newdata=new.df, type="class"))
=== predict(a.intercept.only, newdata = new.df, type = "class")
[1] 1 1 1
> # cat("Expect Warning: predict.earth: returning the earth (not glm) terms\n")
> printh(predict(a.intercept.only, newdata=new.df, type="terms"))
=== predict(a.intercept.only, newdata = new.df, type = "terms")Warning: predict.earth: returning the earth (not glm) terms

    
[1,]
[2,]
[3,]
> 
> set.seed(1235)
> a <- earth(survived ~ ., data=etitanic, glm=list(family=binomial), nfold=2)
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
> plot.earth.models(list(a.intercept.only, a), main="plot.earth.models\nlist(a.intercept.only, a)")
> plot.earth.models(list(a, a.intercept.only), main="plot.earth.models\nlist(a, a.intercept.only)", legend.pos="topleft", jitter=.01)
> # nothing will plot for the next call
> plot.earth.models(list(a.intercept.only, a.intercept.only), main="plot.earth.models\nlist(a.intercept.only, a.intercept.only)")
> 
> # test position of legend and "intercep-only model" message when only one term in model
> a.intercept.pruned <- update(a.intercept.only, nprune=1, nfold=1)
update.earth: using 18 by 3 data argument from original call to earth
x is a 18 by 2 matrix: 1=bbb, 2=ccc
y is a 18 by 1 matrix: 1=aaa
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 0)
After forward pass GRSq -6.415 RSq 0.359
Prune method "backward" penalty 2 nprune 1: selected 1 of 6 terms, and 0 of 2 predictors
After backward pass GRSq 0 RSq 0 
earth.glm: intercept-only earth model, faking the glm model
GLM aaa: null.deviance 22.91451 (17 dof)   deviance 22.91451 (17 dof)   iters 4
> show.earth.models(a.intercept.pruned)

Print a.intercept.pruned 

Earth selected 1 of 6 terms, and 0 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: bbb-unused, ccc-unused
Number of terms at each degree of interaction: 1 (intercept only model)
Earth GCV 0.2491349    RSS 4    GRSq 0    RSq 0

GLM null.deviance 22.91451 (17 dof)   deviance 22.91451 (17 dof)   iters 4

Summary a.intercept.pruned 

Call: earth(formula=aaa~bbb+ccc, data=df, trace=1, glm=list(family=binomial), 
      nfold=1, nprune=1)

GLM coefficients
                  aaa
(Intercept) 0.6931472

Earth selected 1 of 6 terms, and 0 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: bbb-unused, ccc-unused
Number of terms at each degree of interaction: 1 (intercept only model)
Earth GCV 0.2491349    RSS 4    GRSq 0    RSq 0

GLM null.deviance 22.91451 (17 dof)   deviance 22.91451 (17 dof)   iters 4

Summary a.intercept.pruned digits=3, details=TRUE

Call: earth(formula=aaa~bbb+ccc, data=df, trace=1, glm=list(family=binomial), 
      nfold=1, nprune=1)

Earth coefficients
              aaa
(Intercept) 0.667

GLM coefficients
              aaa
(Intercept) 0.693

GLM deviance residuals:
   Min      1Q  Median      3Q     Max  
-1.482  -1.482   0.901   0.901   0.901  

GLM coefficients (family binomial, link logit)
            Estimate Std. Error z value Pr(>|z|)
(Intercept)    0.693      0.500    1.39     0.17

Number of cases: 18
Earth selected 1 of 6 terms, and 0 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: bbb-unused, ccc-unused
Number of terms at each degree of interaction: 1 (intercept only model)
Earth GCV 0.249    RSS 4    GRSq 0    RSq 0

GLM null.deviance 22.9 (17 dof)   deviance 22.9 (17 dof)   iters 4

evimp a.intercept.pruned 

    nsubsets   gcv    rss

evimp a.intercept.pruned trim=FALSE

           nsubsets   gcv    rss
bbb-unused        0   0.0    0.0
ccc-unused        0   0.0    0.0

glm params: epsilon 1e-08 maxit 25 trace FALSE family binomial link logit 

plotmo a.intercept.pruned 
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula aaa ~ bbb + ccc
stripped formula aaa~bbb+ccc
get.data.for.formula: using x from "df" passed to earth 
about to eval model.frame(formula=aaa~bbb+ccc, data=structure(list(
    aaa=c(0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
    1), bbb=c(0.897488264366984, 0.279732553754002, 0.228201881283894, 
    0.0153298925142735, 0.128981558606029, 0.0933819285128266, 
    0.236885007470846, 0.791147409472615, 0.599731565685943, 
    0.910147710936144, 0.560424553928897, 0.755704769166186, 
    0.379171891137958, 0.373280976898968, 0.170290642883629, 
    0.453307323623449, 0.258413960458711, 0.336265952326357), ...
got x with colnames from object$call$formula

x[18,2]:
           bbb        ccc
1   0.89748826  1.2243136
2   0.27973255  0.1998116
3   0.22820188 -0.5784837
... 0.01532989 -0.9423007
18  0.33626595  0.7055155

nlevels: bbb=18 ccc=18 

--get.plotmo.y for earth object

formula aaa ~ bbb + ccc
stripped formula aaa~bbb+ccc
get.data.for.formula: using y from "df" passed to earth 
about to eval model.frame(formula=aaa~bbb+ccc, data=structure(list(
    aaa=c(0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
    1), bbb=c(0.897488264366984, 0.279732553754002, 0.228201881283894, 
    0.0153298925142735, 0.128981558606029, 0.0933819285128266, 
    0.236885007470846, 0.791147409472615, 0.599731565685943, 
    0.910147710936144, 0.560424553928897, 0.755704769166186, 
    0.379171891137958, 0.373280976898968, 0.170290642883629, 
    0.453307323623449, 0.258413960458711, 0.336265952326357), ...
got y from object$call$formula
get.plotmo.y returned length 18 min 0 max 1
             value 0 1 0 0 1 1 0 0 1 1 ...

clip.limits 0 1 

--get.plotmo.singles for earth object

singles: 1 bbb 

--get.plotmo.pairs for earth object

no pairs

ylim 0 1 

--plot.degree1(draw.plot=TRUE)

 grid:    bbb        ccc
    0.3547735 0.06386657


plotmo.predict(type="response") for degree1 plot "bbb" with newdata[18,2]:
           bbb        ccc
1   0.01532989 0.06386657
2   0.09338193 0.06386657
3   0.12898156 0.06386657
... 0.17029064 0.06386657
18  0.91014771 0.06386657

get.earth.x from model.matrix.earth from predict.earth: x is a 18 by 2 matrix: 1=bbb, 2=ccc
First few rows of x are
         bbb        ccc
1 0.01532989 0.06386657
2 0.09338193 0.06386657
3 0.12898156 0.06386657
4 0.17029064 0.06386657
5 0.22820188 0.06386657
6 0.23688501 0.06386657
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 18 by 2 matrix: 1=bbb, 2=ccc
First few rows of data after call to model.frame are
         bbb        ccc
1 0.01532989 0.06386657
2 0.09338193 0.06386657
3 0.12898156 0.06386657
4 0.17029064 0.06386657
5 0.22820188 0.06386657
6 0.23688501 0.06386657
predict.earth: bx is a 18 by 1 matrix: 1=(Intercept)
First few rows of bx are
     (Intercept)
[1,]           1
[2,]           1
[3,]           1
[4,]           1
[5,]           1
[6,]           1
predict.earth: returning glm response predictions
predict.earth(xgrid, type="response") column "aaa" returned length 18 min 0.6666667 max 0.6666667
                                      value 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 0.6666667 ...
-------------------------------------------------------------------------------

> 
> # misc tests
> 
> cat("---misc 1---\n")
---misc 1---
> sex1 <- factor(rep(c("male", "female"), times=c(6,6)))
> sex2 <- factor(rep(c("male", "female"), times=c(6,6)))
> earth(numdead, cbind(sex1, sex2, sex1), trace=1) # one duplicate name
x is a 12 by 1 matrix: 1=numdead
y is a 12 by 3 matrix: 1=sex1, 2=sex2, 3=sex1.1
Forward pass term 1, 2, 4
RSq changed by less than 0.001 at 3 terms (DeltaRSq 0)
After forward pass GRSq -1.322 RSq 0.060
Prune method "backward" penalty 2 nprune 2: selected 1 of 2 terms, and 0 of 1 predictors
After backward pass GRSq 0 RSq 0 
Selected 1 of 2 terms, and 0 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 2 terms
Importance: numdead-unused
Number of terms at each degree of interaction: 1 (intercept only model)

             GCV RSS          GRSq           RSq
sex1   0.2975207   3 -6.661338e-16 -6.661338e-16
sex2   0.2975207   3 -6.661338e-16 -6.661338e-16
sex1.1 0.2975207   3 -6.661338e-16 -6.661338e-16
All    0.8925620   9  0.000000e+00  0.000000e+00
> sex1 <- factor(rep(c("male", "female"), times=c(6,6)))
> sex2 <- factor(rep(c("male", "female"), times=c(6,6)))
> earth(numdead, cbind(sex1, sex2, sex1, sex1), trace=1) # two duplicate names
x is a 12 by 1 matrix: 1=numdead
y is a 12 by 4 matrix: 1=sex1, 2=sex2, 3=sex1.1, 4=sex1.2
Forward pass term 1, 2, 4
RSq changed by less than 0.001 at 3 terms (DeltaRSq 0)
After forward pass GRSq -1.322 RSq 0.060
Prune method "backward" penalty 2 nprune 2: selected 1 of 2 terms, and 0 of 1 predictors
After backward pass GRSq 0 RSq 0 
Selected 1 of 2 terms, and 0 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 2 terms
Importance: numdead-unused
Number of terms at each degree of interaction: 1 (intercept only model)

             GCV RSS          GRSq           RSq
sex1   0.2975207   3 -6.661338e-16 -6.661338e-16
sex2   0.2975207   3 -6.661338e-16 -6.661338e-16
sex1.1 0.2975207   3 -6.661338e-16 -6.661338e-16
sex1.2 0.2975207   3 -6.661338e-16 -6.661338e-16
All    1.1900826  12  0.000000e+00  0.000000e+00
> 
> # test column expansion when y is a data frame in earth.default
> 
> cat("---misc 2---\n")
---misc 2---
> ldose  <- rep(0:5, 2) - 2
> ldose1 <- c(0.1, 1.2, 2.3, 3.4, 4.5, 5.6, 0.3, 1.4, 2.5, 3.6, 4.7, 5.8)
> sex <- factor(rep(c("male", "female"), times=c(6,6)))
> sex2 <- sex
> sex3 <- factor(rep(c("male", "female", "andro"), times=c(6,4,2)))
> fac3 <- factor(c("lev2", "lev2", "lev1", "lev1", "lev3", "lev3",
+                  "lev2", "lev2", "lev1", "lev1", "lev3", "lev3"))
> facdead <- factor(c("dead2", "dead2", "dead3", "dead1", "dead3", "dead3",
+                     "dead1", "dead2", "dead1", "dead1", "dead3", "dead3"))
> 
> isex <- as.double(sex3) # sex3 as an index
> df1 <- data.frame(sex2, d_=facdead, sex, sex, isex)
> af <-  earth(data.frame(sex3,ldose,fac3,isex), df1, trace=1, pmethod="none", degree=2)
x is a 12 by 6 matrix: 1=sex3female, 2=sex3male, 3=ldose, 4=fac3lev2, 5=fac3lev3, ...
y is a 12 by 7 matrix: 1=sex2, 2=d_dead1, 3=d_dead2, 4=d_dead3, 5=sex, ...
Forward pass term 1, 2, 4, 6, 8
Reached minimum GRSq -10 at 7 terms (GRSq -11)
After forward pass GRSq -10.585 RSq 0.904
Prune method "none" penalty 3 nprune 4: selected 4 of 4 terms, and 3 of 6 predictors
After backward pass GRSq -0.331 RSq 0.865 
> 
> cat("---misc 3---\n")
---misc 3---
> 
> # strings in input matrices, get converted to factors and a warning issued
> # TODO would like to improve the error message (says 'x' even when 'y')
> # TODO Apr 2013 warning no longer issued (R changed), is that ok?
> 
> ldose  <- rep(0:5, 2) - 2
> ldose1 <- c(0.1, 1.2, 2.3, 3.4, 4.5, 5.6, 0.3, 1.4, 2.5, 3.6, 4.7, 5.8)
> sex2 <- rep(c("male", "female"), times=c(6,6))
> af <-  earth(sex2, sex2, trace=1, pmethod="none", degree=2)
x is a 12 by 1 matrix: 1=sex2
y is a 12 by 2 matrix: 1=female, 2=male
Forward pass term 1, 2
Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Prune method "none" penalty 3 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> 
> # test update.earth with a bpairs argument (for now always do forward pass if bpairs used)
> 
> cat("---misc 4---\n")
---misc 4---
> volumei <- as.integer(trees$Volume)
> x1 <- trees$Height
> a <- earth(x1, cbind(volumei, 100-volumei), glm=list(family=binomial, bpairs=c(TRUE,FALSE)))
> update(a, trace=1, glm=list(family=binomial))
update.earth: forcing forward pass because bpairs argument used
update.earth: using 31 by 1 x argument from original call to earth
update.earth: using 31 by 2 y argument from original call to earth
x is a 31 by 1 matrix: 1=x1
y is a 31 by 2 matrix: 1=volumei (paired with y2)
Forward pass term 1, 2, 4, 6, 8, 10
RSq changed by less than 0.001 at 9 terms (DeltaRSq 0)
After forward pass GRSq -0.647 RSq 0.407
Prune method "backward" penalty 2 nprune 6: selected 2 of 6 terms, and 1 of 1 predictors
After backward pass GRSq 0.239 RSq 0.338 
GLM volumei: null.deviance 382.4328 (30 dof)   deviance 255.0788 (29 dof)   iters 4
Earth selected 2 of 6 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: x1
Number of terms at each degree of interaction: 1 1 (additive model)
Earth GCV 213.2819    RSS 5393.967    GRSq 0.2394863    RSq 0.337508

GLM null.deviance 382.4328 (30 dof)   deviance 255.0788 (29 dof)   iters 4
> a <- earth(x1, cbind(volumei, 100-volumei), glm=list(family=binomial))
> update(a, trace=1, glm=list(family=binomial, bpairs=c(TRUE,FALSE)))
update.earth: forcing forward pass because bpairs argument used
update.earth: using 31 by 1 x argument from original call to earth
update.earth: using 31 by 2 y argument from original call to earth
x is a 31 by 1 matrix: 1=x1
y is a 31 by 2 matrix: 1=volumei (paired with y2)
Forward pass term 1, 2, 4, 6, 8, 10
RSq changed by less than 0.001 at 9 terms (DeltaRSq 0)
After forward pass GRSq -0.647 RSq 0.407
Prune method "backward" penalty 2 nprune 6: selected 2 of 6 terms, and 1 of 1 predictors
After backward pass GRSq 0.239 RSq 0.338 
GLM volumei: null.deviance 382.4328 (30 dof)   deviance 255.0788 (29 dof)   iters 4
Earth selected 2 of 6 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: x1
Number of terms at each degree of interaction: 1 1 (additive model)
Earth GCV 213.2819    RSS 5393.967    GRSq 0.2394863    RSq 0.337508

GLM null.deviance 382.4328 (30 dof)   deviance 255.0788 (29 dof)   iters 4
> 
> if(!interactive()) {
+     dev.off()         # finish postscript plot
+     q(runLast=FALSE)  # needed else R prints the time on exit (R2.5 and higher) which messes up the diffs
+ }
