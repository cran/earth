> # test.full.R: test earth
> 
> print(R.version.string)
[1] "R version 3.1.2 (2014-10-31)"
> 
> library(earth)
Loading required package: plotmo
Loading required package: plotrix
> library(mda)
Loading required package: class
Loaded mda 0.4-4

> source("check.models.equal.R")
> data(ozone1)
> data(trees)
> data(etitanic)
> if(!interactive())
+     postscript(paper="letter")
> 
> PRINT.TIME <- FALSE         # FALSE for no time results (for diff against reference)
> PLOT <- TRUE                # TRUE to do plots too, FALSE for speed
> options.old <- options()
> options(warn=1) # print warnings as they occur
> # options(digits=5) # removed because want to check against default
> 
> expect.err <- function(obj) # test that we got an error as expected from a try() call
+ {
+     if(class(obj)[1] == "try-error")
+         cat("Got error as expected\n")
+     else
+         stop("did not get expected try error")
+ }
> printh <- function(x, expect.warning=FALSE, max.print=0) # like print but with a header
+ {
+     cat("===", deparse(substitute(x)), " ", sep="")
+     if(expect.warning)
+         cat(" expect warning -->")
+     else if (NROW(x) > 1)
+         cat("\n")
+     if (max.print > 0)
+         print(head(x, n=max.print))
+     else
+         print(x)
+ }
> 
> print(citation("earth"))

To cite package 'earth' in publications use:

  Stephen Milborrow. Derived from mda:mars by Trevor Hastie and Rob
  Tibshirani. Uses Alan Miller's Fortran utilities with Thomas Lumley's
  leaps wrapper. (2011). earth: Multivariate Adaptive Regression
  Splines. R package version 4.1.0.
  http://CRAN.R-project.org/package=earth

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {earth: Multivariate Adaptive Regression Splines},
    author = {Stephen Milborrow. Derived from mda:mars by Trevor Hastie and Rob Tibshirani. Uses Alan Miller's Fortran utilities with Thomas Lumley's leaps wrapper.},
    year = {2011},
    note = {R package version 4.1.0},
    url = {http://CRAN.R-project.org/package=earth},
  }

ATTENTION: This citation information has been auto-generated from the
package DESCRIPTION file and may need manual editing, see
'help("citation")'.

> 
> #--- test examples from man pages ------------------------------------------------------------
> 
> cat("--- earth.Rd -----------------------------\n")
--- earth.Rd -----------------------------
> example(earth)

earth> earth.mod <- earth(Volume ~ ., data = trees)

earth> plotmo(earth.mod)

 grid:    Girth Height
           12.9     76


earth> summary(earth.mod, digits = 2, style = "pmax")
Call: earth(formula=Volume~., data=trees)

Volume =
  38
  -  3.9 * pmax(0,     16 -  Girth) 
  +  7.4 * pmax(0,  Girth -     16) 
  + 0.48 * pmax(0, Height -     75) 

Selected 4 of 6 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: Girth, Height
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 13    RSS 236    GRSq 0.95    RSq 0.97
> 
> a <- earth(mpg ~ ., data = mtcars, pmethod = "none", trace = 4)
Call: earth(formula=mpg~., data=mtcars, trace=4, pmethod="none")

x is a 32 by 10 matrix: 1=cyl, 2=disp, 3=hp, 4=drat, 5=wt, 6=qsec, 7=vs, 8=am, 9=gear, 10=carb
First few rows of x are
     cyl disp  hp drat    wt  qsec vs am gear carb
[1,]   6  160 110 3.90 2.620 16.46  0  1    4    4
[2,]   6  160 110 3.90 2.875 17.02  0  1    4    4
[3,]   4  108  93 3.85 2.320 18.61  1  1    4    1
[4,]   6  258 110 3.08 3.215 19.44  1  0    3    1
[5,]   8  360 175 3.15 3.440 17.02  0  0    3    2
[6,]   6  225 105 2.76 3.460 20.22  1  0    3    1

y is a 32 by 1 matrix: 1=mpg
First few rows of y are
      mpg
[1,] 21.0
[2,] 21.0
[3,] 22.8
[4,] 21.4
[5,] 18.7
[6,] 18.1

Forward pass: minspan 5 endspan 10

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.8118 0.8572       0.8572    2         disp         160  2   3   
4      0.7752 0.8763      0.01906    3           hp         150  4   5   
6      0.7427 0.9033      0.02708    6         qsec       18.61  6   7   
8      0.6376 0.9152      0.01182    4         drat        3.23  8   9   
10     0.5680 0.9240     0.008869    4         drat        3.73  10      
12     0.1980 0.9324     0.008372    9         gear           4  11  12  
14    -0.1428 0.9417     0.009329    2         disp         258  13      
16    -4.6491 0.9471     0.005364    1          cyl           6  14  15  
18   -42.8692 0.9544     0.007256    6         qsec        17.3  16      reject term

Reached minimum GRSq -10 at 17 terms (GRSq -43)
After forward pass GRSq -42.869 RSq 0.954
Forward pass complete: 17 terms (15 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.7220  0.7567     0.7220      1  1 3
          3      0.8118  0.8572     0.0897      1  1 2 3
          4      0.7924  0.8650    -0.0194      2  1 2 3 4
          5      0.8116  0.8963     0.0192      3  1 3 4 5 7
          6      0.7917  0.9044    -0.0198      3  1 3 4 5 7 13
          7      0.7555  0.9081    -0.0362      4  1 3 4 5 7 9 13
          8      0.7206  0.9160    -0.0349      4  1 2 3 4 5 7 9 13
          9      0.6638  0.9213    -0.0568      5  1 2 3 4 5 7 9 12 13
         10      0.6219  0.9335    -0.0419      5  1 2 3 4 5 7 8 9 12 13
         11      0.5019  0.9373    -0.1200      5  1 2 3 4 5 6 7 8 9 12 13
         12      0.2963  0.9407    -0.2056      6  1 2 3 4 5 6 7 8 9 12 13 15
         13     -0.0504  0.9464    -0.3468      6  1 2 3 4 5 6 7 8 9 11 12 13 15
         14     -1.0337  0.9471    -0.9832      6  1 2 3 4 5 6 7 8 9 10 11 12 13 15
chosen   15     -4.6491  0.9471    -3.6154      6  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Prune method "none" penalty 2 nprune 15: selected 15 of 15 terms, and 6 of 10 predictors
After backward pass GRSq -4.65 RSq 0.947 
> 
> set.seed(1)
> train.subset <- sample(1:nrow(trees), .8 * nrow(trees))
> test.subset <- (1:nrow(trees))[-train.subset]
> a <- earth(Volume ~ ., data = trees[train.subset, ])
> yhat <- predict(a, newdata = trees[test.subset, ])
> y <- trees$Volume[test.subset]
> printh(sum((yhat - mean(yhat))^2) / sum((y - mean(y))^2)) # print R-Squared
===sum((yhat - mean(yhat))^2)/sum((y - mean(y))^2) [1] 1.057394
> get.used.pred.names <- function(obj) # obj is an earth object
+ {
+   any1 <- function(x) any(x != 0)    # like any but no warning if x is double
+   names(which(apply(obj$dirs[obj$selected.terms,,drop=FALSE],2,any1)))
+ }
> printh(get.used.pred.names(a))
===get.used.pred.names(a) 
[1] "Girth"  "Height"
> 
> a1 <- earth(survived ~ ., data=etitanic,   # c.f. Harrell "Reg. Mod. Strat." ch. 12
+              degree=2, trace=1,
+              glm=list(family=binomial))
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=survived
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.408 RSq 0.449
Prune method "backward" penalty 3 nprune 16: selected 8 of 16 terms, and 5 of 6 predictors
After backward pass GRSq 0.42 RSq 0.44 
GLM survived: null.deviance 1414.62 (1045 dof)   deviance 892.8612 (1038 dof)   iters 5
> printh(a1)
===a1 
Earth selected 8 of 16 terms, and 5 of 6 predictors 
Termination condition: Reached nk 21
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch-unused
Number of terms at each degree of interaction: 1 2 5
Earth GCV 0.1402703    RSS 141.5787    GRSq 0.4204646    RSq 0.4397124

GLM null.deviance 1414.62 (1045 dof)   deviance 892.8612 (1038 dof)   iters 5
> 
> a1a <- earth(etitanic[,-2], etitanic[,2],  # equivalent but using earth.default
+              degree=2, trace=1,
+              glm=list(family=binomial))
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=etitanic[,2]
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached nk 21
After forward pass GRSq 0.408 RSq 0.449
Prune method "backward" penalty 3 nprune 16: selected 8 of 16 terms, and 5 of 6 predictors
After backward pass GRSq 0.42 RSq 0.44 
GLM etitanic[,2]: null.deviance 1414.62 (1045 dof)   deviance 892.8612 (1038 dof)   iters 5
> printh(a1a)
===a1a 
Earth selected 8 of 16 terms, and 5 of 6 predictors 
Termination condition: Reached nk 21
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch-unused
Number of terms at each degree of interaction: 1 2 5
Earth GCV 0.1402703    RSS 141.5787    GRSq 0.4204646    RSq 0.4397124

GLM null.deviance 1414.62 (1045 dof)   deviance 892.8612 (1038 dof)   iters 5
> 
> a2 <- earth(pclass ~ ., data=etitanic, trace=1, glm=list(family=binomial))
x is a 1046 by 5 matrix: 1=survived, 2=sexmale, 3=age, 4=sibsp, 5=parch
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14
RSq changed by less than 0.001 at 13 terms (DeltaRSq 0.00062)
After forward pass GRSq 0.163 RSq 0.195
Prune method "backward" penalty 2 nprune 10: selected 8 of 10 terms, and 4 of 5 predictors
After backward pass GRSq 0.167 RSq 0.189 
GLM 1st: null.deviance 1223.308 (1045 dof)   deviance 920.8021 (1038 dof)   iters 5
GLM 2nd: null.deviance 1175.305 (1045 dof)   deviance 1147.518 (1038 dof)   iters 5
GLM 3rd: null.deviance 1448.212 (1045 dof)   deviance 1142.756 (1038 dof)   iters 5
> printh(a2)
===a2 
Earth selected 8 of 10 terms, and 4 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 10 terms
Importance: age, survived, sibsp, parch, sexmale-unused
Number of terms at each degree of interaction: 1 7 (additive model)

Earth
          GCV      RSS         GRSq        RSq
1st 0.1483414 150.7467  0.251448718 0.27137124
2nd 0.1885520 191.6094 -0.004971341 0.02177575
3rd 0.1927692 195.8949  0.229032722 0.24955184
All 0.5296626 538.2511  0.166969402 0.18914032

GLM (family binomial, link logit)
    null.deviance   df  deviance   df iters converged
1st      1223.308 1045  920.8021 1038     5         1
2nd      1175.305 1045 1147.5176 1038     5         1
3rd      1448.213 1045 1142.7559 1038     5         1
> 
> ldose <- rep(0:5, 2) - 2 # V&R 4th ed. p. 191
> sex <- factor(rep(c("male", "female"), times=c(6,6)))
> numdead <- c(1,4,9,13,18,20,0,2,6,10,12,16)
> pair <- cbind(numdead, numalive=20 - numdead)
> 
> a3 <- earth(pair ~ sex + ldose, trace=1, pmethod="none",
+             glm=list(family=binomial(link=probit), maxit=100))
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 5.565963 (9 dof)   iters 4
> printh(a3)
===a3 
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 2.376093    RSS 9.702381    GRSq 0.952486    RSq 0.9807588

GLM null.deviance 124.8756 (11 dof)   deviance 5.565963 (9 dof)   iters 4
> 
> numdead2 <- c(2,8,11,12,20,23,0,4,6,16,12,14) # bogus data
> doublepair <- cbind(numdead, numalive=20-numdead,
+                     numdead2=numdead2, numalive2=30-numdead2)
> 
> a4 <- earth(doublepair ~ sex + ldose, trace=1, pmethod="none",
+             glm=list(family="binomial"))
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.658 RSq 0.929
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.826 RSq 0.929 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 91.62481 (11 dof)   deviance 16.06743 (9 dof)   iters 4
> printh(a4)
===a4 
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
               GCV       RSS      GRSq       RSq
numdead   2.376093  9.702381 0.9524860 0.9807588
numdead2 15.773761 64.409524 0.7079827 0.8817451
All      18.149854 74.111905 0.8255238 0.9293443

GLM (family binomial, link logit)
         null.deviance df  deviance df iters converged
numdead      124.87559 11  6.757064  9     4         1
numdead2      91.62481 11 16.067427  9     4         1
> 
> counts <- c(18,17,15,20,10,20,25,13,12) # Dobson 1990 p. 93
> outcome <- gl(3,1,9)
> treatment <- gl(3,3)
> 
> a5 <- earth(counts ~ outcome + treatment, trace=1, pmethod="none",
+             glm=list(family=poisson))
x is a 9 by 4 matrix: 1=outcome2, 2=outcome3, 3=treatment2, 4=treatment3
y is a 9 by 1 matrix: 1=counts
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq -6.576 RSq 0.527
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 4 predictors
After backward pass GRSq -0.894 RSq 0.527 
GLM counts: null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4
> printh(a5)
===a5 
Earth selected 3 of 3 terms, and 2 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 46.875    RSS 83.33333    GRSq -0.8939394    RSq 0.5265152

GLM null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4
> 
> a6 <- earth(numdead ~ sex + ldose, trace=1, pmethod="none",
+             glm=list(family=gaussian(link=identity)))
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6
RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.907 RSq 0.981
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.952 RSq 0.981 
GLM numdead: null.deviance 504.25 (11 dof)   deviance 9.702381 (9 dof)   iters 2
> printh(a6$coefficients == a6$glm.coefficients)  # all TRUE
===a6$coefficients == a6$glm.coefficients 
            numdead
(Intercept)    TRUE
ldose          TRUE
sexmale        TRUE
> printh(a6)
===a6 
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 2.376093    RSS 9.702381    GRSq 0.952486    RSq 0.9807588

GLM null.deviance 504.25 (11 dof)   deviance 9.702381 (9 dof)   iters 2
> 
> remove(ldose)
> remove(sex)
> remove(numdead)
> remove(pair)
> remove(numdead2)
> remove(doublepair)
> remove(counts)
> remove(outcome)
> remove(treatment)
> 
> printh(earth(cbind(Volume,lvol=log(Volume)) ~ ., data=trees))
===earth(cbind(Volume, lvol = log(Volume)) ~ ., data = trees) 
Selected 4 of 6 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: Girth, Height
Number of terms at each degree of interaction: 1 3 (additive model)

              GCV        RSS      GRSq       RSq
Volume 12.7045194 236.058167 0.9544983 0.9708789
lvol    0.0152222   0.282839 0.9468104 0.9659587
All    12.7197416 236.341006 0.9544904 0.9708739
> attach(trees)
> printh(earth(data.frame(Girth,Height), data.frame(Volume,lvol=log(Volume))))
===earth(data.frame(Girth, Height), data.frame(Volume, lvol = log(Volume))) 
Selected 4 of 6 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: Girth, Height
Number of terms at each degree of interaction: 1 3 (additive model)

              GCV        RSS      GRSq       RSq
Volume 12.7045194 236.058167 0.9544983 0.9708789
lvol    0.0152222   0.282839 0.9468104 0.9659587
All    12.7197416 236.341006 0.9544904 0.9708739
> detach(trees)
> 
> lm.fit <- lm(O3 ~ log(temp) + humidity*temp, data=ozone1)
> printh(lm.fit)
===lm.fit 

Call:
lm(formula = O3 ~ log(temp) + humidity * temp, data = ozone1)

Coefficients:
  (Intercept)      log(temp)       humidity           temp  humidity:temp  
     94.85623      -31.27411       -0.20050        0.63299        0.00475  

> plotmo(lm.fit, level=.95)

 grid:    temp humidity
            62       64

> lm.fit2 <- lm(O3 ~ temp+ibh+doy, data=ozone1)
> printh(lm.fit2)
===lm.fit2 

Call:
lm(formula = O3 ~ temp + ibh + doy, data = ozone1)

Coefficients:
(Intercept)         temp          ibh          doy  
 -7.6740829    0.3785184   -0.0009858   -0.0066324  

> plotmo(lm.fit2, all2=TRUE, clip=FALSE)

 grid:    temp    ibh   doy
            62 2112.5 205.5

> 
> cat("--- print.default of earth object---------\n")
--- print.default of earth object---------
> print.default(a, digits=3)
$bx
      (Intercept) h(Girth-14) h(14-Girth) h(Height-74)
 [1,]           1         0.0         2.9            6
 [2,]           1         0.0         2.6            2
 [3,]           1         0.0         1.1           11
 [4,]           1         3.3         0.0            7
 [5,]           1         0.0         3.2            9
 [6,]           1         2.0         0.0            0
 [7,]           1         3.9         0.0            6
 [8,]           1         0.0         1.1            0
 [9,]           1         0.0         2.0            1
[10,]           1         0.0         5.4            0
[11,]           1         0.0         3.3            7
[12,]           1         0.0         3.5            0
[13,]           1         0.0         2.3            0
[14,]           1         0.0         3.0            0
[15,]           1         0.0         0.3            0
[16,]           1         0.0         3.0            1
[17,]           1         0.0         2.7            5
[18,]           1         4.0         0.0            6
[19,]           1         0.0         0.0            4
[20,]           1         0.0         2.8            1
[21,]           1         0.5         0.0            0
[22,]           1         0.0         5.2            0
[23,]           1         3.5         0.0            8
[24,]           1         0.2         0.0            6

$dirs
              Girth Height
(Intercept)       0      0
h(Girth-14)       1      0
h(14-Girth)      -1      0
h(Height-74)      0      1
h(74-Height)      0     -1
h(Girth-12.9)     1      0

$cuts
              Girth Height
(Intercept)     0.0      0
h(Girth-14)    14.0      0
h(14-Girth)    14.0      0
h(Height-74)    0.0     74
h(74-Height)    0.0     74
h(Girth-12.9)  12.9      0

$selected.terms
[1] 1 2 3 4

$prune.terms
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    0    0    0    0    0
[2,]    1    2    0    0    0    0
[3,]    1    2    3    0    0    0
[4,]    1    2    3    4    0    0
[5,]    1    2    3    4    6    0
[6,]    1    2    3    4    5    6

$rss
[1] 130

$rsq
[1] 0.973

$gcv
[1] 10.8

$grsq
[1] 0.95

$rss.per.response
[1] 130

$rsq.per.response
[1] 0.973

$gcv.per.response
[1] 10.8

$grsq.per.response
[1] 0.95

$rss.per.subset
[1] 4739  930  240  130  123  122

$gcv.per.subset
[1] 215.0  50.6  16.0  10.8  13.1  17.4

$rss.per.subset
[1] 4739  930  240  130  123  122

$gcv.per.subset
[1] 215.0  50.6  16.0  10.8  13.1  17.4

$fitted.values
      Volume
 [1,]  21.94
 [2,]  20.40
 [3,]  32.03
 [4,]  52.86
 [5,]  22.82
 [6,]  40.57
 [7,]  55.72
 [8,]  24.70
 [9,]  21.99
[10,]   8.57
[11,]  21.11
[12,]  15.70
[13,]  20.20
[14,]  17.57
[15,]  27.70
[16,]  18.24
[17,]  22.03
[18,]  56.30
[19,]  31.49
[20,]  18.99
[21,]  31.76
[22,]   9.32
[23,]  54.70
[24,]  34.00

$residuals
       Volume
 [1,]  0.6571
 [2,]  0.5952
 [3,]  1.7750
 [4,]  2.5389
 [5,] -3.1150
 [6,] -2.2683
 [7,]  2.5824
 [8,] -2.5004
 [9,] -2.8899
[10,]  1.7313
[11,] -2.3081
[12,]  0.7033
[13,]  1.1014
[14,] -1.9725
[15,] -2.0017
[16,] -0.0383
[17,]  2.1727
[18,] -4.8047
[19,]  3.0094
[20,]  0.9113
[21,]  4.5376
[22,]  0.8809
[23,]  0.9989
[24,] -2.2965

$coefficients
             Volume
(Intercept)  28.827
h(Girth-14)   5.871
h(14-Girth)  -3.752
h(Height-74)  0.666

$penalty
[1] 2

$nk
[1] 21

$thresh
[1] 0.001

$termcond
[1] 4

$weights
NULL

$namesx.org
[1] "Girth"  "Height"

$namesx
[1] "Girth"  "Height"

$terms
Volume ~ Girth + Height
attr(,"variables")
list(Volume, Girth, Height)
attr(,"factors")
       Girth Height
Volume     0      0
Girth      1      0
Height     0      1
attr(,"term.labels")
[1] "Girth"  "Height"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(Volume, Girth, Height)
attr(,"dataClasses")
   Volume     Girth    Height 
"numeric" "numeric" "numeric" 

$call
earth(formula = Volume ~ ., data = trees[train.subset, ])

attr(,"class")
[1] "earth"
> cat("--- done print.default of earth object----\n")
--- done print.default of earth object----
> if (PLOT)
+     plot(a)
> library(mda)
> (a <- fda(Species~., data=iris, method=earth, keepxy=TRUE))
Call:
fda(formula = Species ~ ., data = iris, method = earth, keepxy = TRUE)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 92.64 100.00 

Training Misclassification Error: 0.02667 ( N = 150 )
> if (PLOT)
+     plot(a)
> printh(summary(a$fit))
===summary(a$fit) 
Call: earth(x=x, y=Theta, weights=weights, keepxy=TRUE)

                            y1         y2
(Intercept)         -2.1501105 -0.5533752
h(Sepal.Length-4.9) -0.1439524 -0.3047446
h(Petal.Length-3.7)  1.4307310  0.3292482
h(4.5-Petal.Length)  1.1127766 -0.0310903
h(Petal.Length-4.5) -0.5568203  1.2572316
h(Petal.Length-5.4) -0.8333071 -1.4675476
h(Petal.Width-1.6)   2.2981330  3.9445915
h(Petal.Width-1.9)  -2.7221259 -4.6903730

Selected 8 of 13 terms, and 3 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 13 terms
Importance: Petal.Length, Petal.Width, Sepal.Length, Sepal.Width-unused
Number of terms at each degree of interaction: 1 7 (additive model)

           GCV       RSS      GRSq       RSq
y1  0.06541482  7.947901 0.9354545 0.9470140
y2  0.12561844 15.262640 0.8760509 0.8982491
All 0.19103326 23.210541 0.9057527 0.9226315
> expect.err(try(printh(summary(a$fit, none.such1="xxx")))) # summary.earth unrecognized argument "none.such1"
===summary(a$fit, none.such1 = "xxx") Error : summary.earth: unrecognized argument "none.such1"
Got error as expected
> printh(summary(a$fit, style="bf", none.such2="xxx")) # Warning: format.earth ignored unrecognized argument "none.such2"
===summary(a$fit, style = "bf", none.such2 = "xxx") Warning: format.earth ignored unrecognized argument "none.such2"

Call: earth(x=x, y=Theta, weights=weights, keepxy=TRUE)

y1 =
  -2.150111
  - 0.1439524 * bf1
  +  1.430731 * bf2
  +  1.112777 * bf3
  - 0.5568203 * bf4
  - 0.8333071 * bf5
  +  2.298133 * bf6
  -  2.722126 * bf7

   bf1  h(Sepal.Length-4.9)
   bf2  h(Petal.Length-3.7)
   bf3  h(4.5-Petal.Length)
   bf4  h(Petal.Length-4.5)
   bf5  h(Petal.Length-5.4)
   bf6  h(Petal.Width-1.6)
   bf7  h(Petal.Width-1.9)

y2 =
  -0.5533752
  -  0.3047446 * bf1
  +  0.3292482 * bf2
  - 0.03109032 * bf3
  +   1.257232 * bf4
  -   1.467548 * bf5
  +   3.944591 * bf6
  -   4.690373 * bf7

   bf1  h(Sepal.Length-4.9)
   bf2  h(Petal.Length-3.7)
   bf3  h(4.5-Petal.Length)
   bf4  h(Petal.Length-4.5)
   bf5  h(Petal.Length-5.4)
   bf6  h(Petal.Width-1.6)
   bf7  h(Petal.Width-1.9)

Selected 8 of 13 terms, and 3 of 4 predictors 
Termination condition: RSq changed by less than 0.001 at 13 terms
Importance: Petal.Length, Petal.Width, Sepal.Length, Sepal.Width-unused
Number of terms at each degree of interaction: 1 7 (additive model)

           GCV       RSS      GRSq       RSq
y1  0.06541482  7.947901 0.9354545 0.9470140
y2  0.12561844 15.262640 0.8760509 0.8982491
All 0.19103326 23.210541 0.9057527 0.9226315
> if (PLOT) {
+     plot(a$fit, col.residuals=iris$Species)
+     plotmo(a$fit, nresponse=1, ylim=c(-1.5,1.5), clip=FALSE)
+     plotmo(a$fit, nresponse=2, ylim=c(-1.5,1.5), clip=FALSE)
+ }
Warning: col.residuals is deprecated.  Please use col.points instead.

 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3


 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3

> a <- update(a, nk=3) # not on man page
> printh(a)
===a 
Call:
fda(formula = Species ~ ., data = iris, method = earth, keepxy = TRUE, 
    nk = 3)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 94.38 100.00 

Training Misclassification Error: 0.04 ( N = 150 )
> printh(summary(a$fit))
===summary(a$fit) 
Call: earth(x=x, y=Theta, weights=weights, keepxy=TRUE, nk=3)

                          y1          y2
(Intercept)        -1.300791 -0.74367728
h(1.2-Petal.Width)  2.601323  0.03896856
h(Petal.Width-1.2)  1.351182  2.22366217

Selected 3 of 3 terms, and 1 of 4 predictors 
Termination condition: Reached nk 3
Importance: Petal.Width, Sepal.Length-unused, Sepal.Width-unused, ...
Number of terms at each degree of interaction: 1 2 (additive model)

          GCV      RSS      GRSq       RSq
y1  0.1190355 16.68481 0.8825464 0.8887680
y2  0.2430154 34.06267 0.7602140 0.7729156
All 0.3620509 50.74747 0.8213802 0.8308418
> head(etitanic) # pclass and sex are unordered factors
  pclass survived    sex     age sibsp parch
1    1st        1 female 29.0000     0     0
2    1st        1   male  0.9167     1     2
3    1st        0 female  2.0000     1     2
4    1st        0   male 30.0000     1     2
5    1st        0 female 25.0000     1     2
6    1st        1   male 48.0000     0     0
> earth(pclass ~ ., data=etitanic, trace=2)
x is a 1046 by 5 matrix: 1=survived, 2=sexmale, 3=age, 4=sibsp, 5=parch
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0910 0.0980      0.09797    3          age          26  2   3   
4      0.1525 0.1622       0.0642    1     survived           0< 4       
6      0.1598 0.1758      0.01368    4        sibsp           1  5   6   
8      0.1670 0.1891       0.0133    5        parch           2  7   8   
10     0.1664 0.1918     0.002617    3          age          21  9       
12     0.1656 0.1941     0.002356    3          age          56  10      
14     0.1630 0.1947    0.0006186    3          age          48  11      reject term

RSq changed by less than 0.001 at 13 terms (DeltaRSq 0.00062)
After forward pass GRSq 0.163 RSq 0.195
Forward pass complete: 13 terms (10 terms used)
Prune method "backward" penalty 2 nprune 10: selected 8 of 10 terms, and 4 of 5 predictors
After backward pass GRSq 0.167 RSq 0.189 
Selected 8 of 10 terms, and 4 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 10 terms
Importance: age, survived, sibsp, parch, sexmale-unused
Number of terms at each degree of interaction: 1 7 (additive model)

          GCV      RSS         GRSq        RSq
1st 0.1483414 150.7467  0.251448718 0.27137124
2nd 0.1885520 191.6094 -0.004971341 0.02177575
3rd 0.1927692 195.8949  0.229032722 0.24955184
All 0.5296626 538.2511  0.166969402 0.18914032
> 
> cat("--- format.earth.Rd ----------------------\n")
--- format.earth.Rd ----------------------
> as.func <- function( # convert expression string to func
+                object, digits = 8, use.names = TRUE, ...)
+   eval(parse(text=paste(
+     "function(x)\n",
+     "{\n",
+     "if(is.vector(x))\n",
+     "  x <- matrix(x, nrow = 1, ncol = length(x))\n",
+     "with(as.data.frame(x),\n",
+     format(object, digits = digits, use.names = use.names, style = "p", ...),
+     ")\n",
+     "}\n", sep = "")))
> a <- earth(Volume ~ ., data = trees)
> my.func <- as.func(a, use.names = FALSE)
> printh(my.func(c(10,80)))     # yields 17.76888
===my.func(c(10, 80)) [1] 16.83508
> printh(predict(a, c(10,80)))  # yields 17.76888, but is slower
===predict(a, c(10, 80))        Volume
[1,] 16.83508
> example(format.earth)

frmt.r> earth.mod <- earth(Volume ~ ., data = trees)

frmt.r> cat(format(earth.mod))
  37.92678
  -  3.918711 * h(16-Girth)
  +  7.401132 * h(Girth-16)
  + 0.4841128 * h(Height-75)

frmt.r> # yields:
frmt.r> #    37.9
frmt.r> #    -  3.92 * h(16-Girth)
frmt.r> #    +   7.4 * h(Girth-16)
frmt.r> #    + 0.484 * h(Height-75)
frmt.r> 
frmt.r> cat(format(earth.mod, style="pmax")) # default formatting style prior to earth version 1.4
  37.92678
  -  3.918711 * pmax(0,     16 -  Girth) 
  +  7.401132 * pmax(0,  Girth -     16) 
  + 0.4841128 * pmax(0, Height -     75) 

frmt.r> # yields:
frmt.r> #    37.9
frmt.r> #    -  3.92 * pmax(0,     16 -  Girth)
frmt.r> #    +   7.4 * pmax(0,  Girth -     16)
frmt.r> #    + 0.484 * pmax(0, Height -     75)
frmt.r> 
frmt.r> cat(format(earth.mod, style="C"))
37.92678
  -  3.918711 * max(0,   16 - x[0]) 
  +  7.401132 * max(0, x[0] -   16) 
  + 0.4841128 * max(0, x[1] -   75) 

frmt.r> # yields (note zero based indexing):
frmt.r> #  37.927
frmt.r> #    -  3.9187 * max(0,   16 - x[0])
frmt.r> #    +  7.4011 * max(0, x[0] -   16)
frmt.r> #    + 0.48411 * max(0, x[1] -   75)
frmt.r> 
frmt.r> cat(format(earth.mod, style="bf"))
  37.92678
  -  3.918711 * bf1
  +  7.401132 * bf2
  + 0.4841128 * bf3

   bf1  h(16-Girth)
   bf2  h(Girth-16)
   bf3  h(Height-75)

frmt.r> # yields:
frmt.r> #    37.9
frmt.r> #    -  3.92 * bf1
frmt.r> #    +   7.4 * bf2
frmt.r> #    + 0.484 * bf3
frmt.r> #
frmt.r> #     bf1  h(16-Girth)
frmt.r> #     bf2  h(Girth-16)
frmt.r> #     bf3  h(Height-75)
frmt.r> 
frmt.r> 
frmt.r> 
> a <- earth(Volume ~ ., data = trees)
> cat(format(a)) # basic tests of format.earth
  37.92678
  -  3.918711 * h(16-Girth)
  +  7.401132 * h(Girth-16)
  + 0.4841128 * h(Height-75)
> cat(format(a, digits=4))
  37.93
  -  3.919 * h(16-Girth)
  +  7.401 * h(Girth-16)
  + 0.4841 * h(Height-75)
> # cat(format(a, use.names=FALSE))
> cat(format(a, style="pmax"))
  37.92678
  -  3.918711 * pmax(0,     16 -  Girth) 
  +  7.401132 * pmax(0,  Girth -     16) 
  + 0.4841128 * pmax(0, Height -     75) 
> cat(format(a, style="max"))
  37.92678
  -  3.918711 * max(0,     16 -  Girth) 
  +  7.401132 * max(0,  Girth -     16) 
  + 0.4841128 * max(0, Height -     75) 
> cat(format(a, style="bf"))
  37.92678
  -  3.918711 * bf1
  +  7.401132 * bf2
  + 0.4841128 * bf3

   bf1  h(16-Girth)
   bf2  h(Girth-16)
   bf3  h(Height-75)
> cat(format(a, use.names=FALSE, style="p"))
  37.92678
  -  3.918711 * pmax(0,    16 - x[,1]) 
  +  7.401132 * pmax(0, x[,1] -    16) 
  + 0.4841128 * pmax(0, x[,2] -    75) 
> cat(format(a, use.names=FALSE, style="m"))
  37.92678
  -  3.918711 * max(0,    16 - x[,1]) 
  +  7.401132 * max(0, x[,1] -    16) 
  + 0.4841128 * max(0, x[,2] -    75) 
> a <- earth(Volume ~ Girth*Height, data = trees, pmethod="none")
> cat(format(a))
  22.10645
  -  0.4270818 * h(12.9-Girth)
  +    2.54592 * h(Girth-12.9)
  - 0.02955001 * h(900-Girth:Height)
  + 0.03782459 * h(Girth:Height-900)
> cat(format(a, colon.char="*"))
  22.10645
  -  0.4270818 * h(12.9-Girth)
  +    2.54592 * h(Girth-12.9)
  - 0.02955001 * h(900-Girth*Height)
  + 0.03782459 * h(Girth*Height-900)
> a <- lm(Volume ~ ., data = trees)
> cat(format(a)) # basic tests of format.lm
  -57.98766
  +  4.708161 * Girth
  + 0.3392512 * Height
> cat(format(a, digits=4))
  -57.99
  +  4.708 * Girth
  + 0.3393 * Height
> cat(format(a, use.names=FALSE))
  -57.98766
  +  4.708161 * x[,1]
  + 0.3392512 * x[,2]
> cat(format(a, style="p"))
  -57.98766
  +  4.708161 * Girth
  + 0.3392512 * Height
> cat(format(a, use.names=FALSE, style="p"))
  -57.98766
  +  4.708161 * x[,1]
  + 0.3392512 * x[,2]
> a <- lm(Volume ~ Girth*Height, data = trees)
> cat(format(a))
  69.39632
  -  5.855848 * Girth
  -  1.297083 * Height
  + 0.1346544 * Girth:Height
> cat(format(a, colon.char="*"))
  69.39632
  -  5.855848 * Girth
  -  1.297083 * Height
  + 0.1346544 * Girth*Height
> cat("--- mars.to.earth.Rd ----------------------\n")
--- mars.to.earth.Rd ----------------------
> example(mars.to.earth)

mrs.t.> if(require(mda)) {
mrs.t.+     mars.mod <- mars(trees[,-3], trees[,3])
mrs.t.+     earth.mod <- mars.to.earth(mars.mod)
mrs.t.+     summary(earth.mod, digits = 2) # the standard earth functions can now be used
mrs.t.+ 
mrs.t.+     # yields (note the reconstructed call):
mrs.t.+     #    Call: earth(x=trees[, -3], y=trees[, 3])
mrs.t.+     #
mrs.t.+     #                  coefficients
mrs.t.+     #    (Intercept)           26.3
mrs.t.+     #    h(13.8-Girth)         -3.2
mrs.t.+     #    h(Girth-13.8)          6.1
mrs.t.+     #    h(11.4-Girth)          0.5
mrs.t.+     #
mrs.t.+     #    Selected 4 of 8 terms, and 2 of 2 predictors
mrs.t.+     #    Termination condition: Unknown
mrs.t.+     #    Importance: object has no prune.terms, call update() on the model to fix that
mrs.t.+     #    Number of terms at each degree of interaction: 1 3 (additive model)
mrs.t.+     #    GCV 10    RSS 190    GRSq 0.96    RSq 0.98
mrs.t.+ }
Converted mars(x=trees[, -3], y=trees[, 3])

to        earth(x=trees[, -3], y=trees[, 3])

Call: earth(x=trees[, -3], y=trees[, 3])

              coefficients
(Intercept)           26.3
h(13.8-Girth)         -3.2
h(Girth-13.8)          6.1
h(11.4-Girth)          0.5

Selected 4 of 8 terms, and 2 of 2 predictors 
Termination condition: Unknown
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 10    RSS 190    GRSq 0.96    RSq 0.98
> library(mda)
> a <- mars(trees[,-3], trees[,3])
> a <- mars.to.earth(a)
Converted mars(x=trees[, -3], y=trees[, 3])

to        earth(x=trees[, -3], y=trees[, 3])

> summary(a, digits = 2)
Call: earth(x=trees[, -3], y=trees[, 3])

              coefficients
(Intercept)           26.3
h(13.8-Girth)         -3.2
h(Girth-13.8)          6.1
h(11.4-Girth)          0.5

Selected 4 of 8 terms, and 2 of 2 predictors 
Termination condition: Unknown
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 10    RSS 190    GRSq 0.96    RSq 0.98
> printh(summary(a, digits=2))
===summary(a, digits = 2) 
Call: earth(x=trees[, -3], y=trees[, 3])

              coefficients
(Intercept)           26.3
h(13.8-Girth)         -3.2
h(Girth-13.8)          6.1
h(11.4-Girth)          0.5

Selected 4 of 8 terms, and 2 of 2 predictors 
Termination condition: Unknown
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 10    RSS 190    GRSq 0.96    RSq 0.98
> printh(summary(a, digits=2, style="bf"))
===summary(a, digits = 2, style = "bf") 
Call: earth(x=trees[, -3], y=trees[, 3])

y =
  26
  - 3.2 * bf1
  + 6.1 * bf2
  + 0.5 * bf3

   bf1  h(13.8-Girth)
   bf2  h(Girth-13.8)
   bf3  h(11.4-Girth)

Selected 4 of 8 terms, and 2 of 2 predictors 
Termination condition: Unknown
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 10    RSS 190    GRSq 0.96    RSq 0.98
> cat("--- plot.earth.models.Rd ----------------------\n")
--- plot.earth.models.Rd ----------------------
> if (PLOT)
+     example(plot.earth.models)

plt.r.> data(ozone1)

plt.r.> a1 <- earth(O3 ~ .,          data = ozone1, degree = 2)

plt.r.> a2 <- earth(O3 ~ .-wind,     data = ozone1, degree = 2)

plt.r.> a3 <- earth(O3 ~ .-humidity, data = ozone1, degree = 2)

plt.r.> plot.earth.models(list(a1,a2,a3), ylim=c(.65,.85))
> cat("--- plot.earth.Rd ----------------------\n")
--- plot.earth.Rd ----------------------
> if (PLOT) {
+     data(etitanic)
+     a <- earth(survived ~ ., data=etitanic, glm=list(family=binomial))
+     par(mfrow=c(2,2))
+     plot(a$glm.list[[1]])
+     example(plot.earth)
+ }

plt.rt> data(ozone1)

plt.rt> earth.mod <- earth(O3 ~ ., data = ozone1, degree = 2)

plt.rt> plot(earth.mod)
> cat("--- predict.earth.Rd ----------------------\n")
--- predict.earth.Rd ----------------------
> example(predict.earth)

prdct.> data(trees)

prdct.> earth.mod <- earth(Volume ~ ., data = trees)

prdct.> predict(earth.mod)           # same as earth.mod$fitted.values
         Volume
 [1,]  7.752710
 [2,]  8.928323
 [3,]  9.712065
 [4,] 16.373874
 [5,] 20.062292
 [6,] 21.422389
 [7,] 18.333229
 [8,] 18.333229
 [9,] 21.145664
[10,] 19.116971
[11,] 21.445293
[12,] 20.384826
[13,] 20.384826
[14,] 21.076326
[15,] 22.251940
[16,] 25.778779
[17,] 30.619907
[18,] 32.671505
[19,] 28.913748
[20,] 29.305619
[21,] 31.541700
[22,] 33.293667
[23,] 32.048717
[24,] 37.926783
[25,] 41.115348
[26,] 50.452932
[27,] 52.417271
[28,] 54.409498
[29,] 55.149611
[30,] 55.149611
[31,] 77.781345

prdct.> predict(earth.mod, c(10,80)) # yields 16.8
       Volume
[1,] 16.83508
> cat("--- update.earth.Rd ----------------------\n")
--- update.earth.Rd ----------------------
> example(update.earth)

updt.r> data(ozone1)

updt.r> (earth.mod <- earth(O3 ~ ., data = ozone1, degree = 2))
Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356

updt.r> update(earth.mod, formula = O3 ~ . - temp) # requires forward pass and pruning
Selected 14 of 21 terms, and 8 of 8 predictors 
Termination condition: Reached nk 21
Importance: ibt, humidity, doy, vh, ibh, dpg, wind, vis
Number of terms at each degree of interaction: 1 5 8
GCV 13.11224    RSS 3493.111    GRSq 0.7963167    RSq 0.8345705

updt.r> update(earth.mod, nprune = 8)              # requires only pruning
Selected 8 of 21 terms, and 6 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh-unused, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 2
GCV 15.07944    RSS 4433.915    GRSq 0.7657586    RSq 0.7900152

updt.r> update(earth.mod, penalty=1, ponly=TRUE)   # pruning pass only with a new penalty
Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 12.44859    RSS 3683.886    GRSq 0.8066258    RSq 0.8255356
> 
> cat("--- evimp.Rd -----------------------------\n")
--- evimp.Rd -----------------------------
> 
> par(mfrow=c(2,2))
> cat('before calling evimp par("mar", "cex"):\n')
before calling evimp par("mar", "cex"):
> print(par("mar", "cex"))
$mar
[1] 5.1 4.1 4.1 2.1

$cex
[1] 0.83

> 
> example(evimp)

evimp> data(ozone1)

evimp> earth.mod <- earth(O3 ~ ., data=ozone1, degree=2)

evimp> ev <- evimp(earth.mod, trim=FALSE)

evimp> plot(ev)

evimp> print(ev)
          nsubsets   gcv    rss
temp            11 100.0  100.0
humidity         9  35.7   38.9
ibt              9  35.7   38.9
doy              8  33.7   36.5
dpg              6  26.2   28.7
ibh              5  31.1>  33.0>
vis              5  21.2   23.9
wind             2   9.3   11.9
vh-unused        0   0.0    0.0
> 
> cat("--- plot.evimp.Rd ------------------------\n")
--- plot.evimp.Rd ------------------------
> 
> example(plot.evimp)

plt.vm> data(ozone1)

plt.vm> earth.mod <- earth(O3 ~ ., data=ozone1, degree=2)

plt.vm> ev <- evimp(earth.mod)

plt.vm> plot(ev)

plt.vm> print(ev)
         nsubsets   gcv    rss
temp           11 100.0  100.0
humidity        9  35.7   38.9
ibt             9  35.7   38.9
doy             8  33.7   36.5
dpg             6  26.2   28.7
ibh             5  31.1>  33.0>
vis             5  21.2   23.9
wind            2   9.3   11.9
> 
> rownames(ev)[4] <- "a_long_variable_name"
> 
> plot(ev, main="plot.evimp with various options",
+     cex.var = .8,
+     type.nsubsets = "p",
+     col.nsubsets = "red",
+     lty.nsubsets = 2, # ignored because type.nsubsets="p"
+     type.gcv = "l",
+     col.gcv = "green",
+     lty.gcv = 3,
+     type.rss = "b",
+     col.rss = "blue",
+     lty.rss = 4,
+     cex.legend = .8,
+     x.legend = "topright",
+     rh.col = "pink")
> 
> a <- earth(Volume ~ Girth, data = trees)
> plot(evimp(a), main="plot.evimp with single var in model")
> 
> cat('after calling evimp par("mar", "cex"):\n')
after calling evimp par("mar", "cex"):
> print(par("mar", "cex"))
$mar
[1] 5.1 4.1 4.1 2.1

$cex
[1] 0.83

> par(mfrow=c(1,1))
> 
> cat("--- test predict.earth -------------------\n")
--- test predict.earth -------------------
> 
> a <- earth(Volume ~ ., data = trees)
> cat("1a predict(a, c(10,80))\n")
1a predict(a, c(10,80))
> printh(predict(a, c(10,80), trace=1))
===predict(a, c(10, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
predict.earth: returning earth predictions 
       Volume
[1,] 16.83508
> cat("1b predict(a, c(10,10,80,80))\n")
1b predict(a, c(10,10,80,80))
> printh(predict(a, c(10,10,80,80), trace=1))
===predict(a, c(10, 10, 80, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    10     80
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           6            5
predict.earth: returning earth predictions 

       Volume
[1,] 16.83508
[2,] 16.83508
> cat("1c predict(a, c(10,11,80,81))\n")
1c predict(a, c(10,11,80,81))
> printh(predict(a, c(10,11,80,81), trace=1))
===predict(a, c(10, 11, 80, 81), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    11     81
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    11     81
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           5            6
predict.earth: returning earth predictions 

       Volume
[1,] 16.83508
[2,] 21.23791
> cat("2 predict(a)\n")
2 predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

        Volume
[1,]  7.752710
[2,]  8.928323
[3,]  9.712065
[4,] 16.373874
[5,] 20.062292
[6,] 21.422389
> cat("3a predict(a, matrix(c(10,12), nrow=1, ncol=2))\n")
3a predict(a, matrix(c(10,12), nrow=1, ncol=2))
> printh(predict(a, matrix(c(10,12), nrow=1, ncol=2), trace=1))
===predict(a, matrix(c(10, 12), nrow = 1, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            0
predict.earth: returning earth predictions 
       Volume
[1,] 14.41452
> cat("3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)\n")
3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)
> printh(predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE), trace=1))
===predict(a, matrix(c(10, 12), nrow = 2, ncol = 2, byrow = TRUE),     trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
2    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
2    10     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            0
[2,]           1           0           6            0
predict.earth: returning earth predictions 

       Volume
[1,] 14.41452
[2,] 14.41452
> cat("3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))\n")
3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume
[1,] 16.83508
[2,] 29.51363
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> colnames(xpredict) <- c("Girth", "Height")
> cat("4 predict(a, xpredict with colnames)\n")
4 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume
[1,] 16.83508
[2,] 29.51363
> cat("5 predict(a, as.data.frame(xpredict with colnames))\n")
5 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume
[1,] 16.83508
[2,] 29.51363
> # reverse dataframe columns (and their names), predict should deal with it correctly
> xpredict <- as.data.frame(cbind(xpredict[,2], xpredict[,1]))
> colnames(xpredict) <- c("Height", "Girth")
> cat("6a predict(a, xpredict with reversed columns and colnames)\n")
6a predict(a, xpredict with reversed columns and colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume
[1,] 16.83508
[2,] 29.51363
> xpredict2 <- cbind(xpredict[,1], xpredict[,2]) # nameless matrix
> cat("6b predict(a, xpredict2)\n")
6b predict(a, xpredict2)
> printh(predict(a, xpredict2, trace=1))
===predict(a, xpredict2, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    80     10
2    90     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    80     10
2    90     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1          64           0            0
[2,]           1          74           0            0
predict.earth: returning earth predictions 

       Volume
[1,] 511.5992
[2,] 585.6106
> 
> # repeat but with x,y (not formula) call to earth
> 
> x1 <- cbind(trees$Girth, trees$Height)
> colnames(x1) <- c("Girth", "Height")
> a <- earth(x1, trees$Volume)
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> cat("7a predict(a)\n")
7a predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

     trees$Volume
[1,]     7.752710
[2,]     8.928323
[3,]     9.712065
[4,]    16.373874
[5,]    20.062292
[6,]    21.422389
> cat("7n predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)\n")
7n predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

     trees$Volume
[1,]     16.83508
[2,]     29.51363
> colnames(xpredict) <- c("Girth", "Height")
> cat("8 predict(a, xpredict with colnames)\n")
8 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

     trees$Volume
[1,]     16.83508
[2,]     29.51363
> cat("9 predict(a, as.data.frame(xpredict with colnames))\n")
9 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

     trees$Volume
[1,]     16.83508
[2,]     29.51363
> cat("--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'\n")
--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'
> xpredict2 <- cbind(xpredict[,1], xpredict[,2])
> colnames(xpredict2) <- c("none.such", "joe")
> cat("10a predict(a, xpredict2)\n")
10a predict(a, xpredict2)
> printh(predict(a, xpredict2, trace=1), expect.warning=TRUE)
===predict(a, xpredict2, trace = 1)  expect warning -->get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: none.such joe
    New names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 
     trees$Volume
[1,]     16.83508
[2,]     29.51363
> cat("--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'\n")
--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'
> xpredict2 <- cbind(xpredict[,1], xpredict[,2])
> colnames(xpredict2) <- c("Height", "Girth") # reversed
> cat("10b predict(a, xpredict2)\n")
10b predict(a, xpredict2)
> printh(predict(a, xpredict2, trace=1), expect.warning=TRUE)
===predict(a, xpredict2, trace = 1)  expect warning -->get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    80     10
[2,]    90     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1          64           0            0
[2,]           1          74           0            0
predict.earth: returning earth predictions 
     trees$Volume
[1,]     511.5992
[2,]     585.6106
> 
> cat("--- test predict.earth with multiple response models-------------------\n")
--- test predict.earth with multiple response models-------------------
> 
> a <- earth(cbind(Volume, Volume + 100) ~ ., data = trees)
> cat("1a predict(a, c(10,80))\n")
1a predict(a, c(10,80))
> printh(predict(a, c(10,80), trace=1))
===predict(a, c(10, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
predict.earth: returning earth predictions 
       Volume       y2
[1,] 16.83508 116.8351
> cat("1b predict(a, c(10,10,80,80))\n")
1b predict(a, c(10,10,80,80))
> printh(predict(a, c(10,10,80,80), trace=1))
===predict(a, c(10, 10, 80, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    10     80
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           6            5
predict.earth: returning earth predictions 

       Volume       y2
[1,] 16.83508 116.8351
[2,] 16.83508 116.8351
> cat("1c predict(a, c(10,11,80,81))\n")
1c predict(a, c(10,11,80,81))
> printh(predict(a, c(10,11,80,81), trace=1))
===predict(a, c(10, 11, 80, 81), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    11     81
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    11     81
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           5            6
predict.earth: returning earth predictions 

       Volume       y2
[1,] 16.83508 116.8351
[2,] 21.23791 121.2379
> cat("2 predict(a)\n")
2 predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

        Volume       y2
[1,]  7.752710 107.7527
[2,]  8.928323 108.9283
[3,]  9.712065 109.7121
[4,] 16.373874 116.3739
[5,] 20.062292 120.0623
[6,] 21.422389 121.4224
> cat("3a predict(a, matrix(c(10,12), nrow=1, ncol=2))\n")
3a predict(a, matrix(c(10,12), nrow=1, ncol=2))
> printh(predict(a, matrix(c(10,12), nrow=1, ncol=2), trace=1))
===predict(a, matrix(c(10, 12), nrow = 1, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            0
predict.earth: returning earth predictions 
       Volume       y2
[1,] 14.41452 114.4145
> cat("3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)\n")
3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)
> printh(predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE), trace=1))
===predict(a, matrix(c(10, 12), nrow = 2, ncol = 2, byrow = TRUE),     trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
2    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
2    10     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            0
[2,]           1           0           6            0
predict.earth: returning earth predictions 

       Volume       y2
[1,] 14.41452 114.4145
[2,] 14.41452 114.4145
> cat("3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))\n")
3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> colnames(xpredict) <- c("Girth", "Height")
> cat("4 predict(a, xpredict with colnames)\n")
4 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> cat("5 predict(a, as.data.frame(xpredict with colnames))\n")
5 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> # reverse dataframe columns (and their names), predict should deal with it correctly
> xpredict <- as.data.frame(cbind(xpredict[,2], xpredict[,1]))
> colnames(xpredict) <- c("Height", "Girth")
> cat("6 predict(a, xpredict with reversed columns and colnames)\n")
6 predict(a, xpredict with reversed columns and colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

       Volume       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> 
> # repeat but with x,y (not formula) call to earth
> 
> x1 <- cbind(trees$Girth, trees$Height)
> colnames(x1) <- c("Girth", "Height")
> a <- earth(x1, cbind(trees$Volume, trees$Volume+100))
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> cat("7a predict(a)\n")
7a predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

            y1       y2
[1,]  7.752710 107.7527
[2,]  8.928323 108.9283
[3,]  9.712065 109.7121
[4,] 16.373874 116.3739
[5,] 20.062292 120.0623
[6,] 21.422389 121.4224
> cat("7b predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)\n")
7b predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

           y1       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> colnames(xpredict) <- c("Girth", "Height")
> cat("8 predict(a, xpredict with colnames)\n")
8 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

           y1       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> cat("9 predict(a, as.data.frame(xpredict with colnames))\n")
9 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 

           y1       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> cat("--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'\n")
--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'
> xpredict <- as.data.frame(cbind(xpredict[,2], xpredict[,1]))
> colnames(xpredict) <- c("Height", "Girth")
> cat("10 predict(a, xpredict)\n")
10 predict(a, xpredict)
> printh(predict(a, xpredict, trace=1), expect.warning=TRUE)
===predict(a, xpredict, trace = 1)  expect warning -->get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-16), 3=h(16-Girth), 4=h(Height-75)
Contents of bx are
     (Intercept) h(Girth-16) h(16-Girth) h(Height-75)
[1,]           1           0           6            5
[2,]           1           0           4           15
predict.earth: returning earth predictions 
           y1       y2
[1,] 16.83508 116.8351
[2,] 29.51363 129.5136
> 
> cat("--- earth.predict with NAs, with formula interface ---\n")
--- earth.predict with NAs, with formula interface ---
> 
> predict.with.message <- function(message, earth.model, newdata) {
+     cat("predict.earth  ", message, ":\n", sep="")
+     print(predict(earth.model, newdata=newdata, trace=1))
+     cat("\n")
+ }
> 
> iris.earth <- earth(Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length, data=iris)
> x <- iris[1,]
> predict.with.message("formula interface and vector", iris.earth, newdata=x)
predict.earth  formula interface and vector:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
predict.earth: bx is a 1 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2270632

> x$Sepal.Width <- as.numeric(NA)
> predict.with.message("formula interface and vector with NA", iris.earth, newdata=x)
predict.earth  formula interface and vector with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1          NA          1.4         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1          NA          1.4
predict.earth: bx is a 1 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                 NA
predict.earth: returning earth predictions 
     Petal.Width
[1,]          NA

> x <- iris[1,]
> x$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("formula interface and vector with NA in unused variable", iris.earth, newdata=x)
predict.earth  formula interface and vector with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4          NA  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
predict.earth: bx is a 1 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2270632

> 
> x <- iris[1:3,]
> predict.with.message("formula interface and matrix", iris.earth, newdata=x)
predict.earth  formula interface and matrix:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
2          4.9         3.0          1.4
3          4.7         3.2          1.3
predict.earth: bx is a 3 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
[2,]           1                 4.3                 1.9                   0
[3,]           1                 4.4                 2.1                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
[2,]                   0                0.3
[3,]                   0                0.5
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2270632
[2,]   0.1537196
[3,]   0.1743141

> x[2,]$Sepal.Width <- as.numeric(NA)
> predict.with.message("formula interface and matrix with NA", iris.earth, newdata=x)
predict.earth  formula interface and matrix with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9          NA          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
2          4.9          NA          1.4
3          4.7         3.2          1.3
predict.earth: bx is a 3 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
[2,]           1                 4.3                 1.9                   0
[3,]           1                 4.4                 2.1                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
[2,]                   0                 NA
[3,]                   0                0.5
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2270632
[2,]          NA
[3,]   0.1743141

> x <- iris[1:3,]
> x[2,]$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("formula interface and matrix with NA in unused variable", iris.earth, newdata=x)
predict.earth  formula interface and matrix with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4          NA  setosa
3          4.7         3.2          1.3         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
2          4.9         3.0          1.4
3          4.7         3.2          1.3
predict.earth: bx is a 3 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
[2,]           1                 4.3                 1.9                   0
[3,]           1                 4.4                 2.1                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
[2,]                   0                0.3
[3,]                   0                0.5
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2270632
[2,]   0.1537196
[3,]   0.1743141

> 
> cat("--- earth.predict with NAs, with matrix interface ---\n")
--- earth.predict with NAs, with matrix interface ---
> 
> iris.earth <- earth(iris[,1:3], iris[,4])
> x <- iris[1,]
> predict.with.message("default interface and vector", iris.earth, newdata=x)
predict.earth  default interface and vector:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
predict.earth: bx is a 1 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2270632

> x$Sepal.Width <- as.numeric(NA)
> predict.with.message("default interface and vector with NA", iris.earth, newdata=x)
predict.earth  default interface and vector with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1          NA          1.4         0.2  setosa
predict.earth: bx is a 1 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                 NA
predict.earth: returning earth predictions 
     iris[,4]
[1,]       NA

> x <- iris[1,]
> x$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("default interface and vector with NA in unused variable", iris.earth, newdata=x)
predict.earth  default interface and vector with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4          NA  setosa
predict.earth: bx is a 1 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2270632

> 
> x <- iris[1:3,]
> predict.with.message("default interface and matrix", iris.earth, newdata=x)
predict.earth  default interface and matrix:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
predict.earth: bx is a 3 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
[2,]           1                 4.3                 1.9                   0
[3,]           1                 4.4                 2.1                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
[2,]                   0                0.3
[3,]                   0                0.5
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2270632
[2,] 0.1537196
[3,] 0.1743141

> x[2,]$Sepal.Width <- as.numeric(NA)
> predict.with.message("default interface and matrix with NA", iris.earth, newdata=x)
predict.earth  default interface and matrix with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9          NA          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
predict.earth: bx is a 3 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
[2,]           1                 4.3                 1.9                   0
[3,]           1                 4.4                 2.1                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
[2,]                   0                 NA
[3,]                   0                0.5
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2270632
[2,]        NA
[3,] 0.1743141

> x <- iris[1:3,]
> x[2,]$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("default interface and matrix with NA in unused variable", iris.earth, newdata=x)
predict.earth  default interface and matrix with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4          NA  setosa
3          4.7         3.2          1.3         0.2  setosa
predict.earth: bx is a 3 by 6 matrix: 1=(Intercept), 2=h(5.7-Petal.Length), 3=h(6.8-Sepal.Length), 4=h(Petal.Length-4.4), 5=h(Petal.Length-5.2), 6=h(Sepal.Width-2.7)
Contents of bx are
     (Intercept) h(5.7-Petal.Length) h(6.8-Sepal.Length) h(Petal.Length-4.4)
[1,]           1                 4.3                 1.7                   0
[2,]           1                 4.3                 1.9                   0
[3,]           1                 4.4                 2.1                   0
     h(Petal.Length-5.2) h(Sepal.Width-2.7)
[1,]                   0                0.8
[2,]                   0                0.3
[3,]                   0                0.5
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2270632
[2,] 0.1537196
[3,] 0.1743141

> 
> cat("--- test reorder.earth ----------------------\n")
--- test reorder.earth ----------------------
> a <- earth(O3 ~ ., data = ozone1, degree = 2)
> earth:::reorder.earth(a, decomp = "none")
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
> earth:::reorder.earth(a)   # defaults to decomp = "anova"
 [1]  1  2 11  8  4  3  9  5  6  7 10 12
> a$selected.terms[earth:::reorder.earth(a)]
 [1]  1  2 19 13  7  6 14  9 10 11 17 20
> 
> cat("--- test model building capabilities ----------------------\n")
--- test model building capabilities ----------------------
> itest <- 0
> N <- 100
> set.seed(1)
> x1 <- runif(N, -1, 1)
> x2 <- runif(N, -1, 1)
> x3 <- runif(N, -1, 1)
> x4 <- runif(N, -1, 1)
> x5 <- runif(N, -1, 1)
> x6 <- runif(N, -1, 1)
> x7 <- runif(N, -1, 1)
> x8 <- runif(N, -1, 1)
> x9 <- runif(N, -1, 1)
> x10 <- runif(N, -1, 1)
> 
> make.func <- function(
+     obj      = stop("no 'obj' arg"),
+     digits   = 14,
+     use.names = TRUE,   # use predictor names, else "x[,1]" etc
+     ...)                # extra args passed onto format
+ {
+     s <- paste(
+         "function(x)\n",
+         "{\n",
+         "if(is.vector(x))\n",
+         "  x <- matrix(x, nrow=1, ncol=length(x))\n",
+         "with(as.data.frame(x),\n",
+         format(obj, digits=digits, use.names=use.names, style="p", ...),
+         ")\n",
+         "}\n", sep="")
+ 
+     eval.parent(parse(text=s))
+ }
> 
> # this cross checks that RSq and GRSq claimed by
> # the model versus an independent calc of RSq and GRSq
> 
> test.model.rsq <- function(object, x, y, MarsFunc, nCases, nUsedTerms, penalty, RefFunc=NULL, ...)
+ {
+     y1 <- RefFunc(x, ...)
+     rss <- sum((y1 - MarsFunc(x))^2)
+     rss.null <- sum((y - mean(y))^2)
+     gcv.null <- earth:::get.gcv(rss.null, 1, penalty, nCases)
+     gcv <- earth:::get.gcv(rss, nUsedTerms, penalty, nCases)
+     if(is.finite(object$rsq))
+         if(!isTRUE(all.equal(object$rsq, 1 - rss/rss.null)))
+             cat("\nWarning: RSq mismatch object$rsq", object$rsq, "calculated RSq", 1 - rss/rss.null)
+         else if(!isTRUE(all.equal(object$grsq, 1 - gcv/gcv.null)))
+             cat("\nWarning GRSq mismatch object$grsq", object$grsq, "calculated GRSq", 1 - gcv/gcv.null)
+ }
> 
> # this uses the global matrix data.global (data.global[,1] is the response)
> 
> test.earth <- function(itest, func, degree=2, nk=51, plotit=PLOT,
+                        test.rsq=TRUE, trace=0, linpreds=FALSE,
+                        pmethod="backward", nprune=NULL)
+ {
+     cat("itest", sprintf("%-3d", itest), sprintf("%-32s", deparse(substitute(func))),
+         "degree", sprintf("%-2d", degree), "nk", sprintf("%-3g", nk), "pmethod", pmethod)
+     if(trace)
+         cat("\n")
+     gc()
+     earthTime <- system.time(fite <- earth(data.global[,-1], data.global[,1],
+                                         degree=degree, trace=trace, nk=nk,
+                                         pmethod=pmethod, linpreds=linpreds,
+                                         nprune=nprune))
+     funca <- make.func(fite)
+     nCases <- nrow(data.global)
+     penalty <- ifelse(degree>1,3,2)
+     nUsedTerms <- sum(fite$selected.terms!=0)
+     cat(" nTerms",  sprintf("%-2d", nUsedTerms), "of", sprintf("%-3d ", nrow(fite$dirs)))
+     if(PRINT.TIME)
+         cat(" time", earthTime[1], " ")
+     cat("GRSq", sprintf("%4.2g", fite$grsq))
+     caption <- paste("itest ", itest, ": ", deparse(substitute(func)),
+                         " degree=", degree, " nk=", nk,
+                         if(pmethod!="backward") paste("pmethod", pmethod) else "", sep="")
+     if(test.rsq)
+         test.model.rsq(fite, x=data.global[,-1, drop=FALSE], y=data.global[,1], MarsFunc=funca,
+             nCases=nCases, nUsedTerms=nUsedTerms, penalty=penalty, RefFunc=func)
+     # TODO add printh(evimp(fite))
+     if(plotit) {
+         plotmo(fite, func=func, caption=caption)
+         plot(fite, npoints=500, caption=caption)
+     }
+     cat("\n")
+     fite
+ }
> 
> ozone.test <- function(itest, sModel, x, y, degree=2, nk=51,
+                     plotit=PLOT, trace=0, col.loess="lightblue")
+ {
+     fite <- earth(x, y, degree=degree, nk=nk, trace=trace)
+     fitm <- mars(x, y, degree=degree, nk=nk)
+ 
+     cat("itest",
+         sprintf("%-3d", itest),
+         sprintf("%-32s", sModel),
+         "degree", sprintf("%-2d", degree), "nk", sprintf("%-3g", nk),
+         "nTerms",  sprintf("%-2d", sum(fite$selected.terms != 0)),
+         "of", sprintf("%-3d", nrow(fite$dirs)),
+         "GRSq", sprintf("%4.2g", fite$grsq),
+         "GRSq ratio", fite$grsq/mars.to.earth(fitm)$grsq,
+         "\n")
+     caption <- paste("itest ", itest, ": ", sModel, " degree=", degree, " nk=", nk, sep="")
+     printh(summary(fite))
+     printh(summary(fite, style="bf"))
+     if(plotit) {
+         fitme <- mars.to.earth(fitm)
+         plotmo(fite, caption=paste("EARTH", caption))
+         plotmo(fitme, caption=paste("MARS", caption))
+         plot(fite, npoints=500, col.loess=col.loess, caption=paste("EARTH", caption))
+         plot(fitme, caption=paste("MARS", caption))
+         fitme <- update(fitme)  # generate model selection data
+         plot.earth.models(list(fite, fitme), caption=paste(itest, ": Compare earth to mars ", sModel, sep=""))
+     }
+     fite
+ }
> 
> funcNoise <- function(x)    # noise
+ {
+     set.seed(ncol(x))
+     rnorm(length(x))
+ }
> x <- cbind(x1)
> data.global <- cbind(funcNoise(x), x1)
> # plotit=FALSE because there is only an intercept
> itest <- itest+1; test.earth(itest, funcNoise, nk=5,  degree=1, plotit=FALSE, test.rsq=FALSE)
itest 1   funcNoise                        degree 1  nk 5   pmethod backward nTerms 1  of 4   GRSq    0
Selected 1 of 4 terms, and 0 of 1 predictors 
Termination condition: Reached nk 5
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> itest <- itest+1; test.earth(itest, funcNoise, nk=5,  degree=2, plotit=FALSE, test.rsq=FALSE)
itest 2   funcNoise                        degree 2  nk 5   pmethod backward nTerms 1  of 4   GRSq    0
Selected 1 of 4 terms, and 0 of 1 predictors 
Termination condition: Reached nk 5
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> itest <- itest+1; test.earth(itest, funcNoise, nk=51, degree=1, plotit=FALSE, test.rsq=FALSE)
itest 3   funcNoise                        degree 1  nk 51  pmethod backward nTerms 1  of 7   GRSq    0
Selected 1 of 7 terms, and 0 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 7 terms
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> itest <- itest+1; a <- test.earth(itest, funcNoise, nk=51, degree=2, plotit=FALSE, test.rsq=FALSE)
itest 4   funcNoise                        degree 2  nk 51  pmethod backward nTerms 1  of 7   GRSq    0
> printh(summary(a, fixed.point=FALSE)) # check that print summary works with intercept only model
===summary(a, fixed.point = FALSE) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

            coefficients
(Intercept)    0.1088874

Selected 1 of 7 terms, and 0 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 7 terms
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> printh(summary(a, fixed.point=FALSE, style="bf")) # ditto
===summary(a, fixed.point = FALSE, style = "bf") 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

data.global[,1] =
  0.1088874


Selected 1 of 7 terms, and 0 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 7 terms
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> printh(summary(a, details=1, fixed.point=FALSE))
===summary(a, details = 1, fixed.point = FALSE) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

            coefficients
(Intercept)    0.1088874

Number of cases: 100
Selected 1 of 7 terms, and 0 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 7 terms
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> 
> func1 <- function(x)
+ {
+     sin(3 * x[,1]) + x[,2]
+ }
> x.global <- cbind(                    x1, x2)
> data.global <- cbind(func1(x.global), x1, x2)
> itest <- itest+1; test.earth(itest, func1, nk=5,  degree=1)
itest 5   func1                            degree 1  nk 5   pmethod backward nTerms 5  of 5   GRSq 0.85
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 5 terms, and 2 of 2 predictors 
Termination condition: Reached nk 5
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.1291596    RSS 10.69571    GRSq 0.8475579    RSq 0.8711996
> itest <- itest+1; test.earth(itest, func1, nk=5,  degree=2, trace=1.5)
itest 6   func1                            degree 2  nk 5   pmethod backward
x is a 100 by 2 matrix: 1=x1, 2=x2
y is a 100 by 1 matrix: 1=data.global[,1]
malloc      8  B: nUses			*pnPreds 2 sizeof(int)
malloc     20  B: nFactorsInTerm	nMaxTerms 5 sizeof(int) 4
calloc      4  B: iDirs			nMaxTerms 5 nPreds 2 sizeof(int) 4
malloc     20  B: BoolFullSet		nMaxTerms 5 sizeof(bool) 4
malloc    800  B: xOrder		nRows 100 nCols 2 sizeof(int) 4
malloc    400  B: BetaCacheGlobal	nMaxTerms 5 nMaxTerms 5 nPreds 2 sizeof(double) 8
malloc      4 kB: bxOrth		nCases 100 nMaxTerms 5  sizeof(double) 8
malloc      4 kB: bxOrthCenteredT	nMaxTerms 5 nCases 100  sizeof(double) 8
malloc     40  B: bxOrthMean		nMaxTerms 5 nResp 1  sizeof(double) 8
malloc      8  B: yMean			nResp 1 sizeof(double) 8
malloc    800  B: Weights		nCases 100 sizeof(double) 8
Forward pass term 1
malloc    160  B: Q			nMaxTerms 5 sizeof(tQueue) 32
malloc    160  B: SortedQ		nMaxTerms 5 sizeof(tQueue) 32
malloc    800  B: xbx			nCases 100 sizeof(double) 8
malloc     40  B: CovSx			nMaxTerms 5 sizeof(double) 8
calloc      8  B: CovCol		nMaxTerms 5 sizeof(double) 8
calloc      8  B: ycbpSum		nMaxTerms 5 nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
Forward pass term 2
malloc    800  B: xbx			nCases 100 sizeof(double) 8
malloc     40  B: CovSx			nMaxTerms 5 sizeof(double) 8
calloc      8  B: CovCol		nMaxTerms 5 sizeof(double) 8
calloc      8  B: ycbpSum		nMaxTerms 5 nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
Forward pass term 4

Reached nk 5
After forward pass GRSq 0.841 RSq 0.871
malloc     20  B: iPivots		nTerms 5 sizeof(int) 4
malloc      4 kB: xUsed			nCases 100 nUsedCols 5 sizeof(double) 8
malloc    800  B: Residuals		nCases 100 nResp 1 sizeof(double) 8
malloc     40  B: qraux			nUsedCols 5 sizeof(double) 8
malloc      4 kB: work			nCases 100 nUsedCols 5 sizeof(double) 8
Prune method "backward" penalty 3 nprune 5: selected 5 of 5 terms, and 2 of 2 predictors
After backward pass GRSq 0.841 RSq 0.871 
 nTerms 5  of 5   GRSq 0.84
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 5 terms, and 2 of 2 predictors 
Termination condition: Reached nk 5
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.1350297    RSS 10.69571    GRSq 0.8406296    RSq 0.8711996
> itest <- itest+1; test.earth(itest, func1, nk=51, degree=1)
itest 7   func1                            degree 1  nk 51  pmethod backward nTerms 9  of 9   GRSq    1
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 9 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.001284823    RSS 0.08851142    GRSq 0.9984836    RSq 0.9989341
> itest <- itest+1; test.earth(itest, func1, nk=51, degree=2)
itest 8   func1                            degree 2  nk 51  pmethod backward nTerms 9  of 9   GRSq    1
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 9 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.001418225    RSS 0.08851142    GRSq 0.9983261    RSq 0.9989341
> # test pmethod="exhaustive" with and without tracing
> itest <- itest+1; test.earth(itest, func1, trace=0, nk=51, degree=1, pmethod="exhaustive", nprune=5)
itest 9   func1                            degree 1  nk 51  pmethod exhaustive nTerms 5  of 9   GRSq 0.98
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.01909491    RSS 1.58125    GRSq 0.977463    RSq 0.9809582
> itest <- itest+1; test.earth(itest, func1, trace=2, nk=51, degree=1, pmethod="exhaust", nprune=5)
itest 10  func1                            degree 1  nk 51  pmethod exhaust
x is a 100 by 2 matrix: 1=x1, 2=x2
y is a 100 by 1 matrix: 1=data.global[,1]
Forward pass: minspan 4 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.5401 0.5765       0.5765    1           x1      0.7844  2   3   
4      0.8476 0.8712       0.2947    2           x2    -0.34245  4   5   
6      0.9351 0.9476      0.07636    1           x1    -0.57571  6       
8      0.9871 0.9900      0.04248    1           x1     0.46463  7       
10     0.9969 0.9977     0.007698    1           x1    -0.32185  8       
12     0.9985 0.9989     0.001196    1           x1     0.29412  9       
14     0.9990 0.9993    0.0003652    1           x1     0.64189  10      reject term

RSq changed by less than 0.001 at 13 terms (DeltaRSq 0.00037)
After forward pass GRSq 0.999 RSq 0.999
Forward pass complete: 13 terms (9 terms used)
Exhaustive pruning: number of subsets 381 (bx sing val ratio 0.0093)
Prune method "exhaustive" penalty 2 nprune 5: selected 5 of 9 terms, and 2 of 2 predictors
After backward pass GRSq 0.977 RSq 0.981 
 nTerms 5  of 9   GRSq 0.98
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.01909491    RSS 1.58125    GRSq 0.977463    RSq 0.9809582
> 
> func7 <- function(x)    # just one predictor
+ {
+     sin(5 * x[,1])
+ }
> x.global <- cbind(                    x1)
> data.global <- cbind(func7(x.global), x1)
> itest <- itest+1; test.earth(itest, func7, nk=5,  degree=1)
itest 11  func7                            degree 1  nk 5   pmethod backward nTerms 4  of 4   GRSq 0.74
Selected 4 of 4 terms, and 1 of 1 predictors 
Termination condition: Reached nk 5
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 0.1310144    RSS 11.33143    GRSq 0.7446662    RSq 0.7746779
> itest <- itest+1; test.earth(itest, func7, nk=5,  degree=2)
itest 12  func7                            degree 2  nk 5   pmethod backward nTerms 4  of 4   GRSq 0.74
Selected 4 of 4 terms, and 1 of 1 predictors 
Termination condition: Reached nk 5
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 0.1353451    RSS 11.33143    GRSq 0.736226    RSq 0.7746779
> itest <- itest+1; test.earth(itest, func7, nk=51, degree=1)
itest 13  func7                            degree 1  nk 51  pmethod backward nTerms 7  of 8   GRSq 0.99
Selected 7 of 8 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 8 terms
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 6 (additive model)
GCV 0.006676227    RSS 0.5053236    GRSq 0.9869887    RSq 0.9899518
> itest <- itest+1; test.earth(itest, func7, nk=51, degree=2)
itest 14  func7                            degree 2  nk 51  pmethod backward nTerms 7  of 8   GRSq 0.99
Selected 7 of 8 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 8 terms
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 6 (additive model)
GCV 0.007161616    RSS 0.5053236    GRSq 0.9860427    RSq 0.9899518
> 
> func8 <- function(x)
+ {
+     ret <- 0
+     for (i in 1:5)
+         ret <- ret + sin(2 * x[,i])
+     ret + x[,1]*cos(4 * x[,2]) + (x[,3]-2)* x[,4]
+ }
> 
> func8noise <- function(x)
+ {
+     set.seed(ncol(x))
+     func8(x) + rnorm(nrow(x),0,1)
+ }
> 
> x.global <- cbind(                    x1,  x2,  x3,  x4,  x5)
> data.global <- cbind(func8(x.global), x1,  x2,  x3,  x4,  x5)
> itest <- itest+1; test.earth(itest, func8, nk=11, degree=1)
itest 15  func8                            degree 1  nk 11  pmethod backward nTerms 10 of 11  GRSq  0.9
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Termination condition: Reached nk 11
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3046944    RSS 19.991    GRSq 0.8951578    RSq 0.9298164
> itest <- itest+1; test.earth(itest, func8, nk=11, degree=2)
itest 16  func8                            degree 2  nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Termination condition: Reached nk 11
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3415952    RSS 19.991    GRSq 0.8824607    RSq 0.9298164
> itest <- itest+1; test.earth(itest, func8, nk=11, degree=10)
itest 17  func8                            degree 10 nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Termination condition: Reached nk 11
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3415952    RSS 19.991    GRSq 0.8824607    RSq 0.9298164
> itest <- itest+1; test.earth(itest, func8, nk=51, degree=1)
itest 18  func8                            degree 1  nk 51  pmethod backward nTerms 13 of 19  GRSq 0.92
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 13 of 19 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 19 terms
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.2267696    RSS 12.75579    GRSq 0.921971    RSq 0.9552175
> itest <- itest+1; test.earth(itest, func8, nk=51, degree=2)
itest 19  func8                            degree 2  nk 51  pmethod backward nTerms 21 of 24  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 21 of 24 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 24 terms
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 6
GCV 0.05899539    RSS 1.416479    GRSq 0.9797003    RSq 0.9950271
> itest <- itest+1; test.earth(itest, func8, nk=51, degree=10)
itest 20  func8                            degree 10 nk 51  pmethod backward nTerms 21 of 24  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 21 of 24 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 24 terms
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 6
GCV 0.05899539    RSS 1.416479    GRSq 0.9797003    RSq 0.9950271
> itest <- itest+1; test.earth(itest, func8noise, nk=11, degree=1,  test.rsq=FALSE)
itest 21  func8noise                       degree 1  nk 11  pmethod backward nTerms 10 of 11  GRSq  0.9
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Termination condition: Reached nk 11
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3046944    RSS 19.991    GRSq 0.8951578    RSq 0.9298164
> itest <- itest+1; test.earth(itest, func8noise, nk=11, degree=2,  test.rsq=FALSE)
itest 22  func8noise                       degree 2  nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Termination condition: Reached nk 11
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3415952    RSS 19.991    GRSq 0.8824607    RSq 0.9298164
> itest <- itest+1; test.earth(itest, func8noise, nk=11, degree=10, test.rsq=FALSE)
itest 23  func8noise                       degree 10 nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Termination condition: Reached nk 11
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3415952    RSS 19.991    GRSq 0.8824607    RSq 0.9298164
> itest <- itest+1; test.earth(itest, func8noise, nk=51, degree=1,  test.rsq=FALSE)
itest 24  func8noise                       degree 1  nk 51  pmethod backward nTerms 13 of 19  GRSq 0.92
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 13 of 19 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 19 terms
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.2267696    RSS 12.75579    GRSq 0.921971    RSq 0.9552175
> itest <- itest+1; test.earth(itest, func8noise, nk=51, degree=2,  test.rsq=FALSE)
itest 25  func8noise                       degree 2  nk 51  pmethod backward nTerms 21 of 24  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 21 of 24 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 24 terms
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 6
GCV 0.05899539    RSS 1.416479    GRSq 0.9797003    RSq 0.9950271
> 
> itest <- itest+1; test.earth(itest, func8noise, nk=51, degree=10, test.rsq=FALSE)
itest 26  func8noise                       degree 10 nk 51  pmethod backward nTerms 21 of 24  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 21 of 24 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 24 terms
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 6
GCV 0.05899539    RSS 1.416479    GRSq 0.9797003    RSq 0.9950271
> 
> eqn56 <- function(x) # Friedman MARS paper equation 56
+ {
+     0.1 * exp(4*x[,1]) +
+     4 / (1 + exp(-20*(x[,2]-0.5))) +
+     3 * x[,3] +
+     2 * x[,4] +
+     x[,5]
+ }
> 
> neg.eqn56 <- function(x)
+ {
+     -eqn56(x)
+ }
> 
> eqn56noise <- function(x)
+ {
+     set.seed(ncol(x))
+     eqn56(x) + rnorm(nrow(x),0,1)
+ }
> 
> neg.eqn56noise <- function(x)
+ {
+     -eqn56noise(x)
+ }
> 
> x.global <- cbind(                    x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> data.global <- cbind(eqn56(x.global), x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> itest <- itest+1; test.earth(itest, eqn56, nk=11, degree=1)
itest 27  eqn56                            degree 1  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.96
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Termination condition: Reached nk 11
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3367594    RSS 21.01716    GRSq 0.9600263    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56, nk=11, degree=2)
itest 28  eqn56                            degree 2  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Termination condition: Reached nk 11
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56, nk=11, degree=10)
itest 29  eqn56                            degree 10 nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Termination condition: Reached nk 11
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56, nk=51, degree=1)
itest 30  eqn56                            degree 1  nk 51  pmethod backward nTerms 13 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 14 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 14 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.03504535    RSS 1.971301    GRSq 0.9958401    RSq 0.9976125
> itest <- itest+1; test.earth(itest, eqn56, nk=51, degree=2)
itest 31  eqn56                            degree 2  nk 51  pmethod backward nTerms 13 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 14 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 14 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.04140519    RSS 1.971301    GRSq 0.9950852    RSq 0.9976125
> itest <- itest+1; test.earth(itest, eqn56, nk=51, degree=10)
itest 32  eqn56                            degree 10 nk 51  pmethod backward nTerms 13 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 14 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 14 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.04140519    RSS 1.971301    GRSq 0.9950852    RSq 0.9976125
> itest <- itest+1; test.earth(itest, eqn56noise, nk=11, degree=1,  test.rsq=FALSE)
itest 33  eqn56noise                       degree 1  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.96
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Termination condition: Reached nk 11
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3367594    RSS 21.01716    GRSq 0.9600263    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56noise, nk=11, degree=2,  test.rsq=FALSE)
itest 34  eqn56noise                       degree 2  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Termination condition: Reached nk 11
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56noise, nk=11, degree=10, test.rsq=FALSE)
itest 35  eqn56noise                       degree 10 nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Termination condition: Reached nk 11
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56noise, nk=51, degree=1,  test.rsq=FALSE)
itest 36  eqn56noise                       degree 1  nk 51  pmethod backward nTerms 13 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 14 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 14 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.03504535    RSS 1.971301    GRSq 0.9958401    RSq 0.9976125
> itest <- itest+1; test.earth(itest, eqn56noise, nk=51, degree=2,  test.rsq=FALSE)
itest 37  eqn56noise                       degree 2  nk 51  pmethod backward nTerms 13 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 14 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 14 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.04140519    RSS 1.971301    GRSq 0.9950852    RSq 0.9976125
> itest <- itest+1; test.earth(itest, eqn56noise, nk=51, degree=10, test.rsq=FALSE)
itest 38  eqn56noise                       degree 10 nk 51  pmethod backward nTerms 13 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 14 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 14 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.04140519    RSS 1.971301    GRSq 0.9950852    RSq 0.9976125
> 
> robotArm <- function(x) # Friedman Fast MARS paper
+ {
+     l1     <- x[,1]
+     l2     <- x[,2]
+     theta1 <- x[,3]
+     theta2 <- x[,4]
+     phi    <- x[,5]
+ 
+     x1 <- l1 * cos(theta1) - l2 * cos(theta1 + theta2) * cos(phi)
+     y <-  l1 * sin(theta1) - l2 * sin(theta1 + theta2) * cos(phi)
+     z <-  l2 *  sin(theta2) * sin(phi)
+ 
+     sqrt(x1^2 + y^2 + z^2)
+ }
> N1 <- 100
> set.seed(1)
> x1. <- runif(N1, -1, 1)
> x2. <- runif(N1, -1, 1)
> x3. <- runif(N1, -1, 1)
> x4. <- runif(N1, -1, 1)
> x5. <- runif(N1, -1, 1)
> 
> x.global <- cbind(                       (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> data.global <- cbind(robotArm(x.global), (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> colnames(x.global) <- c("l1", "l2", "theta1", "theta2", "phi")
> colnames(data.global) <- c("arm", "l1", "l2", "theta1", "theta2", "phi")
> itest <- itest+1; test.earth(itest, robotArm, nk=51, degree=1)
itest 39  robotArm                         degree 1  nk 51  pmethod backward nTerms 11 of 20  GRSq 0.79
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 20 terms, and 4 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 20 terms
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.03994022    RSS 2.492669    GRSq 0.7862215    RSq 0.8638719
> itest <- itest+1; a87 <- test.earth(itest, robotArm, nk=51, degree=10)
itest 40  robotArm                         degree 10 nk 51  pmethod backward nTerms 19 of 38  GRSq 0.84
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


> printh(summary(a87))
===summary(a87) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

                                                      coefficients
(Intercept)                                               3.499823
h(0.876269-l1)                                           -0.582885
h(l1-0.876269)                                            4.944521
h(theta2-1.44806)                                        -0.489292
h(theta2-2.69997)                                        -0.330241
h(4.17592-theta2)                                        -0.756201
h(theta2-4.17592)                                         0.342333
h(0.332395-l1) * h(1.1053-l2)                             4.693203
h(l1-0.497699) * h(1.1053-l2)                            -2.838463
h(0.876269-l1) * h(1.40308-l2)                           -2.130798
h(0.876269-l1) * h(theta2-2.94839)                        0.393199
h(0.876269-l1) * h(2.94839-theta2)                        0.476919
h(0.876269-l1) * h(theta2-5.25734)                       -0.577624
h(l2-1.1053) * h(phi-0.046284)                           -0.848180
h(theta2-1.44806) * h(phi-1.3211)                        -3.022474
h(4.17592-theta2) * h(phi-1.09785)                        0.150648
h(0.876269-l1) * h(l2-1.38062) * h(theta2-2.94839)       39.508439
h(1.1053-l2) * h(theta2-4.78874) * h(phi-1.3211)         71.271912
h(3.21045-theta1) * h(theta2-1.44806) * h(phi-1.3211)     0.705762

Selected 19 of 38 terms, and 5 of 5 predictors 
Termination condition: GRSq -10 at 38 terms
Importance: theta2, l1, l2, phi, theta1
Number of terms at each degree of interaction: 1 6 9 3
GCV 0.0290417    RSS 0.8468559    GRSq 0.8445554    RSq 0.953752
> printh(summary(a87, style="bf"))
===summary(a87, style = "bf") 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

data.global[,1] =
  3.499823
  -  0.5828854 * bf1
  +   4.944521 * bf2
  -  0.4892924 * bf3
  -  0.3302408 * bf4
  -  0.7562007 * bf5
  +  0.3423329 * bf6
  +   4.693203 * bf7 * bf8
  -   2.838463 * bf9 * bf8
  -   2.130798 * bf1 * bf10
  +  0.3931991 * bf1 * bf11
  +  0.4769189 * bf1 * bf12
  -   0.577624 * bf1 * bf13
  -  0.8481796 * bf14 * bf15
  -   3.022474 * bf3 * bf16
  +   0.150648 * bf5 * bf17
  +   39.50844 * bf1 * bf18 * bf11
  +   71.27191 * bf8 * bf19 * bf16
  +  0.7057621 * bf20 * bf3 * bf16

   bf1  h(0.876269-l1)
   bf2  h(l1-0.876269)
   bf3  h(theta2-1.44806)
   bf4  h(theta2-2.69997)
   bf5  h(4.17592-theta2)
   bf6  h(theta2-4.17592)
   bf7  h(0.332395-l1)
   bf8  h(1.1053-l2)
   bf9  h(l1-0.497699)
  bf10  h(1.40308-l2)
  bf11  h(theta2-2.94839)
  bf12  h(2.94839-theta2)
  bf13  h(theta2-5.25734)
  bf14  h(l2-1.1053)
  bf15  h(phi-0.046284)
  bf16  h(phi-1.3211)
  bf17  h(phi-1.09785)
  bf18  h(l2-1.38062)
  bf19  h(theta2-4.78874)
  bf20  h(3.21045-theta1)

Selected 19 of 38 terms, and 5 of 5 predictors 
Termination condition: GRSq -10 at 38 terms
Importance: theta2, l1, l2, phi, theta1
Number of terms at each degree of interaction: 1 6 9 3
GCV 0.0290417    RSS 0.8468559    GRSq 0.8445554    RSq 0.953752
> itest <- itest+1; test.earth(itest, robotArm, nk=201, degree=1)
itest 41  robotArm                         degree 1  nk 201 pmethod backward nTerms 11 of 20  GRSq 0.79
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 20 terms, and 4 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 20 terms
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.03994022    RSS 2.492669    GRSq 0.7862215    RSq 0.8638719
> itest <- itest+1; a88 <- test.earth(itest, robotArm, nk=201, degree=10)
itest 42  robotArm                         degree 10 nk 201 pmethod backward nTerms 19 of 38  GRSq 0.84
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


> printh(summary(a88))
===summary(a88) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

                                                      coefficients
(Intercept)                                               3.499823
h(0.876269-l1)                                           -0.582885
h(l1-0.876269)                                            4.944521
h(theta2-1.44806)                                        -0.489292
h(theta2-2.69997)                                        -0.330241
h(4.17592-theta2)                                        -0.756201
h(theta2-4.17592)                                         0.342333
h(0.332395-l1) * h(1.1053-l2)                             4.693203
h(l1-0.497699) * h(1.1053-l2)                            -2.838463
h(0.876269-l1) * h(1.40308-l2)                           -2.130798
h(0.876269-l1) * h(theta2-2.94839)                        0.393199
h(0.876269-l1) * h(2.94839-theta2)                        0.476919
h(0.876269-l1) * h(theta2-5.25734)                       -0.577624
h(l2-1.1053) * h(phi-0.046284)                           -0.848180
h(theta2-1.44806) * h(phi-1.3211)                        -3.022474
h(4.17592-theta2) * h(phi-1.09785)                        0.150648
h(0.876269-l1) * h(l2-1.38062) * h(theta2-2.94839)       39.508439
h(1.1053-l2) * h(theta2-4.78874) * h(phi-1.3211)         71.271912
h(3.21045-theta1) * h(theta2-1.44806) * h(phi-1.3211)     0.705762

Selected 19 of 38 terms, and 5 of 5 predictors 
Termination condition: GRSq -10 at 38 terms
Importance: theta2, l1, l2, phi, theta1
Number of terms at each degree of interaction: 1 6 9 3
GCV 0.0290417    RSS 0.8468559    GRSq 0.8445554    RSq 0.953752
> printh(summary(a88, style="bf"))
===summary(a88, style = "bf") 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

data.global[,1] =
  3.499823
  -  0.5828854 * bf1
  +   4.944521 * bf2
  -  0.4892924 * bf3
  -  0.3302408 * bf4
  -  0.7562007 * bf5
  +  0.3423329 * bf6
  +   4.693203 * bf7 * bf8
  -   2.838463 * bf9 * bf8
  -   2.130798 * bf1 * bf10
  +  0.3931991 * bf1 * bf11
  +  0.4769189 * bf1 * bf12
  -   0.577624 * bf1 * bf13
  -  0.8481796 * bf14 * bf15
  -   3.022474 * bf3 * bf16
  +   0.150648 * bf5 * bf17
  +   39.50844 * bf1 * bf18 * bf11
  +   71.27191 * bf8 * bf19 * bf16
  +  0.7057621 * bf20 * bf3 * bf16

   bf1  h(0.876269-l1)
   bf2  h(l1-0.876269)
   bf3  h(theta2-1.44806)
   bf4  h(theta2-2.69997)
   bf5  h(4.17592-theta2)
   bf6  h(theta2-4.17592)
   bf7  h(0.332395-l1)
   bf8  h(1.1053-l2)
   bf9  h(l1-0.497699)
  bf10  h(1.40308-l2)
  bf11  h(theta2-2.94839)
  bf12  h(2.94839-theta2)
  bf13  h(theta2-5.25734)
  bf14  h(l2-1.1053)
  bf15  h(phi-0.046284)
  bf16  h(phi-1.3211)
  bf17  h(phi-1.09785)
  bf18  h(l2-1.38062)
  bf19  h(theta2-4.78874)
  bf20  h(3.21045-theta1)

Selected 19 of 38 terms, and 5 of 5 predictors 
Termination condition: GRSq -10 at 38 terms
Importance: theta2, l1, l2, phi, theta1
Number of terms at each degree of interaction: 1 6 9 3
GCV 0.0290417    RSS 0.8468559    GRSq 0.8445554    RSq 0.953752
> 
> cat("--- linear predictors -------------------------\n")
--- linear predictors -------------------------
> 
> # Build a linear-only earth model and an identical lm model to compare predict().
> # The somewhat strange args are to force the models to use the same predictors.
> itest <- itest+1; cat("itest", sprintf("%-3d", itest), "\n")
itest 43  
> a <- earth(O3 ~ . - vh, linpreds=TRUE, data = ozone1, pmethod="none", thresh=1e-10)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~.-vh, data=ozone1, linpreds=TRUE, 
      pmethod="none", thresh=1e-10)

            coefficients
(Intercept)   -9.2940941
wind          -0.0272423
humidity       0.0832655
temp           0.2649552
ibh           -0.0003230
dpg           -0.0026598
ibt            0.0235920
vis           -0.0077189
doy           -0.0093787

Selected 9 of 9 terms, and 8 of 8 predictors 
Termination condition: RSq changed by less than 1e-10 at 9 terms
Importance: temp, humidity, ibh, ibt, doy, vis, dpg, wind
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 21.32277    RSS 6330.213    GRSq 0.6687758    RSq 0.7002088
> alin <- lm(O3 ~ . - vh, data = ozone1)
> printh(summary(alin))
===summary(alin) 

Call:
lm(formula = O3 ~ . - vh, data = ozone1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.0077  -2.8663  -0.2215   2.7642  13.4535 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -9.2940941  1.9968503  -4.654 4.76e-06 ***
wind        -0.0272423  0.1320735  -0.206 0.836714    
humidity     0.0832655  0.0187013   4.452 1.17e-05 ***
temp         0.2649552  0.0486640   5.445 1.03e-07 ***
ibh         -0.0003230  0.0002819  -1.146 0.252821    
dpg         -0.0026598  0.0112590  -0.236 0.813396    
ibt          0.0235920  0.0122064   1.933 0.054146 .  
vis         -0.0077189  0.0037406  -2.064 0.039865 *  
doy         -0.0093787  0.0027625  -3.395 0.000773 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 4.441 on 321 degrees of freedom
Multiple R-squared:  0.7002,	Adjusted R-squared:  0.6927 
F-statistic: 93.72 on 8 and 321 DF,  p-value: < 2.2e-16

> printh(summary(alin, style="bf"))
===summary(alin, style = "bf") 

Call:
lm(formula = O3 ~ . - vh, data = ozone1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.0077  -2.8663  -0.2215   2.7642  13.4535 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -9.2940941  1.9968503  -4.654 4.76e-06 ***
wind        -0.0272423  0.1320735  -0.206 0.836714    
humidity     0.0832655  0.0187013   4.452 1.17e-05 ***
temp         0.2649552  0.0486640   5.445 1.03e-07 ***
ibh         -0.0003230  0.0002819  -1.146 0.252821    
dpg         -0.0026598  0.0112590  -0.236 0.813396    
ibt          0.0235920  0.0122064   1.933 0.054146 .  
vis         -0.0077189  0.0037406  -2.064 0.039865 *  
doy         -0.0093787  0.0027625  -3.395 0.000773 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 4.441 on 321 degrees of freedom
Multiple R-squared:  0.7002,	Adjusted R-squared:  0.6927 
F-statistic: 93.72 on 8 and 321 DF,  p-value: < 2.2e-16

> stopifnot(all.equal(as.double(predict(a)), as.double(predict(alin))))
> newdata <- data.frame(
+         vh = c(5700,5701,5702),
+         wind = c(3,4,5),
+         humidity = c(30,40,50),
+         temp = c(31,42,53),
+         ibh = c(1000, 1000, 1000),
+         dpg = c(-10, 0, 10),
+         ibt = c(90, 80, 60),
+         vis = c(100, 110, 120),
+         doy= c(12, 34, 56))
> apred <- as.double(predict(a, newdata=newdata))
> alinpred <- as.double(predict(alin, newdata=newdata))
> stopifnot(all.equal(apred, alinpred))
> # printh(head(predict(a, type="terms")))
> printh(earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms))
===earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms) 
[1] 0 1 2 3 4 5 6 7 8
> 
> # test with mixed linear and standard predictors
> itest <- itest+1; cat("itest", sprintf("%-3d", itest), "\n")
itest 44  
> a <- earth(O3 ~ ., linpreds=c(3, 8), data = ozone1, degree=2, trace=4)  # 3,8 is humidity,vis
Call: earth(formula=O3~., data=ozone1, trace=4, linpreds=c(3, 
      8), degree=2)

x is a 330 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
       vh wind humidity temp  ibh dpg ibt vis doy
[1,] 5710    4       28   40 2693 -25  87 250  33
[2,] 5700    3       37   45  590 -24 128 100  34
[3,] 5760    3       51   54 1450  25 139  60  35
[4,] 5720    4       69   35 1568  15 121  60  36
[5,] 5790    6       19   45 2631 -33 123 100  37
[6,] 5790    3       25   55  554 -28 182 250  38

y is a 330 by 1 matrix: 1=O3
First few rows of y are
     O3
[1,]  3
[2,]  5
[3,]  5
[4,]  6
[5,]  4
[6,]  4

linear predictors 3=humidity 8=vis
Forward pass: minspan 6 endspan 10

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.6493 0.6599       0.6599    4         temp          58  2   3   
4      0.6903 0.7088      0.04898    5          ibh        1108  4   5   
6      0.7102 0.7361      0.02722    9          doy          92  6   7   
8      0.7332 0.7608      0.02475    3     humidity          19< 8       2   
10     0.7526 0.7852      0.02443    6          dpg          10  9   10  
12     0.7579 0.7967      0.01141    1           vh        5900  11  12  
14     0.7645 0.8055     0.008836    8          vis           0< 13      
16     0.7650 0.8124     0.006861    4         temp          72  14  15  6   
18     0.7676 0.8207     0.008326    7          ibt         254  16  17  2   
20     0.7701 0.8287     0.007986    2         wind           6  18  19  5   

Reached nk 21
After forward pass GRSq 0.770 RSq 0.829
Forward pass complete: 21 terms (19 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.6721  0.6771     0.6721      2  1 8
          3      0.6742  0.6840     0.0021      3  1 6 8
          4      0.6904  0.7044     0.0163      2  1 2 3 4
          5      0.7369  0.7527     0.0465      4  1 4 6 7 8
          6      0.7496  0.7683     0.0127      5  1 4 6 7 8 9
          7      0.7573  0.7789     0.0077      6  1 6 7 8 9 12 13
          8      0.7701  0.7939     0.0127      6  1 6 7 8 9 10 12 13
          9      0.7726  0.7994     0.0026      6  1 6 7 8 9 10 12 13 14
         10      0.7749  0.8047     0.0023      6  1 6 7 8 9 10 11 12 13 14
         11      0.7791  0.8114     0.0042      7  1 6 7 8 9 10 11 12 13 14 17
         12      0.7841  0.8187     0.0050      9  1 6 7 8 9 10 11 12 13 14 17 18
chosen   13      0.7871  0.8241     0.0030      9  1 4 6 7 8 9 10 11 12 13 14 17 18
         14      0.7856  0.8258    -0.0015      9  1 4 6 7 8 9 10 11 12 13 14 17 18 19
         15      0.7838  0.8274    -0.0017      9  1 4 6 7 8 9 10 11 12 13 14 16 17 18 19
         16      0.7808  0.8279    -0.0031      9  1 3 4 6 7 8 9 10 11 12 13 14 16 17 18 19
         17      0.7776  0.8284    -0.0032      9  1 2 3 4 6 7 8 9 10 11 12 13 14 16 17 18 19
         18      0.7739  0.8286    -0.0037      9  1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19
         19      0.7701  0.8287    -0.0039      9  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19

Prune method "backward" penalty 3 nprune 19: selected 13 of 19 terms, and 9 of 9 predictors
After backward pass GRSq 0.787 RSq 0.824 
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, trace=4, linpreds=c(3, 
      8), degree=2)

                        coefficients
(Intercept)               18.9058204
vis                       -0.0101686
h(5900-vh)                -0.0175752
h(vh-5900)                 0.2159743
h(ibh-1108)               -0.0004941
h(10-dpg)                 -0.0664524
h(dpg-10)                 -0.0765381
h(92-doy)                 -0.1400621
h(doy-92)                 -0.0228721
humidity * h(temp-58)      0.0096384
h(wind-6) * h(1108-ibh)   -0.0057870
h(temp-58) * h(254-ibt)   -0.0028685
h(temp-72) * h(doy-92)    -0.0037630

Selected 13 of 19 terms, and 9 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, doy, dpg, vh, vis, ibh, ibt, wind
Number of terms at each degree of interaction: 1 8 4
GCV 13.70782    RSS 3713.615    GRSq 0.7870651    RSq 0.8241277
> if (PLOT) {
+     plot(a, info=TRUE) # this also tests the info argument
+     plotmo(a)
+ }

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> printh(earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms))
===earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms) 
 [1] 0 2 3 2 4 5 6 6 6 6 7 9 9 9 9 9 9 9 9
> printh(earth:::get.nterms.per.degree(a))
===earth:::get.nterms.per.degree(a) 

0 1 2 
1 8 4 
> # printh(head(predict(a, type="terms")))
> 
> # this is a good example because it has linear preds in both 1 and 2 degree terms
> x.global <- cbind(                    x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> data.global <- cbind(eqn56(x.global), x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> itest <- itest+1; test.earth(itest, eqn56,     nk=21, degree=2, linpreds=c(3,5))
itest 45  eqn56                            degree 2  nk 21  pmethod backward nTerms 11 of 12  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 12 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 12 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.03612894    RSS 1.978421    GRSq 0.9957115    RSq 0.9976039
> # test linpreds specified by variable name, also check that "nonesuch" gives a warning
> itest <- itest+1; linpreds.x1x3x5 <- test.earth(itest, eqn56, nk=21, degree=2, linpreds=c("^x1$","x3","5","nonesuch"), plotit=FALSE)
itest 46  eqn56                            degree 2  nk 21  pmethod backwardWarning: "nonesuch" in linpreds does not match any names
 nTerms 9  of 17  GRSq 0.94
> cat('summary.earth with linpreds=c("^x1$","x3","5")\n')
summary.earth with linpreds=c("^x1$","x3","5")
> print(summary(linpreds.x1x3x5))
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

                    coefficients
(Intercept)           -0.0336631
x3                     3.0622447
x5                     1.0168236
h(x2-0.423488)        23.5585129
h(x2-0.55997)        -20.7885137
h(-0.296853-x4)       -1.9195940
h(x4- -0.296853)       1.8453975
x1 * h(x2-0.423488)    4.4670350
x1 * h(0.423488-x2)    1.7112902

Selected 9 of 17 terms, and 5 of 10 predictors 
Termination condition: Reached nk 21
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 6 2
GCV 0.5352806    RSS 33.40686    GRSq 0.9364617    RSq 0.9595406
> # linpreds with multiple matches
> itest <- itest+1; linpreds.x1x3x5 <- test.earth(itest, eqn56, nk=21, degree=2, linpreds="x", plotit=FALSE)
itest 47  eqn56                            degree 2  nk 21  pmethod backward nTerms 6  of 11  GRSq  0.8
> cat('summary.earth with linpreds="x"\n')
summary.earth with linpreds="x"
> print(summary(linpreds.x1x3x5))
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, linpreds=linpreds, 
      nprune=nprune)

            coefficients
(Intercept)    1.3838753
x1             1.7712389
x2             2.3110471
x3             3.0223422
x4             1.7132478
x5             0.8112365

Selected 6 of 11 terms, and 5 of 10 predictors 
Termination condition: Reached nk 21
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 5 (additive model)
GCV 1.724363    RSS 129.0212    GRSq 0.7953164    RSq 0.8437411
> # check symmetry by using negative of eqn56
> itest <- itest+1; data.global <- cbind(neg.eqn56(x.global), x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> test.earth(itest, neg.eqn56, nk=21, degree=2, linpreds=c(3,5))
itest 48  neg.eqn56                        degree 2  nk 21  pmethod backward nTerms 11 of 12  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 12 terms, and 5 of 10 predictors 
Termination condition: RSq changed by less than 0.001 at 12 terms
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.03612894    RSS 1.978421    GRSq 0.9957115    RSq 0.9976039
> 
> cat("--- tests with ozone data ----------------------\n")
--- tests with ozone data ----------------------
> 
> data(ozone1)
> attach(ozone1)
> 
> x.global <- cbind(wind, humidity, temp, vis)
> y <- doy
> itest <- itest+1; ozone.test(itest, "doy ~ wind+humidity+temp+vis", x.global, y, degree=1, nk=21)
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)

itest 49  doy ~ wind+humidity+temp+vis     degree 1  nk 21  nTerms 6  of 15  GRSq 0.18 GRSq ratio 1.090278 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

               coefficients
(Intercept)      136.172799
h(3-wind)         57.033717
h(31-humidity)     6.144438
h(humidity-31)     1.533683
h(49-temp)        -4.901395
h(temp-49)         1.136599

Selected 6 of 15 terms, and 3 of 4 predictors 
Termination condition: Reached nk 21
Importance: wind, temp, humidity, vis-unused
Number of terms at each degree of interaction: 1 5 (additive model)
GCV 8952.703    RSS 2760715    GRSq 0.1807212    RSq 0.2297684
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  136.1728
  +  57.03372 * bf1
  +  6.144438 * bf2
  +  1.533683 * bf3
  -  4.901395 * bf4
  +  1.136599 * bf5

   bf1  h(3-wind)
   bf2  h(31-humidity)
   bf3  h(humidity-31)
   bf4  h(49-temp)
   bf5  h(temp-49)

Selected 6 of 15 terms, and 3 of 4 predictors 
Termination condition: Reached nk 21
Importance: wind, temp, humidity, vis-unused
Number of terms at each degree of interaction: 1 5 (additive model)
GCV 8952.703    RSS 2760715    GRSq 0.1807212    RSq 0.2297684
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)


 grid:    wind humidity temp vis
             5       64   62 120


 grid:    wind humidity temp vis
             5       64   62 120

Selected 6 of 15 terms, and 3 of 4 predictors 
Termination condition: Reached nk 21
Importance: wind, temp, humidity, vis-unused
Number of terms at each degree of interaction: 1 5 (additive model)
GCV 8952.703    RSS 2760715    GRSq 0.1807212    RSq 0.2297684
> 
> x.global <- cbind(wind, humidity, temp, vis)
> y <- doy
> itest <- itest+1; a91 <- ozone.test(itest, "doy ~ wind+humidity+temp+vis", x.global, y, degree=2, nk=21)
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)

itest 50  doy ~ wind+humidity+temp+vis     degree 2  nk 21  nTerms 8  of 20  GRSq 0.21 GRSq ratio 1.168276 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

                            coefficients
(Intercept)                   137.577867
h(3-wind)                      55.667080
h(humidity-31)                  2.124574
h(31-humidity) * h(temp-63)     1.813722
h(31-humidity) * h(63-temp)     0.647897
h(humidity-51) * h(49-temp)    -0.549270
h(78-humidity) * h(49-temp)    -0.133548
h(humidity-78) * h(49-temp)     4.603648

Selected 8 of 20 terms, and 3 of 4 predictors 
Termination condition: Reached nk 21
Importance: wind, humidity, temp, vis-unused
Number of terms at each degree of interaction: 1 2 5
GCV 8580.56    RSS 2523003    GRSq 0.2147767    RSq 0.2960894
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  137.5779
  +   55.66708 * bf1
  +   2.124574 * bf2
  +   1.813722 * bf3 * bf4
  +  0.6478971 * bf3 * bf5
  -  0.5492703 * bf6 * bf7
  -  0.1335484 * bf8 * bf7
  +   4.603648 * bf9 * bf7

   bf1  h(3-wind)
   bf2  h(humidity-31)
   bf3  h(31-humidity)
   bf4  h(temp-63)
   bf5  h(63-temp)
   bf6  h(humidity-51)
   bf7  h(49-temp)
   bf8  h(78-humidity)
   bf9  h(humidity-78)

Selected 8 of 20 terms, and 3 of 4 predictors 
Termination condition: Reached nk 21
Importance: wind, humidity, temp, vis-unused
Number of terms at each degree of interaction: 1 2 5
GCV 8580.56    RSS 2523003    GRSq 0.2147767    RSq 0.2960894
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)


 grid:    wind humidity temp vis
             5       64   62 120


 grid:    wind humidity temp vis
             5       64   62 120

> 
> # this is a basic test of RegressAndFix (because this generates lin dep bx cols)
> 
> cat("--Expect warning from mda::mars: NAs introduced by coercion\n") # why do we get a warning?
--Expect warning from mda::mars: NAs introduced by coercion
> x.global <- cbind(wind, exp(humidity))
> y <- doy
> # col.loess is 0 else get loess errors
> itest <- itest+1; ozone.test(itest, "doy ~ wind+exp(humidity)", x.global, y, degree=1, nk=21, col.loess=0)
Warning in storage.mode(tagx) <- "integer" : NAs introduced by coercion
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)

itest 51  doy ~ wind+exp(humidity)         degree 1  nk 21  nTerms 3  of 7   GRSq  0.1 GRSq ratio 1.318534 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

            coefficients
(Intercept)    202.17924
h(3-wind)       50.04004
h(wind-9)      -61.15513

Selected 3 of 7 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 7 terms
Importance: wind, x2-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 9821.564    RSS 3143644    GRSq 0.1012101    RSq 0.1229323
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  202.1792
  + 50.04004 * bf1
  - 61.15513 * bf2

   bf1  h(3-wind)
   bf2  h(wind-9)

Selected 3 of 7 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 7 terms
Importance: wind, x2-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 9821.564    RSS 3143644    GRSq 0.1012101    RSq 0.1229323
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)


 grid:    wind           V2
             5 6.235149e+27


 grid:    wind           V2
             5 6.235149e+27

Selected 3 of 7 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 7 terms
Importance: wind, x2-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 9821.564    RSS 3143644    GRSq 0.1012101    RSq 0.1229323
> 
> x.global <- cbind(vh,wind,humidity,temp,ibh,dpg,ibt,vis,doy)
> y <- O3
> itest <- itest+1; ozone.test(itest, "O3~.", x.global, y, degree=2, nk=21)
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)

itest 52  O3~.                             degree 2  nk 21  nTerms 12 of 21  GRSq 0.79 GRSq ratio 1.015612 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  14.83528
  +    0.3300798 * bf1
  -   0.04505875 * bf2
  +   0.02205036 * bf3
  -    0.1319144 * bf4
  -   0.02340236 * bf5
  -   0.01902925 * bf6 * bf3
  -   0.02202266 * bf7 * bf1
  -   0.01955225 * bf1 * bf8
  +  0.004042437 * bf1 * bf9
  - 7.641677e-05 * bf10 * bf11
  -  0.001130729 * bf12 * bf13

   bf1  h(temp-58)
   bf2  h(234-ibt)
   bf3  h(200-vis)
   bf4  h(92-doy)
   bf5  h(doy-92)
   bf6  h(wind-7)
   bf7  h(55-humidity)
   bf8  h(dpg-54)
   bf9  h(54-dpg)
  bf10  h(1108-ibh)
  bf11  h(44-dpg)
  bf12  h(ibh-1108)
  bf13  h(ibt-266)

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)


 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> 
> x.global <- cbind(vh,wind,humidity,temp,ibh,dpg,ibt,vis,doy)
> y <- O3
> itest <- itest+1; ozone.test(itest, "O3~., nk=51", x.global, y, degree=2, nk=51)
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)

itest 53  O3~., nk=51                      degree 2  nk 51  nTerms 29 of 48  GRSq  0.8 GRSq ratio 0.9927583 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

                             coefficients
(Intercept)                    15.2147025
h(temp-58)                      0.1905158
h(234-ibt)                     -0.0469669
h(ibt-234)                     -0.2559117
h(200-vis)                      0.0267284
h(92-doy)                      -0.0845609
h(doy-92)                      -0.0355461
h(vh-5870) * h(ibt-234)         0.0031081
h(6-wind) * h(1108-ibh)         0.0010552
h(wind-6) * h(1108-ibh)        -0.0137744
h(6-wind) * h(ibt-234)         -0.0418605
h(55-humidity) * h(temp-58)    -0.0210753
h(humidity-55) * h(temp-58)     0.0061240
h(humidity-68) * h(ibh-1108)   -0.0000565
h(temp-58) * h(dpg-54)         -0.0151178
h(temp-58) * h(54-dpg)          0.0065231
h(84-temp) * h(ibt-234)         0.0295759
h(temp-43) * h(92-doy)         -0.0047171
h(1108-ibh) * h(44-dpg)        -0.0001163
h(1108-ibh) * h(ibt-268)        0.0007803
h(-15-dpg) * h(ibt-234)        -0.0116152
h(dpg- -15) * h(ibt-234)        0.0031771
h(175-ibt) * h(200-vis)        -0.0002112
h(ibt-234) * h(vis-140)        -0.0078819
h(ibt-234) * h(140-vis)         0.0022104
h(ibt-234) * h(vis-80)          0.0033810
h(ibt-254) * h(200-vis)        -0.0026469
h(ibt-298) * h(200-vis)        -0.0024716
h(225-ibt) * h(doy-92)          0.0001401

Selected 29 of 48 terms, and 9 of 9 predictors 
Termination condition: Reached nk 51
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh
Number of terms at each degree of interaction: 1 6 22
GCV 13.05863    RSS 2654.504    GRSq 0.7971495    RSq 0.8742859
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  15.2147
  +    0.1905158 * bf1
  -    0.0469669 * bf2
  -    0.2559117 * bf3
  +   0.02672837 * bf4
  -   0.08456085 * bf5
  -   0.03554605 * bf6
  +  0.003108087 * bf7 * bf3
  +  0.001055244 * bf8 * bf9
  -   0.01377437 * bf10 * bf9
  -   0.04186048 * bf8 * bf3
  -   0.02107529 * bf11 * bf1
  +  0.006124018 * bf12 * bf1
  - 5.652653e-05 * bf13 * bf14
  -   0.01511783 * bf1 * bf15
  +  0.006523062 * bf1 * bf16
  +   0.02957593 * bf17 * bf3
  -  0.004717139 * bf18 * bf5
  - 0.0001163365 * bf9 * bf19
  + 0.0007803455 * bf9 * bf20
  -    0.0116152 * bf21 * bf3
  +  0.003177148 * bf22 * bf3
  - 0.0002111502 * bf23 * bf4
  -  0.007881924 * bf3 * bf24
  +  0.002210376 * bf3 * bf25
  +  0.003381042 * bf3 * bf26
  -  0.002646942 * bf27 * bf4
  -  0.002471627 * bf28 * bf4
  +  0.000140113 * bf29 * bf6

   bf1  h(temp-58)
   bf2  h(234-ibt)
   bf3  h(ibt-234)
   bf4  h(200-vis)
   bf5  h(92-doy)
   bf6  h(doy-92)
   bf7  h(vh-5870)
   bf8  h(6-wind)
   bf9  h(1108-ibh)
  bf10  h(wind-6)
  bf11  h(55-humidity)
  bf12  h(humidity-55)
  bf13  h(humidity-68)
  bf14  h(ibh-1108)
  bf15  h(dpg-54)
  bf16  h(54-dpg)
  bf17  h(84-temp)
  bf18  h(temp-43)
  bf19  h(44-dpg)
  bf20  h(ibt-268)
  bf21  h(-15-dpg)
  bf22  h(dpg--15)
  bf23  h(175-ibt)
  bf24  h(vis-140)
  bf25  h(140-vis)
  bf26  h(vis-80)
  bf27  h(ibt-254)
  bf28  h(ibt-298)
  bf29  h(225-ibt)

Selected 29 of 48 terms, and 9 of 9 predictors 
Termination condition: Reached nk 51
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh
Number of terms at each degree of interaction: 1 6 22
GCV 13.05863    RSS 2654.504    GRSq 0.7971495    RSq 0.8742859
Converted mars(x=x, y=y, degree=degree, nk=nk)

to        earth(x=x, y=y, degree=degree, nk=nk)


 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

Selected 29 of 48 terms, and 9 of 9 predictors 
Termination condition: Reached nk 51
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh
Number of terms at each degree of interaction: 1 6 22
GCV 13.05863    RSS 2654.504    GRSq 0.7971495    RSq 0.8742859
> 
> detach(ozone1)
> 
> cat("--- fast mars -----------------------------------\n")
--- fast mars -----------------------------------
> 
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = 0, fast.beta = 1))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = 0,     fast.beta = 1) 
Selected 15 of 31 terms, and 8 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 9
GCV 13.3185    RSS 3488.478    GRSq 0.7931128    RSq 0.8347899
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = 0, fast.beta = 0))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = 0,     fast.beta = 0) 
Selected 15 of 31 terms, and 8 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 9
GCV 13.3185    RSS 3488.478    GRSq 0.7931128    RSq 0.8347899
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = 5, fast.beta = 1))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = 5,     fast.beta = 1) 
Selected 16 of 30 terms, and 9 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh
Number of terms at each degree of interaction: 1 5 10
GCV 13.08027    RSS 3368.061    GRSq 0.7968133    RSq 0.8404927
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = 5, fast.beta = 0))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = 5,     fast.beta = 0) 
Selected 18 of 31 terms, and 9 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, dpg, ibt, doy, vis, ibh, wind, vh
Number of terms at each degree of interaction: 1 7 10
GCV 12.98945    RSS 3230.919    GRSq 0.7982242    RSq 0.8469876
> 
> cat("--- plot.earth and plot.earth.models ------------\n")
--- plot.earth and plot.earth.models ------------
> 
> a <- earth(O3 ~ ., data=ozone1) # formula interface
> 
> if (PLOT)
+     plot(a, caption="plot.earth test 1", col.line=3, col.loess=4, col.qq="pink",
+          col.vline=1, col.npreds=0, nresiduals=100, cum.grid="grid",
+          col.grid="linen", col.sel.grid="linen")
Warning: nresiduals is deprecated.  Please use npoints instead.
> 
> set.seed(1)
> if (PLOT) {
+     plot(a, caption="plot.earth test 2", which=c(3,4,1), ylim=c(.2,.9),
+          id.n=20, legend.pos=c(10,.4), pch=20, lty.vline=1, cex.legend=1,
+          col.sel.grid="lightgray")
+ 
+     plot(a, caption="plot.earth test 3", which=2, main="test main")
+ }
> 
> a1 <- earth(ozone1[,c(2:4,10)], ozone1[,1])     # x,y interface
> 
> if (PLOT) {
+     plot(a, caption="plot.earth test 4", id.n=1)
+     set.seed(1)
+     plot.earth.models(a, which=1, ylim=c(.4,.8), jitter=.01)
+ 
+     plot.earth.models(a1)
+ 
+     plot.earth.models(list(a, a1), col.cum=c(3,4),  col.grsq=c(1,2), col.line=c(3,4),
+          col.npreds=1, col.vline=1, lty.vline=3,
+          legend.pos=c(5,.4), legend.text=c("a", "b", "c"), cex.legend=1.3)
+ }
> 
> cat("--- plot.earth args -----------------------------\n")
--- plot.earth args -----------------------------
> 
> test.plot.earth.args <- function()
+ {
+     caption <- "test earth args"
+     printh(caption)
+ 
+     argtest <- earth(ozone1[,c(2:4,10)], ozone1[,1])
+ 
+     old.par <- par(no.readonly=TRUE)
+     on.exit(par(old.par))
+     par(mfrow=c(2,3))
+     par(cex = 0.8)
+     par(mar = c(3, 3, 3, 0.5)) # small margins and text to pack figs in
+     par(mgp = c(1.6, 0.6, 0))  # flatten axis elements
+     oma <- par("oma") # make space for caption
+     oma[3] <- 2.4
+     par(oma=oma)
+     par(cex.main=1)
+ 
+     plot(argtest, do.par=FALSE, which=1,
+          main="default")
+ 
+     mtext(caption, outer=TRUE, font=2)
+ 
+     plot(argtest, do.par=FALSE, which=1,
+          col.line=3, col.grsq=2,
+          col.npreds="lightblue", col.sel.grid="lightgray",
+          main=sprintf("%s\n%s",
+             "col.line=3, col.grsq=2, ",
+             "col.npreds=\"lightblue\", col.sel.grid=\"lightgray\""))
+ 
+     plot(argtest, do.par=FALSE, which=1,
+          col.vline="pink", legend.pos="topleft",
+          lty.grsq=2, lty.npreds=1, lty.vline=1,
+          main=sprintf("%s\n%s",
+             "col.vline=\"pink\", legend.pos=\"topleft\", ",
+             "lty.grsq=2, lty.npreds=1, lty.vline=1"))
+ 
+     # expect warning: col.legend is deprecated
+     plot(argtest, do.par=FALSE, which=1,
+          col.legend=0, col.npreds=0,
+          main="col.legend=0, col.npreds=0")
+ 
+     plot(argtest, do.par=FALSE, which=1,
+          legend.pos=NA,
+          main="legend.pos=NA")
+ }
> test.plot.earth.args()
===caption [1] "test earth args"
Warning: col.legend is deprecated.  Please use legend.pos=NA for no legend.
> 
> cat("--- test minspan --------------------------------\n")
--- test minspan --------------------------------
> 
> a <- earth(O3 ~ ., data=ozone1, minspan=2)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, minspan=2)

               coefficients
(Intercept)       8.5631765
h(5740-vh)       -0.0134986
h(vh-5740)        0.0154112
h(9-wind)         0.3040866
h(humidity-39)    0.2419510
h(humidity-54)   -0.2271800
h(temp-58)        0.3788112
h(1046-ibh)      -0.0029992
h(ibh-1046)      -0.0006033
h(dpg-12)        -0.1073208
h(80-vis)         0.0456262
h(89-doy)        -0.1248560
h(doy-89)         0.0469849
h(doy-159)       -0.0911487

Selected 14 of 19 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, ibh, doy, dpg, humidity, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 13 (additive model)
GCV 14.81911    RSS 4122.811    GRSq 0.7698025    RSq 0.8047487
> 
> a <- earth(O3 ~ ., data=ozone1, minspan=0)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, minspan=0)

               coefficients
(Intercept)      12.0867717
h(5860-vh)       -0.0142909
h(9-wind)         0.3068046
h(55-humidity)   -0.1323516
h(temp-58)        0.2738271
h(1108-ibh)      -0.0032738
h(dpg-12)        -0.1033652
h(ibt-121)        0.0327032
h(150-vis)        0.0229979
h(92-doy)        -0.1160733
h(doy-92)         0.0402500
h(doy-161)       -0.0849455

Selected 12 of 20 terms, and 9 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, dpg, doy, vh, ibh, vis, ibt, wind
Number of terms at each degree of interaction: 1 11 (additive model)
GCV 14.57458    RSS 4162.543    GRSq 0.7736011    RSq 0.802867
> 
> # removed for earth 4.0.0 (minspan=-1 is no longer supported)
> # a <- earth(O3 ~ ., data=ozone1, minspan=-1) # minspan=-1 added in earth 2.4-0
> # printh(summary(a))
> 
> a <- earth(O3 ~ ., data=ozone1, endspan=80)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, endspan=80)

               coefficients
(Intercept)      13.4782540
h(5770-vh)       -0.0167237
h(wind-3)        -0.3300169
h(55-humidity)   -0.1058532
h(temp-58)        0.2771209
h(1046-ibh)      -0.0036706
h(dpg-44)        -0.1726307
h(ibt-120)        0.0429390
h(150-vis)        0.0264647
h(120-doy)       -0.0919282
h(doy-120)       -0.0313756

Selected 11 of 20 terms, and 9 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, vis, doy, dpg, vh, ibh, humidity, ibt, wind
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 14.34565    RSS 4150.719    GRSq 0.7771572    RSq 0.803427
> 
> cat("--- test multiple responses ---------------------\n")
--- test multiple responses ---------------------
> 
> # this uses the global matrix data.global (data.global[,1:2] is the response)
> 
> test.two.responses <- function(itest, func1, func2,
+     degree=2, nk=51, plotit=PLOT, test.rsq=TRUE, trace=0, minspan=0,
+     test.mars.to.earth=FALSE, pmethod="backward")
+ {
+     if(typeof(func1) == "character")
+         funcnames <- paste("multiple responses", func1, func2)
+     else
+         funcnames <- paste("multiple responses", deparse(substitute(func1)), deparse(substitute(func2)))
+     cat("itest", sprintf("%-3d", itest), funcnames,
+         " degree", sprintf("%-2d", degree), "nk", sprintf("%-3g", nk), "\n\n")
+     gc()
+     fite <- earth(data.global[,c(-1,-2), drop=FALSE], data.global[,1:2],
+                 degree=degree, trace=trace, nk=nk, pmethod=pmethod, minspan=minspan)
+     printh(fite)
+     caption <- paste("itest ", itest, ": ", funcnames, " degree=", degree, " nk=", nk, sep="")
+     if(plotit) {
+         if(typeof(func1) == "character") {
+             plotmo(fite, caption=caption, nresponse=1)
+             plotmo(fite, nresponse=2)
+         } else {
+             plotmo(fite, func=func1, caption=caption, nresponse=1)
+             plotmo(fite, func=func2, nresponse=2)
+         }
+         plot(fite, caption=caption)
+         plot(fite, nresponse=2)
+     }
+     cat("\n")
+     if(test.mars.to.earth) {
+         cat("Testing mars.to.earth with a multiple response model\n")
+         fitm <- mars(data.global[,c(-1,-2), drop=FALSE], data.global[,1:2],
+                      degree=degree, trace=(trace!=0), nk=nk)
+         fitme <- mars.to.earth(fitm)
+         printh(fitme)
+         printh(summary(fitme))
+         if(plotit) {
+             plotmo(fitm, func=func1, caption=caption, nresponse=1)
+             plotmo(fitm, func=func2, nresponse=2)
+         }
+ # TODO following code causes error "nk" not found, looking in wrong environment?
+ #       cat("Expect warnings because of weights in the mars model\n")
+ #       fitm <- mars(data.global[,c(-1,-2), drop=FALSE], data.global[,1:2],
+ #                    degree=degree, trace=(trace!=0), nk=nk, wp=c(1,2))
+ #       fitme <- mars.to.earth(fitm)
+ #       printh(fitme)
+ #       printh(summary(fitme))
+     }
+     fite
+ }
> 
> x.global <- cbind(                                     x1, x2)
> data.global <- cbind(func1(x.global), func7(x.global), x1, x2)
> colnames(data.global) = c("func1", "func7", "x1", "x2")
> # expect pmethod="ex" cannot be used with multiple response models
> expect.err(try(test.two.responses(itest, func1, func7, nk=51, degree=1, pmethod="ex")))
itest 53  multiple responses func1 func7  degree 1  nk 51  

Error : pmethod == "exhaustive" is not allowed with multiple response models
       (y has 2 columns, use trace=4 to see y)
Got error as expected
> # expect pmethod="seq" cannot be used with multiple response models
> expect.err(try(test.two.responses(itest, func1, func7, nk=51, degree=1, pmethod="seq")))
itest 53  multiple responses func1 func7  degree 1  nk 51  

Error : pmethod == "seqrep" is not allowed with multiple response models
       (y has 2 columns, use trace=4 to see y)
Got error as expected
> itest <- itest+1; a <- test.two.responses(itest, func1, func7, nk=51, degree=1)
itest 54  multiple responses func1 func7  degree 1  nk 51  

===fite 
Selected 9 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)

              GCV       RSS      GRSq       RSq
func1 0.002875040 0.1980615 0.9966067 0.9976149
func7 0.008879929 0.6117383 0.9826939 0.9878358
All   0.011754969 0.8097998 0.9913591 0.9939264

 grid:    x1         x2
 -0.02437858 0.03719751


 grid:    x1         x2
 -0.02437858 0.03719751


> printh(summary(a))
===summary(a) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      minspan=minspan)

                      func1      func7
(Intercept)      -1.4257560 -0.6444962
h(-0.483966-x1)   1.4795993  4.0158995
h(x1- -0.483966)  1.7364304 -1.5112458
h(x1- -0.23993)   0.9945021  5.4638598
h(x1-0.29412)    -0.8023830 -5.3931874
h(x1-0.422242)   -2.6194126 -3.0611241
h(x1-0.784397)   -2.3917230  2.6094620
h(-0.342445-x2)  -1.0210945  0.0784208
h(x2- -0.342445)  0.9840336 -0.0088130

Selected 9 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)

              GCV       RSS      GRSq       RSq
func1 0.002875040 0.1980615 0.9966067 0.9976149
func7 0.008879929 0.6117383 0.9826939 0.9878358
All   0.011754969 0.8097998 0.9913591 0.9939264
> printh(summary(a, style="bf"))
===summary(a, style = "bf") 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      minspan=minspan)

func1 =
  -1.425756
  +  1.479599 * bf1
  +   1.73643 * bf2
  + 0.9945021 * bf3
  -  0.802383 * bf4
  -  2.619413 * bf5
  -  2.391723 * bf6
  -  1.021094 * bf7
  + 0.9840336 * bf8

   bf1  h(-0.483966-x1)
   bf2  h(x1--0.483966)
   bf3  h(x1--0.23993)
   bf4  h(x1-0.29412)
   bf5  h(x1-0.422242)
   bf6  h(x1-0.784397)
   bf7  h(-0.342445-x2)
   bf8  h(x2--0.342445)

func7 =
  -0.6444962
  +   4.015899 * bf1
  -   1.511246 * bf2
  +    5.46386 * bf3
  -   5.393187 * bf4
  -   3.061124 * bf5
  +   2.609462 * bf6
  + 0.07842077 * bf7
  - 0.00881305 * bf8

   bf1  h(-0.483966-x1)
   bf2  h(x1--0.483966)
   bf3  h(x1--0.23993)
   bf4  h(x1-0.29412)
   bf5  h(x1-0.422242)
   bf6  h(x1-0.784397)
   bf7  h(-0.342445-x2)
   bf8  h(x2--0.342445)

Selected 9 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)

              GCV       RSS      GRSq       RSq
func1 0.002875040 0.1980615 0.9966067 0.9976149
func7 0.008879929 0.6117383 0.9826939 0.9878358
All   0.011754969 0.8097998 0.9913591 0.9939264
> if (PLOT) {
+     plotmo(a, nresponse=1)     # test generation of caption based on response name
+     plotmo(a, nresponse=2)
+     plot(a, nresponse=1)
+     plot(a, nresponse=2)
+ }

 grid:    x1         x2
 -0.02437858 0.03719751


 grid:    x1         x2
 -0.02437858 0.03719751

> x.global <- cbind(                                     x1, x2)
> data.global <- cbind(func1(x.global), func7(x.global), x1, x2)
> colnames(data.global) = c("func1",
+    "a.very.long.in.fact.extremely.long.response.name",
+    "x1.a.very.long.in.fact.extremely.long.predictor.name",
+    "x2")
> itest <- itest+1; a <- test.two.responses(itest, func1, func7, nk=51, degree=3)
itest 55  multiple responses func1 func7  degree 3  nk 51  

===fite 
Selected 9 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1.a.very.long.in.fact.extremely.long.predictor.name, x2
Number of terms at each degree of interaction: 1 8 (additive model)

                                                         GCV       RSS
func1                                            0.003173554 0.1980615
a.very.long.in.fact.extremely.long.response.name 0.009801928 0.6117383
All                                              0.012975481 0.8097998
                                                      GRSq       RSq
func1                                            0.9962544 0.9976149
a.very.long.in.fact.extremely.long.response.name 0.9808970 0.9878358
All                                              0.9904619 0.9939264

 grid:    x1.a.very.long.in.fact.extremely.long.predictor.name         x2
                                                   -0.02437858 0.03719751


 grid:    x1.a.very.long.in.fact.extremely.long.predictor.name         x2
                                                   -0.02437858 0.03719751


> printh(summary(a))
===summary(a) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      minspan=minspan)

                                                                        func1
(Intercept)                                                        -1.4257560
h(-0.483966-x1.a.very.long.in.fact.extremely.long.predictor.name)   1.4795993
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.483966)  1.7364304
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.23993)   0.9945021
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.29412)    -0.8023830
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.422242)   -2.6194126
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.784397)   -2.3917230
h(-0.342445-x2)                                                    -1.0210945
h(x2- -0.342445)                                                    0.9840336
                                                                   a.very.long.in.fact.extremely.long.response.name
(Intercept)                                                                                              -0.6444962
h(-0.483966-x1.a.very.long.in.fact.extremely.long.predictor.name)                                         4.0158995
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.483966)                                       -1.5112458
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.23993)                                         5.4638598
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.29412)                                          -5.3931874
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.422242)                                         -3.0611241
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.784397)                                          2.6094620
h(-0.342445-x2)                                                                                           0.0784208
h(x2- -0.342445)                                                                                         -0.0088130

Selected 9 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1.a.very.long.in.fact.extremely.long.predictor.name, x2
Number of terms at each degree of interaction: 1 8 (additive model)

                                                         GCV       RSS
func1                                            0.003173554 0.1980615
a.very.long.in.fact.extremely.long.response.name 0.009801928 0.6117383
All                                              0.012975481 0.8097998
                                                      GRSq       RSq
func1                                            0.9962544 0.9976149
a.very.long.in.fact.extremely.long.response.name 0.9808970 0.9878358
All                                              0.9904619 0.9939264
> print(evimp(a))
                                                     nsubsets   gcv    rss
x1.a.very.long.in.fact.extremely.long.predictor.name        8 100.0  100.0
x2                                                          6  66.9   63.6
> print.default(evimp(a))
                                                     col used nsubsets
x1.a.very.long.in.fact.extremely.long.predictor.name   1    1        8
x2                                                     2    1        6
                                                           gcv gcv.match
x1.a.very.long.in.fact.extremely.long.predictor.name 100.00000         1
x2                                                    66.89194         1
                                                           rss rss.match
x1.a.very.long.in.fact.extremely.long.predictor.name 100.00000         1
x2                                                    63.60283         1
attr(,"class")
[1] "evimp"
attr(,"sqrt")
[1] TRUE
> 
> x.global <- cbind(                                           x1, x2, x3, x4, x5)
> data.global <- cbind(eqn56=eqn56(x.global), neg.eqn56noise(x.global), x1, x2, x3, x4, x5)
> colnames(data.global) = c("", "neg.eqn56noise", "x1", "x2", "x3", "x4", "x5")
> itest <- itest+1; a <- test.two.responses(itest, eqn56, neg.eqn56noise, nk=51, degree=1)
itest 56  multiple responses eqn56 neg.eqn56noise  degree 1  nk 51  

===fite 
Selected 16 of 18 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 18 terms
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 15 (additive model)

                      GCV       RSS      GRSq       RSq
y1             0.09077942  4.322008 0.9892244 0.9947656
neg.eqn56noise 1.08633786 51.720546 0.8815753 0.9424732
All            1.17711728 56.042554 0.9331099 0.9675070

 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


> print(evimp(a))
   nsubsets   gcv    rss
x3       15 100.0  100.0
x2       14  81.3   80.3
x4       13  62.8   61.6
x1       12  50.1   49.1
x5       10  30.1   30.5
> print.default(evimp(a))
   col used nsubsets       gcv gcv.match       rss rss.match
x3   3    1       15 100.00000         1 100.00000         1
x2   2    1       14  81.29014         1  80.28776         1
x4   4    1       13  62.77555         1  61.64844         1
x1   1    1       12  50.10393         1  49.10025         1
x5   5    1       10  30.13136         1  30.50523         1
attr(,"class")
[1] "evimp"
attr(,"sqrt")
[1] TRUE
> 
> x.global <- cbind(                                           x1, x2, x3, x4, x5)
> data.global <- cbind(eqn56=eqn56(x.global), neg.eqn56noise(x.global), x1, x2, x3, x4, x5)
> colnames(data.global) = NULL
> itest <- itest+1; a70 <- test.two.responses(itest, eqn56, neg.eqn56noise, nk=51, degree=2)
itest 57  multiple responses eqn56 neg.eqn56noise  degree 2  nk 51  

===fite 
Selected 12 of 35 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 35 terms
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 9 2

           GCV       RSS      GRSq       RSq
y1  0.08675081  4.434918 0.9897026 0.9946288
y2  1.33633534 68.316803 0.8543224 0.9240139
All 1.42308615 72.751722 0.9191326 0.9578192

 grid:    V1         V2         V3          V4          V5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


 grid:    V1         V2         V3          V4          V5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


> printh(summary(a70))
===summary(a70) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      minspan=minspan)

                                          y1          y2
(Intercept)                        0.8591197  -0.8035482
h(x1- -0.0455399)                  1.0697283  -1.1019897
h(x1-0.554641)                     7.1231451  -5.5924298
h(x2-0.431132)                    26.7543080 -29.5265723
h(x2-0.565703)                   -25.7652977  29.5687293
h(0.156708-x3)                    -3.1426072   2.9125717
h(x3-0.156708)                     3.0047668  -3.9279007
h(-0.292232-x4)                   -1.9437123   2.4992954
h(x4- -0.292232)                   2.0040805  -1.8651593
h(0.841036-x5)                    -1.0313701   1.5003415
h(-0.365711-x3) * h(0.841036-x5)   0.3441178   4.6000033
h(0.156708-x3) * h(0.880617-x5)    0.0514975  -2.3826068

Selected 12 of 35 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 35 terms
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 9 2

           GCV       RSS      GRSq       RSq
y1  0.08675081  4.434918 0.9897026 0.9946288
y2  1.33633534 68.316803 0.8543224 0.9240139
All 1.42308615 72.751722 0.9191326 0.9578192
> printh(summary(a70, style="bf"))
===summary(a70, style = "bf") 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      minspan=minspan)

y1 =
  0.8591197
  +    1.069728 * bf1
  +    7.123145 * bf2
  +    26.75431 * bf3
  -     25.7653 * bf4
  -    3.142607 * bf5
  +    3.004767 * bf6
  -    1.943712 * bf7
  +     2.00408 * bf8
  -     1.03137 * bf9
  +   0.3441178 * bf10 * bf9
  +  0.05149753 * bf5 * bf11

   bf1  h(x1--0.0455399)
   bf2  h(x1-0.554641)
   bf3  h(x2-0.431132)
   bf4  h(x2-0.565703)
   bf5  h(0.156708-x3)
   bf6  h(x3-0.156708)
   bf7  h(-0.292232-x4)
   bf8  h(x4--0.292232)
   bf9  h(0.841036-x5)
  bf10  h(-0.365711-x3)
  bf11  h(0.880617-x5)

y2 =
  -0.8035482
  -   1.10199 * bf1
  -   5.59243 * bf2
  -  29.52657 * bf3
  +  29.56873 * bf4
  +  2.912572 * bf5
  -  3.927901 * bf6
  +  2.499295 * bf7
  -  1.865159 * bf8
  +  1.500342 * bf9
  +  4.600003 * bf10 * bf9
  -  2.382607 * bf5 * bf11

   bf1  h(x1--0.0455399)
   bf2  h(x1-0.554641)
   bf3  h(x2-0.431132)
   bf4  h(x2-0.565703)
   bf5  h(0.156708-x3)
   bf6  h(x3-0.156708)
   bf7  h(-0.292232-x4)
   bf8  h(x4--0.292232)
   bf9  h(0.841036-x5)
  bf10  h(-0.365711-x3)
  bf11  h(0.880617-x5)

Selected 12 of 35 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 35 terms
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 9 2

           GCV       RSS      GRSq       RSq
y1  0.08675081  4.434918 0.9897026 0.9946288
y2  1.33633534 68.316803 0.8543224 0.9240139
All 1.42308615 72.751722 0.9191326 0.9578192
> 
> N1 <- 100
> set.seed(1)
> x1. <- runif(N1, -1, 1)
> x2. <- runif(N1, -1, 1)
> x3. <- runif(N1, -1, 1)
> x4. <- runif(N1, -1, 1)
> x5. <- runif(N1, -1, 1)
> 
> x.global <- cbind(                                        (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> data.global <- cbind(robotArm(x.global), eqn56(x.global), (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> colnames(x.global)    <- c(                "l1", "l2", "theta1", "theta2", "phi")
> colnames(data.global) <- c("arm", "eqn56", "l1", "l2", "theta1", "theta2", "phi")
> itest <- itest+1; test.two.responses(itest, robotArm, eqn56, nk=51, degree=1)
itest 58  multiple responses robotArm eqn56  degree 1  nk 51  

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06824523 4.259185 0.6347200 0.7674000
eqn56 0.04640411 2.896080 0.9990307 0.9993828
All   0.11464934 7.155265 0.9976145 0.9984810

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06824523 4.259185 0.6347200 0.7674000
eqn56 0.04640411 2.896080 0.9990307 0.9993828
All   0.11464934 7.155265 0.9976145 0.9984810
> itest <- itest+1; test.two.responses(itest, robotArm, eqn56, nk=51, degree=2, test.mars.to.earth=TRUE)
itest 59  multiple responses robotArm eqn56  degree 2  nk 51  

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07777913 4.259185 0.5836902 0.7674000
eqn56 0.05288678 2.896080 0.9988953 0.9993828
All   0.13066591 7.155265 0.9972813 0.9984810

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Testing mars.to.earth with a multiple response model
Converted mars(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
          1:2], degree=degree, nk=nk, trace.mars=(trace!=0))

to        earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
          1:2], degree=degree, nk=nk)

===fitme 
Selected 14 of 14 terms, and 5 of 5 predictors 
Termination condition: Unknown
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 11 2

             GCV      RSS      GRSq       RSq
arm   0.06354264 2.810014 0.6598905 0.8465412
eqn56 0.02822229 1.248060 0.9994105 0.9997340
All   0.09176492 4.058074 0.9997770 0.9998994
===summary(fitme) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], degree=degree, nk=nk)

                                          arm      eqn56
(Intercept)                        1.21455366 17.9497354
h(l1-0.48208)                      0.74838045  3.1350878
h(0.712515-l1)                    -0.29309259 -1.2345462
h(l1-0.712515)                     0.45693753  8.6324286
h(0.689194-l2)                    -0.56638468 -6.5226645
h(l2-0.689194)                     0.80658229  0.0048442
h(2.05469-theta1)                  0.04949653 -2.9820177
h(theta1-2.05469)                  0.01153761  3.0259557
h(3.53226-theta2)                 -0.14968401 -1.9869680
h(theta2-3.53226)                 -0.26441106  2.0236977
h(-0.0748075-phi)                 -0.14373035 -0.9622197
h(phi- -0.0748075)                -0.22638721  0.9964946
h(0.48208-l1)                     -0.18021728 -0.0612455
h(l1-0.48208) * h(theta2-1.51306) -2.04353916 -0.4060211

Selected 14 of 14 terms, and 5 of 5 predictors 
Termination condition: Unknown
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 11 2

             GCV      RSS      GRSq       RSq
arm   0.06354264 2.810014 0.6598905 0.8465412
eqn56 0.02822229 1.248060 0.9994105 0.9997340
All   0.09176492 4.058074 0.9997770 0.9998994

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174

Warning: predicted values in the "l1" graph (and others) are out of ylim=(0.15, 2.1).
         Use clip=FALSE to make this warning go away.

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174

Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07777913 4.259185 0.5836902 0.7674000
eqn56 0.05288678 2.896080 0.9988953 0.9993828
All   0.13066591 7.155265 0.9972813 0.9984810
> itest <- itest+1; test.two.responses(itest, robotArm, eqn56, nk=201, degree=1)
itest 60  multiple responses robotArm eqn56  degree 1  nk 201 

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06824523 4.259185 0.6347200 0.7674000
eqn56 0.04640411 2.896080 0.9990307 0.9993828
All   0.11464934 7.155265 0.9976145 0.9984810

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06824523 4.259185 0.6347200 0.7674000
eqn56 0.04640411 2.896080 0.9990307 0.9993828
All   0.11464934 7.155265 0.9976145 0.9984810
> itest <- itest+1; test.two.responses(itest, robotArm, eqn56, nk=201, degree=2)
itest 61  multiple responses robotArm eqn56  degree 2  nk 201 

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07777913 4.259185 0.5836902 0.7674000
eqn56 0.05288678 2.896080 0.9988953 0.9993828
All   0.13066591 7.155265 0.9972813 0.9984810

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07777913 4.259185 0.5836902 0.7674000
eqn56 0.05288678 2.896080 0.9988953 0.9993828
All   0.13066591 7.155265 0.9972813 0.9984810
> itest <- itest+1; test.two.responses(itest, robotArm, eqn56, nk=201, degree=10)
itest 62  multiple responses robotArm eqn56  degree 10 nk 201 

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07777913 4.259185 0.5836902 0.7674000
eqn56 0.05288678 2.896080 0.9988953 0.9993828
All   0.13066591 7.155265 0.9972813 0.9984810

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Termination condition: RSq changed by less than 0.001 at 11 terms
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07777913 4.259185 0.5836902 0.7674000
eqn56 0.05288678 2.896080 0.9988953 0.9993828
All   0.13066591 7.155265 0.9972813 0.9984810
> 
> attach(ozone1)
> x.global <- cbind(                wind, humidity, temp, ibh, dpg, ibt, vis)
> data.global <- cbind(O3, doy, vh, wind, humidity, temp, ibh, dpg, ibt, vis)
> itest <- itest+1; test.two.responses(itest, "O3", "doy", nk=51, degree=2)
itest 63  multiple responses O3 doy  degree 2  nk 51  

===fite 
Selected 25 of 49 terms, and 8 of 8 predictors 
Termination condition: Reached nk 51
Importance: wind, ibt, ibh, vis, vh, temp, humidity, dpg
Number of terms at each degree of interaction: 1 7 17

          GCV        RSS      GRSq       RSq
O3    23.8463    5228.93 0.6295751 0.7523645
doy 7334.1789 1608207.62 0.3288354 0.5513147
All 7358.0252 1613436.55 0.3305967 0.5524922

 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


Selected 25 of 49 terms, and 8 of 8 predictors 
Termination condition: Reached nk 51
Importance: wind, ibt, ibh, vis, vh, temp, humidity, dpg
Number of terms at each degree of interaction: 1 7 17

          GCV        RSS      GRSq       RSq
O3    23.8463    5228.93 0.6295751 0.7523645
doy 7334.1789 1608207.62 0.3288354 0.5513147
All 7358.0252 1613436.55 0.3305967 0.5524922
> detach(ozone1)
> 
> cat("--- formula based multiple response -------------\n")
--- formula based multiple response -------------
> 
> a2 <- earth(cbind(O3,doy) ~ ., data=ozone1, degree=2)
> if (PLOT) {
+     plotmo(a2, nresponse=1)                  # TODO1 delete
+     plotmo(a2, nresponse=1) # test generation of caption based on response name
+     plotmo(a2, nresponse=2)
+     plot(a2, nresponse=1) # TODO delete
+     plot(a2, nresponse=1)
+     plot(a2, nresponse=2)
+ }

 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120

> 
> cat("--- test plot.earth.models with multiple responses ---\n")
--- test plot.earth.models with multiple responses ---
> 
> set.seed(1)
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> a2 <- earth(cbind(O3,doy) ~ ., data=ozone1, degree=2)
> b2 <- earth(cbind(O3,doy) ~ ., data=ozone1, degree=1)
> if (PLOT) {
+     plot.earth.models(list(a, a2), caption="plot.earth.models with multiple responses, list(a,a2)")
+     plot.earth.models(list(a2, a), caption="plot.earth.models with multiple responses, list(a2,a)",
+                       col.line=c(2,3), col.npreds=c(2,3))
+     plot.earth.models(list(a2, b2), caption="plot.earth.models with multiple responses, list(a2,b2)",
+                       col.line=c(2,3), col.npreds=c(4,5), jitter=.01, legend.pos="topleft")
+ }
> 
> cat("--- subset --------------------------------------\n")
--- subset --------------------------------------
> 
> set.seed(9)
> train.subset <- sample(1:nrow(ozone1), .8 * nrow(ozone1))
> test.subset <- (1:nrow(ozone1))[-train.subset]
> 
> # all the following models should be identical
> a <- earth(ozone1[,-1], ozone1[,1], subset=train.subset, nprune=7, degree=2)
> printh(a)
===a 
Selected 7 of 21 terms, and 5 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, ibt, doy, dpg, ibh-unused, vis, vh-unused, wind-unused, ...
Number of terms at each degree of interaction: 1 5 1
GCV 15.90561    RSS 3705.524    GRSq 0.7513922    RSq 0.7789418
> if (PLOT)
+     plotmo(a, caption="test subset: earth(ozone1[,-1], ozone1[,1], subset=train.subset)")

 grid:    vh wind humidity temp  ibh dpg   ibt vis   doy
        5765    5       64   62 2050  25 170.5 120 199.5

> 
> a <- earth(ozone1[train.subset,-1], ozone1[train.subset,1], nprune=7, degree=2)
> printh(a)
===a 
Selected 7 of 21 terms, and 5 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, ibt, doy, dpg, ibh-unused, vis, vh-unused, wind-unused, ...
Number of terms at each degree of interaction: 1 5 1
GCV 15.90561    RSS 3705.524    GRSq 0.7513922    RSq 0.7789418
> if (PLOT)
+     plotmo(a, caption="test subset: earth(ozone1[train.subset,-1], ozone1[train.subset,1]")

 grid:    vh wind humidity temp  ibh dpg   ibt vis   doy
        5765    5       64   62 2050  25 170.5 120 199.5

> 
> a <- earth(O3 ~ ., data=ozone1, subset=train.subset, nprune=7, degree=2)
> printh(a)
===a 
Selected 7 of 21 terms, and 5 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, ibt, doy, dpg, ibh-unused, vis, vh-unused, wind-unused, ...
Number of terms at each degree of interaction: 1 5 1
GCV 15.90561    RSS 3705.524    GRSq 0.7513922    RSq 0.7789418
> if (PLOT)
+     plotmo(a, caption="test subset: earth(O3 ~ ., data=ozone1, subset=train.subset")

 grid:    vh wind humidity temp  ibh dpg   ibt vis   doy
        5765    5       64   62 2050  25 170.5 120 199.5

> 
> y <- ozone1[test.subset, 1]
> yhat <- predict(a, newdata = ozone1[test.subset, -1])
> printh(1 - sum((y - yhat)^2)/sum((y - mean(y))^2)) # print RSquared
===1 - sum((y - yhat)^2)/sum((y - mean(y))^2) [1] 0.7199055
> 
> cat("--- update -------------------------\n")
--- update -------------------------
> 
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> printh(update(a, penalty = -1, ponly=TRUE))
===update(a, penalty = -1, ponly = TRUE) 
Selected 21 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 10 10
GCV 10.75816    RSS 3550.193    GRSq 0.8318672    RSq 0.8318672
> printh(update(a, penalty = 10, ponly=TRUE))
===update(a, penalty = 10, ponly = TRUE) 
Selected 10 of 21 terms, and 7 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 17.1569    RSS 3931.79    GRSq 0.7334877    RSq 0.8137952
> a <- earth(O3 ~ ., data=ozone1, nk=31, pmethod="n", degree=2)
> a.none <- printh(update(a, nprune=10, pmethod="n"))
===update(a, nprune = 10, pmethod = "n") 
Selected 10 of 31 terms, and 5 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt-unused, doy, dpg, ibh, vis-unused, ...
Number of terms at each degree of interaction: 1 6 3
GCV 13.81158    RSS 3931.79    GRSq 0.7854534    RSq 0.8137952
> printh(update(a.none, pmethod="b"))
===update(a.none, pmethod = "b") 
Selected 10 of 31 terms, and 7 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.81158    RSS 3931.79    GRSq 0.7854534    RSq 0.8137952
> printh(update(a.none, nprune=4, pmethod="e"))
===update(a.none, nprune = 4, pmethod = "e") 
Selected 4 of 31 terms, and 3 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, ibh, humidity, vh-unused, wind-unused, dpg-unused, ...
Number of terms at each degree of interaction: 1 2 1
GCV 18.56806    RSS 5815.867    GRSq 0.7115671    RSq 0.7245676
> a.updated <- update(a.none, nprune=10, pmethod="b")
> printh(a.updated)
===a.updated 
Selected 10 of 31 terms, and 7 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.81158    RSS 3931.79    GRSq 0.7854534    RSq 0.8137952
> a.backwards <- update(a, nprune=10, pmethod="b")
> printh(a.backwards)
===a.backwards 
Selected 10 of 31 terms, and 7 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.81158    RSS 3931.79    GRSq 0.7854534    RSq 0.8137952
> printh(all.equal(a.updated$bx, a.backwards$bx))
===all.equal(a.updated$bx, a.backwards$bx) [1] TRUE
> a <- earth(O3 ~ ., data=ozone1, nk=31, nprune=10, pmethod="b", degree=2)
> printh(a)
===a 
Selected 10 of 31 terms, and 7 of 9 predictors 
Termination condition: Reached nk 31
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.81158    RSS 3931.79    GRSq 0.7854534    RSq 0.8137952
> printh(all.equal(a$bx, a.backwards$bx))
===all.equal(a$bx, a.backwards$bx) [1] TRUE
> 
> cat("--- Force.xtx.prune -----------------------------\n")
--- Force.xtx.prune -----------------------------
> 
> expect.err(try(earth(Volume ~ ., data = trees, Force.xtx.prune=TRUE, pmethod="ex"))) # pmethod="ex" cannot be used with Force.xtx.prune
Error : pmethod="exhaustive" is not allowed with "eval.subsets.xtx"
Got error as expected
> 
> m1 <- earth(Volume ~ ., data = trees)
> m2 <- earth(Volume ~ ., data = trees, Force.xtx.prune=TRUE)
> check.models.equal(m1, m2, "Force.xtx.prune test 1", check.subsets=FALSE)
check.models.equal not identical: Force.xtx.prune test 1 [but within numerical tolerances]
> 
> m1 <- earth(O3 ~ wind+temp, data = ozone1, nk=51)
> m2 <- earth(O3 ~ wind+temp, data = ozone1, nk=51, Force.xtx.prune=TRUE)
> check.models.equal(m1, m2, "Force.xtx.prune test 2", check.subsets=FALSE)
check.models.equal not identical: Force.xtx.prune test 2 (m1$rsq 0.6647086 != m1$rsq 0.6647086) [but within numerical tolerances]
> 
> # TODO there appears to be a bug in leaps --- to see run the call below
> # with trace=4 and in the prune pass display note that at subset size 15
> # several terms are added and deleted -- but only one term should be added per step
> # Note added Apr 2013: Unable to reproduce.
> m1 <- earth(O3 ~ ., data = ozone1, nk=51, degree=2)
> m2 <- earth(O3 ~ ., data = ozone1, nk=51, degree=2, Force.xtx.prune=TRUE)
> check.models.equal(m1, m2, "Force.xtx.prune test 3", check.subsets=FALSE)
check.models.equal not identical: Force.xtx.prune test 3 (m1$rsq 0.8742859 != m1$rsq 0.8742859) [but within numerical tolerances]
> 
> cat("--- extractAIC.earth ----------------------------\n")
--- extractAIC.earth ----------------------------
> 
> a <-earth(O3 ~ ., data=ozone1, degree=2)
> cat("Ignore 10 warnings: extractAIC.earth: using GCV instead of AIC\n")
Ignore 10 warnings: extractAIC.earth: using GCV instead of AIC
> printh(drop1(a), expect.warning=TRUE)
===drop1(a)  expect warning -->Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Single term deletions

Model:
O3 ~ vh + wind + humidity + temp + ibh + dpg + ibt + vis + doy
            Df    AIC
<none>         13.373
vh         0.0 13.373
wind       0.0 13.375
humidity   0.0 14.894
temp      -5.0 13.112
ibh        0.0 13.077
dpg        5.0 14.699
ibt       -2.5 13.876
vis      -10.0 14.496
doy        0.0 15.555
> printh(drop1(a, warn=FALSE)) # repeat but with warnings suppressed
===drop1(a, warn = FALSE) 
Single term deletions

Model:
O3 ~ vh + wind + humidity + temp + ibh + dpg + ibt + vis + doy
            Df    AIC
<none>         13.373
vh         0.0 13.373
wind       0.0 13.375
humidity   0.0 14.894
temp      -5.0 13.112
ibh        0.0 13.077
dpg        5.0 14.699
ibt       -2.5 13.876
vis      -10.0 14.496
doy        0.0 15.555
> 
> cat("--- fda and mda with earth -----------------------------------\n")
--- fda and mda with earth -----------------------------------
> 
> am <- fda(Species ~ ., data=iris, method=mars, degree=1, keepxy=TRUE)
> printh(am)
===am 
Call:
fda(formula = Species ~ ., data = iris, method = mars, degree = 1, 
    keepxy = TRUE)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 92.73 100.00 

Training Misclassification Error: 0.02667 ( N = 150 )
> a <- fda(Species ~ ., data=iris, method=earth, degree=1, keepxy=TRUE)
> printh(a)
===a 
Call:
fda(formula = Species ~ ., data = iris, method = earth, degree = 1, 
    keepxy = TRUE)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 92.64 100.00 

Training Misclassification Error: 0.02667 ( N = 150 )
> printh(confusion(a))
===confusion(a) 
            true
predicted    setosa versicolor virginica
  setosa         50          0         0
  versicolor      0         49         3
  virginica       0          1        47
attr(,"error")
[1] 0.02666667
> if (PLOT) {
+     par(mar=c(3, 3, 2, .5))  # small margins and text to pack figs in
+     par(mgp=c(1.6, 0.6, 0))  # flatten axis elements
+     par(oma=c(0,0,4,0))      # make space for caption
+     layout(rbind(c(1,1,0,0), c(2,3,4,5), c(6,7,8,9)), heights=c(2,1,1))
+     plot(a)
+     plotmo(a$fit, nresponse=1, ylim=c(-1.5,1.5), clip=FALSE, do.par=FALSE)
+     plotmo(a$fit, nresponse=2, ylim=c(-1.5,1.5), clip=FALSE, do.par=FALSE)
+     mtext("fda test", outer=TRUE, font=2, line=1.5, cex=1)
+ }

 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3


 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3

> 
> data(glass)
> set.seed(123)
> samp <- sample(c(1:214), size=100, replace=FALSE)
> glass.train <- glass[samp,]
> glass.test <- glass[-samp,]
> am <- mda(Type ~ ., data=glass.train, method=mars,  keepxy=TRUE, degree=2)
> a <-  mda(Type ~ ., data=glass.train, method=earth, keepxy=TRUE, degree=2, keep.fitted=TRUE)
> printh(am)
===am 
Call:
mda(formula = Type ~ ., data = glass.train, method = mars, keepxy = TRUE, 
    degree = 2)

Dimension: 13 

Percent Between-Group Variance Explained:
 v1  v2  v3  v4  v5  v6  v7  v8  v9 v10 v11 v12 v13 
100 100 100 100 100 100 100 100 100 100 100 100 100 

Training Misclassification Error: 0.25 ( N = 100 )

Deviance: 213.874 
> printh(a)
===a 
Call:
mda(formula = Type ~ ., data = glass.train, method = earth, keep.fitted = TRUE, 
    keepxy = TRUE, degree = 2)

Dimension: 13 

Percent Between-Group Variance Explained:
    v1     v2     v3     v4     v5     v6     v7     v8     v9    v10    v11 
 59.32  82.81  90.18  93.76  96.20  97.80  98.87  99.55  99.78  99.97 100.00 
   v12    v13 
100.00 100.00 

Training Misclassification Error: 0.22 ( N = 100 )

Deviance: 166.016 
> cat("mda with mars  ", attr(confusion(am), "error"), "\n")
mda with mars   0.25 
> cat("mda with earth ", attr(confusion(a),  "error"), "\n")
mda with earth  0.22 
> if (PLOT) {
+     plot(a$fit, caption="mda on glass data")
+     plotmo(a$fit, nresponse=9, clip=FALSE, ylim=NA, caption="mda on glass data")
+ }

 grid:    RI     Na  Mg    Al    Si     K   Ca Ba Fe
     1.51762 13.235 3.5 1.335 72.85 0.545 8.54  0  0

> 
> cat("\n---- update and keepxy, formula interface --------------------------\n")

---- update and keepxy, formula interface --------------------------
> 
> new.trees <- trees + c(1,2,3,4)
> new.trees <- new.trees[, -c(20:23)]
> a.formula <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = trees)
> cat("\nupdate(a, trace=1)\n")

update(a, trace=1)
> a.formula.1update <- update(a.formula, trace=1)
update.earth: using 31 by 3 data argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Skipped forward pass
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.954 RSq 0.971 
> a.formula.1  <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = trees)
> check.models.equal(a.formula.1update, a.formula.1, msg="a1update a1")
check.models.equal identical: a1update a1

> 
> cat("\nupdate(a.formula, data=new.trees, trace=1)\n")

update(a.formula, data=new.trees, trace=1)
> a.formula.2update <- update(a.formula, data=new.trees, trace=1)
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16
RSq changed by less than 0.001 at 15 terms (DeltaRSq 0)
After forward pass GRSq 0.466 RSq 0.941
Prune method "backward" penalty 2 nprune 10: selected 4 of 10 terms, and 2 of 2 predictors
After backward pass GRSq 0.866 RSq 0.914 
> a.formula.2  <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = new.trees)
> check.models.equal(a.formula.2update, a.formula.2, msg="a2update a2")
check.models.equal identical: a2update a2

> 
> cat("\nupdate(a.formula, wp=2, trace=1)\n")

update(a.formula, wp=2, trace=1)
> a.formula.3update <- update(a.formula, wp=2, trace=1)
update.earth: using 31 by 3 data argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 0.00011)
After forward pass GRSq 0.938 RSq 0.978
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.954 RSq 0.971 
> a.formula.3  <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = trees, wp=2)
> check.models.equal(a.formula.3update, a.formula.3, msg="a3update a3")
check.models.equal identical: a3update a3

> 
> cat("\nupdate(a.formula, subset=subset.new, trace=1)\n")

update(a.formula, subset=subset.new, trace=1)
> subset.new <- rep(TRUE, nrow(trees))
> subset.new[1:4] = FALSE
> a.formula.4update <- update(a.formula, subset=subset.new, trace=1)
update.earth: using 31 by 3 data argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 4e-05)
After forward pass GRSq 0.906 RSq 0.973
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.949 RSq 0.97 
> a.formula.4  <- earth(Volume ~ ., data = trees, subset=subset.new)
> check.models.equal(a.formula.4update, a.formula.4, msg="a4update a4")
check.models.equal identical: a4update a4

> 
> # now use keepxy=TRUE
> 
> a.formula <- earth(Volume ~ ., wp=1, data = trees, keepxy=TRUE)
> 
> cat("\nupdate(a.formula, trace=1)\n")

update(a.formula, trace=1)
> a.formula.5update <- update(a.formula, trace=1)
update.earth: using 31 by 3 data saved by keepxy in original call to earth
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Skipped forward pass
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.954 RSq 0.971 
> a.formula.5  <- earth(Volume ~ ., wp=1, data = trees, keepxy=TRUE)
> check.models.equal(a.formula.5update, a.formula.5, msg="a5update a5")
check.models.equal identical: a5update a5

> 
> cat("\nupdate(a.formula, data=new.trees, trace=1)\n")

update(a.formula, data=new.trees, trace=1)
> a.formula.6update <- update(a.formula, data=new.trees, trace=1)
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16
RSq changed by less than 0.001 at 15 terms (DeltaRSq 0)
After forward pass GRSq 0.466 RSq 0.941
Prune method "backward" penalty 2 nprune 10: selected 4 of 10 terms, and 2 of 2 predictors
After backward pass GRSq 0.866 RSq 0.914 
> a.formula.6  <- earth(Volume ~ ., wp=1, data = new.trees, keepxy=TRUE)
> check.models.equal(a.formula.6update, a.formula.6, msg="a6update a6")
check.models.equal identical: a6update a6

> 
> cat("\nupdate(a.formula, wp=2, trace=1)\n")

update(a.formula, wp=2, trace=1)
> a.formula.7update <- update(a.formula, wp=2, trace=1)
update.earth: using 31 by 3 data saved by keepxy in original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8
RSq changed by less than 0.001 at 7 terms (DeltaRSq 0.00011)
After forward pass GRSq 0.938 RSq 0.978
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.954 RSq 0.971 
> a.formula.7  <- earth(Volume ~ ., wp=2, data = trees, keepxy=TRUE)
> check.models.equal(a.formula.7update, a.formula.7, msg="a7update a7")
check.models.equal identical: a7update a7

> 
> cat("\n----- update and keepxy, matrix interface--------------------------\n")

----- update and keepxy, matrix interface--------------------------
> 
> Volume <- trees$Volume
> x <- cbind(trees$Height, trees$Volume)
> colnames(x) <- c("Height", "Volume")
> 
> new.x <- cbind(new.trees$Height, new.trees$Volume)
> colnames(new.x) <- c("Height", "Volume")
> 
> a <- earth(x, Volume, subset=rep(TRUE, nrow(trees)))
> cat("\nupdate(a, trace=1)\n")

update(a, trace=1)
> a1update <- update(a, trace=1)
update.earth: using 31 by 2 x argument from original call to earth
update.earth: using 31 by 1 y argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Height, 2=Volume
y is a 31 by 1 matrix: 1=Volume
Skipped forward pass
Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
> a1  <- earth(x, Volume, subset=rep(TRUE, nrow(trees)))
> check.models.equal(a1update, a1, msg="a1update a1")
check.models.equal identical: a1update a1

> 
> cat("\nupdate(a, x=new.x, trace=1)\n")

update(a, x=new.x, trace=1)
> a2update <- update(a, x=new.x, trace=1)
update.earth: using 31 by 1 y argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Height, 2=Volume
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4
RSq changed by less than 0.001 at 3 terms (DeltaRSq 0.00026)
After forward pass GRSq 0.992 RSq 0.996
Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.994 RSq 0.995 
> a2  <- earth(new.x, Volume, subset=rep(TRUE, nrow(trees)))
> check.models.equal(a2update, a2, msg="a2update a2")
check.models.equal identical: a2update a2

> 
> cat("\nupdate(a, wp=2, trace=0)\n")

update(a, wp=2, trace=0)
> a3update <- update(a, wp=2, trace=0)
> a3  <- earth(x, Volume, subset=rep(TRUE, nrow(trees)), wp=2)
> check.models.equal(a3update, a3, msg="a3update a3")
check.models.equal identical: a3update a3

> 
> cat("\nupdate(a, subset=subset.new, trace=4)\n")

update(a, subset=subset.new, trace=4)
> subset.new <- rep(TRUE, nrow(trees))
> subset.new[1:4] = FALSE
> a4update <- update(a, subset=subset.new, trace=4)
update.earth: using 31 by 2 x argument from original call to earth
update.earth: using 31 by 1 y argument from original call to earth
Call: earth(x=x, y=Volume, subset=subset.new, trace=4)

x is a 31 by 2 matrix: 1=Height, 2=Volume
First few rows of x are
     Height Volume
[1,]     70   10.3
[2,]     65   10.3
[3,]     63   10.2
[4,]     72   16.4
[5,]     81   18.8
[6,]     83   19.7

y is a 31 by 1 matrix: 1=Volume
First few rows of y are
     Volume
[1,]   10.3
[2,]   10.3
[3,]   10.2
[4,]   16.4
[5,]   18.8
[6,]   19.7

Forward pass: minspan 4 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      1.0000 1.0000            1    2       Volume        15.6< 2       

Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
> a4  <- earth(x, Volume, subset=subset.new)
> check.models.equal(a4update, a4, msg="a4update a4")
check.models.equal identical: a4update a4

> 
> # now use keepxy=TRUE
> 
> a <- earth(x, Volume, wp=1, keepxy=TRUE)
> 
> cat("\nupdate(a, trace=4)\n")

update(a, trace=4)
> a5update <- update(a, trace=4)
update.earth: using 31 by 2 x saved by keepxy in original call to earth
update.earth: using 31 by 1 y saved by keepxy in original call to earth
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
Call: earth(x=structure(c(70, 65, 63, 72, 81, 83, 66, 75, 80, 75, 
      79, 76, 76, 69, 75, 74, 85, 86, 71, 64, 78, 80, 74, 72, 77, 81, 
      82, 80, 80, 80, 87, 10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6, 
      18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 33.8, 27.4, 
      25.7, 24.9, 34.5, 31.7, 36.3, 38.3, 42.6, 55.4, 55.7, 58.3, 51.5, 
      51, 77), .Dim=c(31L, 2L), .Dimnames=list(NULL, c("Height", 
      "Volume"))), y=structure(c(10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 
      15.6, 18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 33.8, ...

x is a 31 by 2 matrix: 1=Height, 2=Volume
First few rows of x are
     Height Volume
[1,]     70   10.3
[2,]     65   10.3
[3,]     63   10.2
[4,]     72   16.4
[5,]     81   18.8
[6,]     83   19.7

y is a 31 by 1 matrix: 1=Volume
First few rows of y are
     Volume
[1,]   10.3
[2,]   10.3
[3,]   10.2
[4,]   16.4
[5,]   18.8
[6,]   19.7

Skipped forward pass
Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
> a5  <- earth(x, Volume, wp=1, keepxy=TRUE)
> check.models.equal(a5update, a5, msg="a5update a5")
check.models.equal identical: a5update a5

> 
> cat("\nupdate(a, x=new.x, trace=4)\n")

update(a, x=new.x, trace=4)
> a6update <- update(a, x=new.x, trace=4)
update.earth: using 31 by 1 y saved by keepxy in original call to earth
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
Call: earth(x=new.x, y=structure(c(10.3, 10.3, 10.2, 16.4, 18.8, 
      19.7, 15.6, 18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 
      33.8, 27.4, 25.7, 24.9, 34.5, 31.7, 36.3, 38.3, 42.6, 55.4, 55.7, 
      58.3, 51.5, 51, 77), .Dim=structure(c(31L, 1L), .Names=c("nrow", 
      "ncol")), .Dimnames=list(NULL, "Volume")), wp=1, keepxy=TRUE, 
      trace=4)

x is a 31 by 2 matrix: 1=Height, 2=Volume
First few rows of x are
     Height Volume
[1,]     74   13.3
[2,]     66   14.3
[3,]     65   11.2
[4,]     75   18.4
[5,]     85   21.8
[6,]     84   23.7

y is a 31 by 1 matrix: 1=Volume
First few rows of y are
     Volume
[1,]   10.3
[2,]   10.3
[3,]   10.2
[4,]   16.4
[5,]   18.8
[6,]   19.7

Forward pass: minspan 4 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.9939 0.9954       0.9954    2       Volume        35.7  2   3   
4      0.9919 0.9957    0.0002618    1       Height          75  4   5   reject term

RSq changed by less than 0.001 at 3 terms (DeltaRSq 0.00026)
After forward pass GRSq 0.992 RSq 0.996
Forward pass complete: 3 terms

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.8282  0.8504     0.8282      1  1 2
chosen    3      0.9939  0.9954     0.1656      1  1 2 3

Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.994 RSq 0.995 
> a6  <- earth(new.x, Volume, wp=1, keepxy=TRUE)
> check.models.equal(a6update, a6, msg="\"allowed\" function a6update a6")
check.models.equal identical: "allowed" function a6update a6

> 
> cat("\nupdate(a, wp=2)\n")

update(a, wp=2)
> a7update <- update(a, wp=2)
> a7  <- earth(x, Volume, wp=2, keepxy=TRUE)
> check.models.equal(a7update, a7, msg="\"allowed\" function a7update a7")
check.models.equal identical: "allowed" function a7update a7

> 
> cat("--- \"allowed\" argument -----------------\n")
--- "allowed" argument -----------------
> 
> example1  <- function(degree, pred, parents)
+ {
+     pred != 2  # disallow predictor 2, which is "Height"
+ }
> a1 <- earth(Volume ~ ., data = trees, allowed = example1)
> printh(summary(a1))
===summary(a1) 
Call: earth(formula=Volume~., data=trees, allowed=example1)

            coefficients
(Intercept)    39.289008
h(16-Girth)    -3.993966
h(Girth-16)     8.260584

Selected 3 of 4 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: Girth, Height-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 13.86977    RSS 302.4505    GRSq 0.9503249    RSq 0.9626885
> 
> example1a  <- function(degree, pred, parents, namesx)
+ {
+     namesx[pred] != "Height"  # disallow "Height"
+ }
> a1a <- earth(Volume ~ ., data = trees, allowed = example1a)
> check.models.equal(a1, a1a, msg="\"allowed\" function a1 a1a")
check.models.equal identical: "allowed" function a1 a1a

> 
> iheight <- 0
> example1b  <- function(degree, pred, parents, namesx, first)
+ {
+     if (first) {
+         iheight <<- which(namesx == "Height") # note use of <<- not <-
+         if (length(iheight) != 1)
+             stop("could not find Height in ", paste(namesx, collapse=" "))
+     }
+     pred != iheight
+ }
> a1b <- earth(Volume ~ ., data = trees, allowed = example1b)
> check.models.equal(a1, a1a, msg="\"allowed\" function a1 a1b")
check.models.equal identical: "allowed" function a1 a1b

> 
> example2 <- function(degree, pred, parents)
+ {
+     # disallow humidity in terms of degree > 1
+     # 3 is the "humidity" column in the input matrix
+     if (degree > 1 && (pred == 3 || parents[3]))
+         return(FALSE)
+     TRUE
+ }
> a2 <- earth(O3 ~ ., data = ozone1, degree = 2, allowed = example2)
> printh(summary(a2))
===summary(a2) 
Call: earth(formula=O3~., data=ozone1, degree=2, allowed=example2)

                        coefficients
(Intercept)               14.7106020
h(5860-vh)                -0.0156872
h(temp-58)                 0.3760706
h(ibh-1108)               -0.0006163
h(12-dpg)                 -0.0573010
h(dpg-12)                 -0.0593582
h(150-vis)                 0.0436582
h(92-doy)                 -0.1246113
h(doy-161)                -0.0279655
h(wind-6) * h(1108-ibh)   -0.0063987
h(temp-58) * h(dpg-54)    -0.0164821
h(72-temp) * h(150-vis)   -0.0010316

Selected 12 of 20 terms, and 7 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, doy, ibh, dpg, vis, vh, wind, humidity-unused, ...
Number of terms at each degree of interaction: 1 8 3
GCV 14.89392    RSS 4102.7    GRSq 0.7686404    RSq 0.8057011
> example3 <- function(degree, pred, parents)
+ {
+     # allow only humidity and temp in terms of degree > 1
+     # 3 and 4 are the "humidity" and "temp" columns
+     allowed.set = c(3,4)
+     if (degree > 1 && (all(allowed.set != pred) || any(parents[-allowed.set])))
+         return(FALSE)
+     TRUE
+ }
> a3 <- earth(O3 ~ ., data = ozone1, degree = 2, allowed = example3)
> printh(summary(a3))
===summary(a3) 
Call: earth(formula=O3~., data=ozone1, degree=2, allowed=example3)

                            coefficients
(Intercept)                   12.2362384
h(5860-vh)                    -0.0131310
h(wind-6)                     -0.5693505
h(temp-58)                     0.2620961
h(1108-ibh)                   -0.0027756
h(10-dpg)                     -0.0674008
h(dpg-10)                     -0.0986629
h(ibt-115)                     0.0446180
h(200-vis)                     0.0180038
h(92-doy)                     -0.1052836
h(doy-92)                      0.0446053
h(doy-147)                    -0.0811349
h(55-humidity) * h(temp-58)   -0.0174567

Selected 13 of 20 terms, and 9 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, vis, doy, dpg, humidity, vh, ibh, ibt, wind
Number of terms at each degree of interaction: 1 11 1
GCV 13.89977    RSS 3765.617    GRSq 0.7840834    RSq 0.821665
> 
> ihumidity <- 0
> itemp <- 0
> example3a  <- function(degree, pred, parents, namesx, first)
+ {
+     if (first) {
+         ihumidity <<- which(namesx == "humidity") # note use of <<- not <-
+         if (length(ihumidity) != 1)
+             stop("could not find humidity in ", paste(namesx, collapse=" "))
+         itemp <<- which(namesx == "temp") # note use of <<- not <-
+         if (length(itemp) != 1)
+             stop("could not find temp in ", paste(namesx, collapse=" "))
+     }
+     # allow only humidity and temp in terms of degree > 1
+     allowed.set = c(ihumidity, itemp)
+     if (degree > 1 &&
+            (all(allowed.set != pred) || any(parents[-allowed.set])))
+         return(FALSE)
+     TRUE
+ }
> a3a <- earth(O3 ~ ., data = ozone1, degree = 2, allowed = example3)
> check.models.equal(a3, a3a, msg="\"allowed\" function a3 a3a")
check.models.equal identical: "allowed" function a3 a3a

> 
> # "allowed" function checks, these check error handling by forcing an error
> 
> expect.err(try(earth(Volume ~ ., data = trees, allowed = 99)))
Error in check.allowed.arg(allowed) : 
  your "allowed" argument is not a function
Got error as expected
> 
> example7  <- function(degree, pred) pred!=2
> expect.err(try(earth(Volume ~ ., data = trees, allowed = example7)))
Error : your "allowed" function does not have the correct number of arguments
  The "allowed" function needs the following arguments (but namesx and first are optional):
      degree pred parents namesx first
Got error as expected
> 
> example8  <- function(degree, pred, parents99) pred!=2
> expect.err(try(earth(Volume ~ ., data = trees, allowed = example8)))
Error :   The "allowed" function needs the following arguments (but namesx and first are optional):
      degree pred parents namesx first
  You have:
      degree pred parents99
Got error as expected
> 
> example9  <- function(degree, pred, parents, namesx99) pred!=2
> expect.err(try(earth(Volume ~ ., data = trees, allowed = example9)))
Error :   The "allowed" function needs the following arguments (but namesx and first are optional):
      degree pred parents namesx first
  You have:
      degree pred parents namesx99
Got error as expected
> 
> cat("--- beta cache -------------------------\n")
--- beta cache -------------------------
> 
> a1 <- earth(O3 ~ ., data = ozone1, degree = 3)
> a2 <- earth(O3 ~ ., data = ozone1, degree = 3, Use.beta.cache=FALSE)
> a1$call <- NULL
> a2$call <- NULL
> stopifnot(identical(a1, a2))
> 
> cat("--- test \"call\" printing in earth.default and summary.earth ---\n")
--- test "call" printing in earth.default and summary.earth ---
> # we want to make sure that long x or y aren't printed but short ones are
> 
> x = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0)
> 
> y = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0)
> 
> a <- earth(x = x, y=y, trace=5)
Call: earth(x=x, y=y, trace=5)

x is a 101 by 1 matrix: 1=x
Contents of x are
       x
  [1,] 0
  [2,] 1
  [3,] 2
  [4,] 3
  [5,] 4
  [6,] 5
  [7,] 6
  [8,] 7
  [9,] 8
 [10,] 9
 [11,] 0
 [12,] 1
 [13,] 2
 [14,] 3
 [15,] 4
 [16,] 5
 [17,] 6
 [18,] 7
 [19,] 8
 [20,] 9
 [21,] 0
 [22,] 1
 [23,] 2
 [24,] 3
 [25,] 4
 [26,] 5
 [27,] 6
 [28,] 7
 [29,] 8
 [30,] 9
 [31,] 0
 [32,] 1
 [33,] 2
 [34,] 3
 [35,] 4
 [36,] 5
 [37,] 6
 [38,] 7
 [39,] 8
 [40,] 9
 [41,] 0
 [42,] 1
 [43,] 2
 [44,] 3
 [45,] 4
 [46,] 5
 [47,] 6
 [48,] 7
 [49,] 8
 [50,] 9
 [51,] 0
 [52,] 1
 [53,] 2
 [54,] 3
 [55,] 4
 [56,] 5
 [57,] 6
 [58,] 7
 [59,] 8
 [60,] 9
 [61,] 0
 [62,] 1
 [63,] 2
 [64,] 3
 [65,] 4
 [66,] 5
 [67,] 6
 [68,] 7
 [69,] 8
 [70,] 9
 [71,] 0
 [72,] 1
 [73,] 2
 [74,] 3
 [75,] 4
 [76,] 5
 [77,] 6
 [78,] 7
 [79,] 8
 [80,] 9
 [81,] 0
 [82,] 1
 [83,] 2
 [84,] 3
 [85,] 4
 [86,] 5
 [87,] 6
 [88,] 7
 [89,] 8
 [90,] 9
 [91,] 0
 [92,] 1
 [93,] 2
 [94,] 3
 [95,] 4
 [96,] 5
 [97,] 6
 [98,] 7
 [99,] 8
[100,] 9
[101,] 0

y is a 101 by 1 matrix: 1=y
Contents of y are
       y
  [1,] 0
  [2,] 1
  [3,] 2
  [4,] 3
  [5,] 4
  [6,] 5
  [7,] 6
  [8,] 7
  [9,] 8
 [10,] 9
 [11,] 0
 [12,] 1
 [13,] 2
 [14,] 3
 [15,] 4
 [16,] 5
 [17,] 6
 [18,] 7
 [19,] 8
 [20,] 9
 [21,] 0
 [22,] 1
 [23,] 2
 [24,] 3
 [25,] 4
 [26,] 5
 [27,] 6
 [28,] 7
 [29,] 8
 [30,] 9
 [31,] 0
 [32,] 1
 [33,] 2
 [34,] 3
 [35,] 4
 [36,] 5
 [37,] 6
 [38,] 7
 [39,] 8
 [40,] 9
 [41,] 0
 [42,] 1
 [43,] 2
 [44,] 3
 [45,] 4
 [46,] 5
 [47,] 6
 [48,] 7
 [49,] 8
 [50,] 9
 [51,] 0
 [52,] 1
 [53,] 2
 [54,] 3
 [55,] 4
 [56,] 5
 [57,] 6
 [58,] 7
 [59,] 8
 [60,] 9
 [61,] 0
 [62,] 1
 [63,] 2
 [64,] 3
 [65,] 4
 [66,] 5
 [67,] 6
 [68,] 7
 [69,] 8
 [70,] 9
 [71,] 0
 [72,] 1
 [73,] 2
 [74,] 3
 [75,] 4
 [76,] 5
 [77,] 6
 [78,] 7
 [79,] 8
 [80,] 9
 [81,] 0
 [82,] 1
 [83,] 2
 [84,] 3
 [85,] 4
 [86,] 5
 [87,] 6
 [88,] 7
 [89,] 8
 [90,] 9
 [91,] 0
 [92,] 1
 [93,] 2
 [94,] 3
 [95,] 4
 [96,] 5
 [97,] 6
 [98,] 7
 [99,] 8
[100,] 9
[101,] 0

earth.c version 4.1.0
BetaCache 3.53 kB
Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      1.0000 1.0000            1    1            x           0< 2       

Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> 
> a.longx  <- earth(x = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   y=y,
+                   trace=4)
Call: earth(x="[102, 1]-too-long-to-display", y=y, trace=4)

x is a 101 by 1 matrix: 1=x
First few rows of x are
     x
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5

y is a 101 by 1 matrix: 1=y
First few rows of y are
     y
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5

Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      1.0000 1.0000            1    1            x           0< 2       

Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> 
> a.longy  <- earth(x = x,
+                   y = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   trace=4)
Call: earth(x=x, y="[102, 1]-too-long-to-display", trace=4)

x is a 101 by 1 matrix: 1=x
First few rows of x are
     x
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5

y is a 101 by 1 matrix: 1=y
First few rows of y are
     y
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5

Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      1.0000 1.0000            1    1            x           0< 2       

Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> 
> a.longxy <- earth(x = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   y = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   trace=4)
Call: earth(x="[102, 1]-too-long-to-display", y="[102, 1]-too-long-to-display", 
      trace=4)

x is a 101 by 1 matrix: 1=x
First few rows of x are
     x
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5

y is a 101 by 1 matrix: 1=y
First few rows of y are
     y
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5

Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      1.0000 1.0000            1    1            x           0< 2       

Reached maximum RSq 0.9990 at 3 terms (RSq 1.0000)
After forward pass GRSq 1.000 RSq 1.000
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> printh(summary(a))
===summary(a) 
Call: earth(x=x, y=y, trace=5)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: Reached maximum RSq 0.9990 at 2 terms
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 1.133748e-30    RSS 1.078071e-28    GRSq 1    RSq 1
> printh(summary(a.longx))
===summary(a.longx) 
Call: earth(x="[102, 1]-too-long-to-display", y=y, trace=4)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: Reached maximum RSq 0.9990 at 2 terms
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 1.133748e-30    RSS 1.078071e-28    GRSq 1    RSq 1
> printh(summary(a.longy))
===summary(a.longy) 
Call: earth(x=x, y="[102, 1]-too-long-to-display", trace=4)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: Reached maximum RSq 0.9990 at 2 terms
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 1.133748e-30    RSS 1.078071e-28    GRSq 1    RSq 1
> printh(summary(a.longxy))
===summary(a.longxy) 
Call: earth(x="[102, 1]-too-long-to-display", y="[102, 1]-too-long-to-display", 
      trace=4)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: Reached maximum RSq 0.9990 at 2 terms
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 1.133748e-30    RSS 1.078071e-28    GRSq 1    RSq 1
> printh(summary(a.longxy, style="bf"))
===summary(a.longxy, style = "bf") 
Call: earth(x="[102, 1]-too-long-to-display", y="[102, 1]-too-long-to-display", 
      trace=4)

y =
  -7.070164e-16
  + 1 * bf1

   bf1  x

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: Reached maximum RSq 0.9990 at 2 terms
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 1.133748e-30    RSS 1.078071e-28    GRSq 1    RSq 1
> 
> cat("--- factors with x,y interface -------------------------\n")
--- factors with x,y interface -------------------------
> # this also tests for integer variables in the input matrix
> data(etitanic)
> attach(etitanic)
> a1 <- earth(pclass, sex, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 2 matrix: 1=2nd, 2=3rd
y is a 1046 by 1 matrix: 1=sex
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0133 0.0180      0.01797    2          3rd           0< 2       
4      0.0116 0.0210     0.003025    1          2nd           0< 3       
6      0.0068 0.0210            0    -                                reject term

RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.007 RSq 0.021
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 2 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.0133 RSq 0.018 
> printh(summary(a1))
===summary(a1) 
Call: earth(x=pclass, y=sex, trace=2, degree=2)

            coefficients
(Intercept)    0.5669725
3rd            0.1296343

Selected 2 of 3 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: 3rd, 2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> printh(summary(a1, style="bf"))
===summary(a1, style = "bf") 
Call: earth(x=pclass, y=sex, trace=2, degree=2)

sex =
  0.5669725
  + 0.1296343 * bf1

   bf1  3rd

Selected 2 of 3 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: 3rd, 2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> if (PLOT)
+     plot(a1)
> a2 <- earth(sex, pclass, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 1 matrix: 1=sex
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0073 0.0120      0.01202    1          sex           0< 2       
4      0.0025 0.0120            0    -                                reject term

RSq changed by less than 0.001 at 3 terms (DeltaRSq 0)
After forward pass GRSq 0.003 RSq 0.012
Forward pass complete: 3 terms (2 terms used)
Prune method "backward" penalty 3 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 0.00728 RSq 0.012 
> printh(summary(a2))
===summary(a2) 
Call: earth(x=sex, y=pclass, trace=2, degree=2)

                   1st         2nd       3rd
(Intercept)  0.3427835  0.26546392 0.3917526
sex         -0.1133002 -0.02534234 0.1386426

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 2 terms
Importance: sex
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq          RSq
1st 0.1961073 203.7578  0.010414990 0.0151441824
2nd 0.1883694 195.7180 -0.003997793 0.0008002778
3rd 0.2467207 256.3457  0.013257223 0.0179728324
All 0.6311974 655.8215  0.007279765 0.0120239411
> if (PLOT)
+     plot(a2)
> a3 <- earth(pclass, age, degree=2, trace=2)        # x=unordered y=numeric
x is a 1046 by 2 matrix: 1=2nd, 2=3rd
y is a 1046 by 1 matrix: 1=age
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.1094 0.1136       0.1136    2          3rd           0< 2       
4      0.1640 0.1720      0.05838    1          2nd           0< 3       
6      0.1600 0.1720            0    -                                reject term

RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.160 RSq 0.172
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.164 RSq 0.172 
> printh(summary(a3))
===summary(a3) 
Call: earth(x=pclass, y=age, trace=2, degree=2)

            coefficients
(Intercept)    39.159918
2nd            -9.653213
3rd           -14.343551

Selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: 3rd, 2nd
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 173.8417    RSS 179758.3    GRSq 0.1640128    RSq 0.1719935
> if (PLOT)
+     plot(a3)
> a4 <- earth(age, pclass, degree=2, trace=2)        # x=numeric y=unordered
x is a 1046 by 1 matrix: 1=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0893 0.0980      0.09797    1          age          26  2   3   
4      0.0891 0.1021     0.004178    1          age          55  4       
6      0.0881 0.1055     0.003357    1          age          16  5       
8      0.0849 0.1067      0.00116    1          age          44  6       
10     0.0813 0.1075    0.0008104    1          age          48  7       reject term

RSq changed by less than 0.001 at 9 terms (DeltaRSq 0.00081)
After forward pass GRSq 0.081 RSq 0.107
Forward pass complete: 9 terms (6 terms used)
Prune method "backward" penalty 3 nprune 6: selected 2 of 6 terms, and 1 of 1 predictors
After backward pass GRSq 0.093 RSq 0.0974 
> printh(summary(a4))
===summary(a4) 
Call: earth(x=age, y=pclass, trace=2, degree=2)

                   1st           2nd         3rd
(Intercept) 0.06439450  0.2563335580  0.67927195
h(age-16)   0.01388561 -0.0004566659 -0.01342895

Selected 2 of 6 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: age
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq        RSq
1st 0.1670033 173.5184  0.157277818 0.16130516
2nd 0.1884855 195.8387 -0.004616749 0.00018428
3rd 0.2211945 229.8237  0.115347486 0.11957521
All 0.5766834 599.1808  0.093017132 0.09735157
> if (PLOT)
+     plot(a4)
> a5 <- earth(etitanic[,c(2:4)], pclass, degree=2, trace=2)  # x=mixed  y=unordered
x is a 1046 by 3 matrix: 1=survived, 2=sexmale, 3=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0893 0.0980      0.09797    3          age          26  2   3   
4      0.1500 0.1622       0.0642    1     survived           0< 4       
6      0.1557 0.1758      0.01364    3          age          16  5   6   4   
8      0.1603 0.1842     0.008445    2      sexmale           0< 7       4   
10     0.1631 0.1909     0.006652    2      sexmale           0< 8       
12     0.1616 0.1934     0.002532    3          age          56  9       
14     0.1598 0.1956     0.002142    2      sexmale           0< 10      2   
16     0.1532 0.1971      0.00157    3          age          55  11  12  10  
18     0.1497 0.1978    0.0006704    3          age          44  13      reject term

RSq changed by less than 0.001 at 17 terms (DeltaRSq 0.00067)
After forward pass GRSq 0.150 RSq 0.198
Forward pass complete: 17 terms (12 terms used)
Prune method "backward" penalty 3 nprune 12: selected 9 of 12 terms, and 3 of 3 predictors
After backward pass GRSq 0.163 RSq 0.195 
> printh(summary(a5))
===summary(a5) 
Call: earth(x=etitanic[, c(2:4)], y=pclass, trace=2, degree=2)

                             1st          2nd         3rd
(Intercept)          -0.01985123  0.229009299  0.79084193
survived              0.36426631  0.158983782 -0.52325009
h(26-age)            -0.00062287 -0.015746198  0.01636907
h(age-26)             0.01542210 -0.006911119 -0.00851098
survived * sexmale   -0.08275489 -0.308771690  0.39152658
survived * h(16-age) -0.02134375  0.038966434 -0.01762268
sexmale * h(age-26)   0.00618934  0.007551127 -0.01374047
sexmale * h(age-55)  -0.02575309 -0.002002911  0.02775600
sexmale * h(55-age)   0.00185826  0.002877292 -0.00473556

Selected 9 of 12 terms, and 3 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 12 terms
Importance: age, survived, sexmale
Number of terms at each degree of interaction: 1 3 5

          GCV      RSS       GRSq        RSq
1st 0.1505645 151.2302 0.24023053 0.26903432
2nd 0.1845750 185.3911 0.01622629 0.05352236
3rd 0.1969663 197.8372 0.21224655 0.24211125
All 0.5321058 534.4585 0.16312688 0.19485376
> if (PLOT)
+     plot(a5)
> a6 <- earth(etitanic[,c(1,3,4,5,6)], survived, degree=2, trace=2)  # x=mixed y=unordered
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, 6=parch
y is a 1046 by 1 matrix: 1=survived
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.2860 0.2894       0.2894    3      sexmale           0< 2       
4      0.3297 0.3361      0.04669    2    pclass3rd           0< 3       
6      0.3588 0.3710      0.03488    4          age          16  4   5   2   
8      0.3962 0.4106      0.03954    1    pclass2nd           0< 6       2   
10     0.4143 0.4338       0.0232    5        sibsp           4  7   8   4   
12     0.4133 0.4383     0.004574    6        parch           1  9   10  
14     0.4150 0.4427      0.00437    2    pclass3rd           0< 11      2   
16     0.4116 0.4449     0.002169    5        sibsp           1  12  13  2   
18     0.4080 0.4470     0.002107    4          age          67  14  15  
20     0.4077 0.4494     0.002459    4          age          32  16      2   

Reached nk 21
After forward pass GRSq 0.408 RSq 0.449
Forward pass complete: 21 terms (16 terms used)
Prune method "backward" penalty 3 nprune 16: selected 8 of 16 terms, and 5 of 6 predictors
After backward pass GRSq 0.42 RSq 0.44 
> printh(summary(a6))
===summary(a6) 
Call: earth(x=etitanic[, c(1, 3, 4, 5, 6)], y=survived, trace=2, 
      degree=2)

                       coefficients
(Intercept)              0.93220339
pclass3rd               -0.79260605
sexmale                 -0.52285414
pclass2nd * sexmale     -0.27557684
pclass3rd * sexmale      0.15747555
pclass3rd * h(4-sibsp)   0.10197029
sexmale * h(16-age)      0.04451734
sexmale * h(age-32)     -0.00624638

Selected 8 of 16 terms, and 5 of 6 predictors 
Termination condition: Reached nk 21
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch-unused
Number of terms at each degree of interaction: 1 2 5
GCV 0.1402703    RSS 141.5787    GRSq 0.4204646    RSq 0.4397124
> if (PLOT)
+     plot(a6)
> a7 <- earth(etitanic[,c(2,3,5,6)], etitanic[,c(1,4)], degree=2, trace=2)  # x=mixed y=mixed
x is a 1046 by 4 matrix: 1=survived, 2=sexmale, 3=sibsp, 4=parch
y is a 1046 by 4 matrix: 1=pclass1st, 2=pclass2nd, 3=pclass3rd, 4=age
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0813 0.0901      0.09011    4        parch           2  2   3   
4      0.1049 0.1219      0.03183    3        sibsp           1  4   5   
6      0.1068 0.1323      0.01034    4        parch           1  6   7   4   
8      0.1089 0.1385     0.006171    4        parch           4  8       
10     0.1093 0.1431      0.00463    3        sibsp           2  9       
12     0.1043 0.1466     0.003515    4        parch           1  10  11  5   
14     0.1024 0.1491     0.002463    2      sexmale           0< 12      3   
16     0.0998 0.1507     0.001651    1     survived           0< 13      4   
18     0.0974 0.1526     0.001929    1     survived           0< 14      10  
20     0.0944 0.1540     0.001385    4        parch           1  15      

Reached nk 21
After forward pass GRSq 0.094 RSq 0.154
Forward pass complete: 21 terms (15 terms used)
Prune method "backward" penalty 3 nprune 15: selected 7 of 15 terms, and 2 of 4 predictors
After backward pass GRSq 0.113 RSq 0.138 
> printh(summary(a7))
===summary(a7) 
Call: earth(x=etitanic[, c(2, 3, 5, 6)], y=etitanic[, c(1, 4)], 
      trace=2, degree=2)

                          pclass1st   pclass2nd   pclass3rd        age
(Intercept)              0.36758408  0.35266924  0.27974668  22.291896
h(sibsp-1)              -0.12882542 -0.08036041  0.20918583  -7.715668
h(2-parch)              -0.04851620 -0.05326897  0.10178517   4.853565
h(parch-2)              -0.03888370 -0.12184854  0.16073223  13.049389
h(parch-4)              -0.16812822  0.04401127  0.12411695 -18.899871
h(sibsp-1) * h(parch-1)  0.05211343 -0.02136815 -0.03074529   4.418743
h(sibsp-1) * h(1-parch)  0.06525217  0.09912874 -0.16438091   7.403960

Selected 7 of 15 terms, and 2 of 4 predictors 
Termination condition: Reached nk 21
Importance: sibsp, parch, survived-unused, sexmale-unused
Number of terms at each degree of interaction: 1 4 2

                 GCV        RSS        GRSq        RSq
pclass1st   0.200320    203.173 -0.01084030 0.01797077
pclass2nd   0.189624    192.326 -0.01068680 0.01811990
pclass3rd   0.243908    247.383  0.02450493 0.05230858
age       184.482965 187110.877  0.11283993 0.13812585
All       185.116817 187753.758  0.11250542 0.13780087
> if (PLOT)
+     plot(a7)
> 
> cat("--- factors with formula interface -------------------------\n")
--- factors with formula interface -------------------------
> # these correspond to the models above (except a7 which is a multiple response model)
> a1f <- earth(sex ~ pclass, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 2 matrix: 1=pclass2nd, 2=pclass3rd
y is a 1046 by 1 matrix: 1=male
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0133 0.0180      0.01797    2    pclass3rd           0< 2       
4      0.0116 0.0210     0.003025    1    pclass2nd           0< 3       
6      0.0068 0.0210            0    -                                reject term

RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.007 RSq 0.021
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 2 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.0133 RSq 0.018 
> printh(summary(a1f))
===summary(a1f) 
Call: earth(formula=sex~pclass, trace=2, degree=2)

            coefficients
(Intercept)    0.5669725
pclass3rd      0.1296343

Selected 2 of 3 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: pclass3rd, pclass2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> printh(summary(a1f, style="bf"))
===summary(a1f, style = "bf") 
Call: earth(formula=sex~pclass, trace=2, degree=2)

male =
  0.5669725
  + 0.1296343 * bf1

   bf1  pclass3rd

Selected 2 of 3 terms, and 1 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: pclass3rd, pclass2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> if (PLOT)
+     plot(a1f)
> a2f <- earth(pclass ~ sex, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 1 matrix: 1=sexmale
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0073 0.0120      0.01202    1      sexmale           0< 2       
4      0.0025 0.0120            0    -                                reject term

RSq changed by less than 0.001 at 3 terms (DeltaRSq 0)
After forward pass GRSq 0.003 RSq 0.012
Forward pass complete: 3 terms (2 terms used)
Prune method "backward" penalty 3 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 0.00728 RSq 0.012 
> printh(summary(a2f))
===summary(a2f) 
Call: earth(formula=pclass~sex, trace=2, degree=2)

                   1st         2nd       3rd
(Intercept)  0.3427835  0.26546392 0.3917526
sexmale     -0.1133002 -0.02534234 0.1386426

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 2 terms
Importance: sexmale
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq          RSq
1st 0.1961073 203.7578  0.010414990 0.0151441824
2nd 0.1883694 195.7180 -0.003997793 0.0008002778
3rd 0.2467207 256.3457  0.013257223 0.0179728324
All 0.6311974 655.8215  0.007279765 0.0120239411
> if (PLOT)
+     plot(a2f)
> a3f <- earth(age ~ pclass, degree=2, trace=2)        # x=unordered y=numeric
x is a 1046 by 2 matrix: 1=pclass2nd, 2=pclass3rd
y is a 1046 by 1 matrix: 1=age
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.1094 0.1136       0.1136    2    pclass3rd           0< 2       
4      0.1640 0.1720      0.05838    1    pclass2nd           0< 3       
6      0.1600 0.1720            0    -                                reject term

RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.160 RSq 0.172
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.164 RSq 0.172 
> printh(summary(a3f))
===summary(a3f) 
Call: earth(formula=age~pclass, trace=2, degree=2)

            coefficients
(Intercept)    39.159918
pclass2nd      -9.653213
pclass3rd     -14.343551

Selected 3 of 3 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 3 terms
Importance: pclass3rd, pclass2nd
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 173.8417    RSS 179758.3    GRSq 0.1640128    RSq 0.1719935
> if (PLOT)
+     plot(a3f)
> a4f <- earth(pclass ~ age, degree=2, trace=2)        # x=numeric y=unordered
x is a 1046 by 1 matrix: 1=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0893 0.0980      0.09797    1          age          26  2   3   
4      0.0891 0.1021     0.004178    1          age          55  4       
6      0.0881 0.1055     0.003357    1          age          16  5       
8      0.0849 0.1067      0.00116    1          age          44  6       
10     0.0813 0.1075    0.0008104    1          age          48  7       reject term

RSq changed by less than 0.001 at 9 terms (DeltaRSq 0.00081)
After forward pass GRSq 0.081 RSq 0.107
Forward pass complete: 9 terms (6 terms used)
Prune method "backward" penalty 3 nprune 6: selected 2 of 6 terms, and 1 of 1 predictors
After backward pass GRSq 0.093 RSq 0.0974 
> printh(summary(a4f))
===summary(a4f) 
Call: earth(formula=pclass~age, trace=2, degree=2)

                   1st           2nd         3rd
(Intercept) 0.06439450  0.2563335580  0.67927195
h(age-16)   0.01388561 -0.0004566659 -0.01342895

Selected 2 of 6 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: age
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq        RSq
1st 0.1670033 173.5184  0.157277818 0.16130516
2nd 0.1884855 195.8387 -0.004616749 0.00018428
3rd 0.2211945 229.8237  0.115347486 0.11957521
All 0.5766834 599.1808  0.093017132 0.09735157
> if (PLOT)
+     plot(a4f)
> a5f <- earth(pclass ~ survived + sex + age, data=etitanic, degree=2, trace=2)  # x=mixed y=unordered
x is a 1046 by 3 matrix: 1=survived, 2=sexmale, 3=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.0893 0.0980      0.09797    3          age          26  2   3   
4      0.1500 0.1622       0.0642    1     survived           0< 4       
6      0.1557 0.1758      0.01364    3          age          16  5   6   4   
8      0.1603 0.1842     0.008445    2      sexmale           0< 7       4   
10     0.1631 0.1909     0.006652    2      sexmale           0< 8       
12     0.1616 0.1934     0.002532    3          age          56  9       
14     0.1598 0.1956     0.002142    2      sexmale           0< 10      2   
16     0.1532 0.1971      0.00157    3          age          55  11  12  10  
18     0.1497 0.1978    0.0006704    3          age          44  13      reject term

RSq changed by less than 0.001 at 17 terms (DeltaRSq 0.00067)
After forward pass GRSq 0.150 RSq 0.198
Forward pass complete: 17 terms (12 terms used)
Prune method "backward" penalty 3 nprune 12: selected 9 of 12 terms, and 3 of 3 predictors
After backward pass GRSq 0.163 RSq 0.195 
> printh(summary(a5f))
===summary(a5f) 
Call: earth(formula=pclass~survived+sex+age, data=etitanic, 
      trace=2, degree=2)

                             1st          2nd         3rd
(Intercept)          -0.01985123  0.229009299  0.79084193
survived              0.36426631  0.158983782 -0.52325009
h(26-age)            -0.00062287 -0.015746198  0.01636907
h(age-26)             0.01542210 -0.006911119 -0.00851098
survived * sexmale   -0.08275489 -0.308771690  0.39152658
survived * h(16-age) -0.02134375  0.038966434 -0.01762268
sexmale * h(age-26)   0.00618934  0.007551127 -0.01374047
sexmale * h(age-55)  -0.02575309 -0.002002911  0.02775600
sexmale * h(55-age)   0.00185826  0.002877292 -0.00473556

Selected 9 of 12 terms, and 3 of 3 predictors 
Termination condition: RSq changed by less than 0.001 at 12 terms
Importance: age, survived, sexmale
Number of terms at each degree of interaction: 1 3 5

          GCV      RSS       GRSq        RSq
1st 0.1505645 151.2302 0.24023053 0.26903432
2nd 0.1845750 185.3911 0.01622629 0.05352236
3rd 0.1969663 197.8372 0.21224655 0.24211125
All 0.5321058 534.4585 0.16312688 0.19485376
> if (PLOT)
+     plot(a5f)
> a6f <- earth(survived ~ ., data=etitanic, degree=2, trace=2)  # x=mixed y=unordered
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, 6=parch
y is a 1046 by 1 matrix: 1=survived
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.2860 0.2894       0.2894    3      sexmale           0< 2       
4      0.3297 0.3361      0.04669    2    pclass3rd           0< 3       
6      0.3588 0.3710      0.03488    4          age          16  4   5   2   
8      0.3962 0.4106      0.03954    1    pclass2nd           0< 6       2   
10     0.4143 0.4338       0.0232    5        sibsp           4  7   8   4   
12     0.4133 0.4383     0.004574    6        parch           1  9   10  
14     0.4150 0.4427      0.00437    2    pclass3rd           0< 11      2   
16     0.4116 0.4449     0.002169    5        sibsp           1  12  13  2   
18     0.4080 0.4470     0.002107    4          age          67  14  15  
20     0.4077 0.4494     0.002459    4          age          32  16      2   

Reached nk 21
After forward pass GRSq 0.408 RSq 0.449
Forward pass complete: 21 terms (16 terms used)
Prune method "backward" penalty 3 nprune 16: selected 8 of 16 terms, and 5 of 6 predictors
After backward pass GRSq 0.42 RSq 0.44 
> printh(summary(a6f))
===summary(a6f) 
Call: earth(formula=survived~., data=etitanic, trace=2, degree=2)

                       coefficients
(Intercept)              0.93220339
pclass3rd               -0.79260605
sexmale                 -0.52285414
pclass2nd * sexmale     -0.27557684
pclass3rd * sexmale      0.15747555
pclass3rd * h(4-sibsp)   0.10197029
sexmale * h(16-age)      0.04451734
sexmale * h(age-32)     -0.00624638

Selected 8 of 16 terms, and 5 of 6 predictors 
Termination condition: Reached nk 21
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch-unused
Number of terms at each degree of interaction: 1 2 5
GCV 0.1402703    RSS 141.5787    GRSq 0.4204646    RSq 0.4397124
> if (PLOT)
+     plot(a6f)
> detach(etitanic)
> 
> # basic test with ordered factors
> ff <- factor(substring("statistics", 1:10, 1:10), levels=letters, ordered=TRUE)
> ff <- c(ff, ff, ff)
> vowels = (ff == 1 | ff == 9) * 3
> printh(head(ff))
===head(ff) 
[1] 19 20  1 20  9 19
> printh(head(vowels))
===head(vowels) 
[1] 0 0 3 0 3 0
> a8 <- earth(ff, vowels, degree=1, trace=2)        # x=ordered y=numeric
x is a 30 by 1 matrix: 1=ff
y is a 30 by 1 matrix: 1=vowels
Forward pass: minspan 3 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.5906 0.6958       0.6958    1           ff           9  2   3   
4      0.5250 0.7012     0.005454    1           ff          19  4       
6      0.4302 0.7012            0    -                                reject term

RSq changed by less than 0.001 at 5 terms (DeltaRSq 0)
After forward pass GRSq 0.430 RSq 0.701
Forward pass complete: 5 terms (4 terms used)
Prune method "backward" penalty 2 nprune 4: selected 3 of 4 terms, and 1 of 1 predictors
After backward pass GRSq 0.591 RSq 0.696 
> printh(summary(a8))
===summary(a8) 
Call: earth(x=ff, y=vowels, trace=2, degree=1)

            coefficients
(Intercept)    2.7464305
h(9-ff)       -0.1445003
h(ff-9)       -0.2609730

Selected 3 of 4 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 4 terms
Importance: ff
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 0.828019    RSS 17.2504    GRSq 0.5906149    RSq 0.6957602
> if (PLOT)
+     plot(a8)
> a9 <- earth(vowels, ff, degree=1, trace=2)        # x=numeric y=ordered
x is a 30 by 1 matrix: 1=vowels
y is a 30 by 1 matrix: 1=ff
Forward pass: minspan 3 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                    (Intercept)
2      0.3877 0.4693       0.4693    1       vowels           0< 2       
4      0.2858 0.4693            0    -                                reject term

RSq changed by less than 0.001 at 3 terms (DeltaRSq 0)
After forward pass GRSq 0.286 RSq 0.469
Forward pass complete: 3 terms (2 terms used)
Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 0.388 RSq 0.469 
> if (PLOT)
+     plot(a9)
> printh(summary(a9))
===summary(a9) 
Call: earth(x=vowels, y=ff, trace=2, degree=1)

            coefficients
(Intercept)    17.142857
vowels         -3.603175

Selected 2 of 2 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 2 terms
Importance: vowels
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 34.2622    RSS 832.5714    GRSq 0.38772    RSq 0.4692603
> 
> cat("--- wp argument---------------------------------\n")
--- wp argument---------------------------------
> set.seed(79)
> NWP <- 100
> x1 <- runif(NWP)
> x2 <- runif(NWP)
> y1 <- (x1 > .5) + .3 * runif(1)
> y2 <- sin(3 * x2) + .3 * runif(1)
> myw <- 10
> m <- mars(cbind(x1,x2), cbind(y1, y2))
> me1 <- mars.to.earth(m)
Converted mars(x=cbind(x1, x2), y=cbind(y1, y2))

to        earth(x=cbind(x1, x2), y=cbind(y1, y2))

> printh(me1)
===me1 
Selected 7 of 13 terms, and 2 of 2 predictors 
Termination condition: Unknown
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0212617234 1.60929985 0.9166455 0.9356280
y2  0.0006116807 0.04629811 0.9940111 0.9953750
All 0.0218734041 1.65559796 0.9390624 0.9529398
> e1 <- earth(cbind(x1,x2), cbind(y1, y2))
> printh(e1)
===e1 
Selected 7 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0198479574 1.50229190 0.9221881 0.9399083
y2  0.0007267033 0.05500417 0.9928850 0.9945053
All 0.0205746607 1.55729607 0.9424021 0.9555190
> e2 <- earth(cbind(x1,x2), cbind(y1, y2),  wp=c(1,1))
> printh(e2)
===e2 
Selected 7 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0198479574 1.50229190 0.9221881 0.9399083
y2  0.0007267033 0.05500417 0.9928850 0.9945053
All 0.0205746607 1.55729607 0.9424021 0.9555190
> e1$call <- NULL
> e2$call <- NULL
> e1$wp <- NULL
> e2$wp <- NULL
> stopifnot(identical(e1, e2))
> e3 <- earth(cbind(x1,x2), cbind(y1, y2),  wp=c(.001,1))
> printh(e3)
===e3 
Selected 7 of 8 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 8 terms
Importance: x2, x1
Number of terms at each degree of interaction: 1 6 (additive model)

            GCV       RSS      GRSq       RSq
y1  0.058928797 4.4603206 0.7689755 0.8215872
y2  0.000290747 0.0220067 0.9971533 0.9978016
All 0.000698654 0.0528811 0.9965849 0.9973626
> wp <- c(1, 2)
> e3 <- earth(cbind(x1,x2), cbind(y1, y2),  wp=wp)
> printh(e3)
===e3 
Selected 7 of 9 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 9 terms
Importance: x1, x2
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0198479574 1.50229190 0.9221881 0.9399083
y2  0.0007267033 0.05500417 0.9928850 0.9945053
All 0.0142009094 1.07486683 0.9536270 0.9641876
> m3 <- mars(cbind(x1,x2), cbind(y1, y2),  wp=wp)
> cat("response weights: wp", wp, "earth gcv", e3$gcv,
+     "mars gcv", m3$gcv, "mars gcv*length(wp)",
+     m3$gcv * length(wp), "\n")
response weights: wp 1 2 earth gcv 0.01420091 mars gcv 0.007495028 mars gcv*length(wp) 0.01499006 
> 
> e4 <- earth(cbind(O3, O3) ~ ., data=ozone1, wp=c(1, .01))
> printh(e4) # both sub models should be the same
===e4 
Selected 12 of 20 terms, and 9 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, dpg, doy, vh, vis, ibt, ibh, wind
Number of terms at each degree of interaction: 1 11 (additive model)

          GCV      RSS      GRSq      RSq
O3   14.57458 4162.543 0.7736011 0.802867
O3.1 14.57458 4162.543 0.7736011 0.802867
All  29.14915 8325.086 0.7736011 0.802867
> printh(summary(e4))
===summary(e4) 
Call: earth(formula=cbind(O3, O3)~., data=ozone1, wp=c(1, 0.01))

                       O3       O3.1
(Intercept)    12.0867717 12.0867717
h(5860-vh)     -0.0142909 -0.0142909
h(9-wind)       0.3068046  0.3068046
h(55-humidity) -0.1323516 -0.1323516
h(temp-58)      0.2738271  0.2738271
h(1108-ibh)    -0.0032738 -0.0032738
h(dpg-12)      -0.1033652 -0.1033652
h(ibt-121)      0.0327032  0.0327032
h(150-vis)      0.0229979  0.0229979
h(92-doy)      -0.1160733 -0.1160733
h(doy-92)       0.0402500  0.0402500
h(doy-161)     -0.0849455 -0.0849455

Selected 12 of 20 terms, and 9 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, dpg, doy, vh, vis, ibt, ibh, wind
Number of terms at each degree of interaction: 1 11 (additive model)

          GCV      RSS      GRSq      RSq
O3   14.57458 4162.543 0.7736011 0.802867
O3.1 14.57458 4162.543 0.7736011 0.802867
All  29.14915 8325.086 0.7736011 0.802867
> 
> # wp with formula interface
> e5 <- earth(cbind(O3, wind) ~ ., data=ozone1, wp=c(1, 1))
> printh(e5)
===e5 
Selected 12 of 19 terms, and 8 of 8 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, dpg, doy, vh, vis, ibh, ibt
Number of terms at each degree of interaction: 1 11 (additive model)

          GCV      RSS      GRSq      RSq
O3   14.96709 4274.645 0.7675039 0.797558
wind  3.48393  995.021 0.2249587 0.325146
All  18.45102 5269.667 0.7320923 0.766724
> printh(summary(e5))
===summary(e5) 
Call: earth(formula=cbind(O3, wind)~., data=ozone1, wp=c(1, 
      1))

                       O3       wind
(Intercept)    10.3383209  5.7093794
h(5600-vh)     -0.0207544  0.0128770
h(vh-5600)      0.0190012 -0.0061340
h(53-humidity) -0.1572721  0.0142272
h(temp-57)      0.2798804  0.0454989
h(1108-ibh)    -0.0032803 -0.0008838
h(dpg-12)      -0.0922367  0.0034183
h(ibt-121)      0.0320148 -0.0035841
h(150-vis)      0.0211232  0.0001958
h(92-doy)      -0.1406669 -0.0121341
h(doy-161)     -0.0430498  0.0069691
h(doy-297)      0.0312077 -0.0530574

Selected 12 of 19 terms, and 8 of 8 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, dpg, doy, vh, vis, ibh, ibt
Number of terms at each degree of interaction: 1 11 (additive model)

          GCV      RSS      GRSq      RSq
O3   14.96709 4274.645 0.7675039 0.797558
wind  3.48393  995.021 0.2249587 0.325146
All  18.45102 5269.667 0.7320923 0.766724
> e5 <- earth(cbind(O3, wind) ~ ., data=ozone1, wp=c(.3, 1))
> printh(e5)
===e5 
Selected 11 of 19 terms, and 7 of 8 predictors 
Termination condition: Reached nk 21
Importance: temp, ibh, doy, humidity, dpg, vh, vis, ibt-unused
Number of terms at each degree of interaction: 1 10 (additive model)

          GCV       RSS      GRSq       RSq
O3   15.25710 4414.4343 0.7629989 0.7909377
wind  3.39878  983.3907 0.2439013 0.3330341
All  12.27063 3550.3400 0.6649882 0.7044811
> printh(summary(e5))
===summary(e5) 
Call: earth(formula=cbind(O3, wind)~., data=ozone1, wp=c(0.3, 
      1))

                       O3       wind
(Intercept)     7.4269467  4.6886758
h(5600-vh)     -0.0118840  0.0123094
h(vh-5600)      0.0164226 -0.0037200
h(humidity-33)  0.0906676  0.0111231
h(temp-55)      0.3648088  0.0303233
h(ibh-1108)    -0.0004439  0.0002888
h(dpg-12)      -0.0851197  0.0008928
h(200-vis)      0.0169153 -0.0009111
h(92-doy)      -0.1484936 -0.0104211
h(doy-154)     -0.0379418  0.0027725
h(doy-297)      0.0226755 -0.0411623

Selected 11 of 19 terms, and 7 of 8 predictors 
Termination condition: Reached nk 21
Importance: temp, ibh, doy, humidity, dpg, vh, vis, ibt-unused
Number of terms at each degree of interaction: 1 10 (additive model)

          GCV       RSS      GRSq       RSq
O3   15.25710 4414.4343 0.7629989 0.7909377
wind  3.39878  983.3907 0.2439013 0.3330341
All  12.27063 3550.3400 0.6649882 0.7044811
> # wp with factors
> e6 <- earth(pclass ~ ., data=etitanic, degree=2, wp=c(.001,.001,1))
> printh(e6)
===e6 
Selected 9 of 17 terms, and 5 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, survived, sexmale, sibsp, parch
Number of terms at each degree of interaction: 1 5 3

          GCV      RSS        GRSq        RSq
1st 0.1497326 150.3947 0.244428124 0.27307278
2nd 0.1873313 188.1596 0.001534961 0.03938799
3rd 0.1880052 188.8365 0.248086069 0.27659204
All 0.5638989 566.3922 0.247898454 0.27641154
> printh(summary(e6))
===summary(e6) 
Call: earth(formula=pclass~., data=etitanic, wp=c(0.001, 0.001, 
      1), degree=2)

                                1st          2nd         3rd
(Intercept)            -0.046470069  0.275516956  0.77095311
survived                0.305886574  0.170417323 -0.47630390
sexmale                 0.141655736  0.192253371 -0.33390911
h(age-9)                0.011633728 -0.003257022 -0.00837671
h(sibsp-1)             -0.017983966 -0.104457784  0.12244175
h(parch-2)             -0.122022417 -0.080155412  0.20217783
survived * sexmale     -0.074297809 -0.292618103  0.36691591
sexmale * h(1-sibsp)   -0.121552766 -0.076623569  0.19817634
h(57-age) * h(2-parch) -0.001684795 -0.001304900  0.00298970

Selected 9 of 17 terms, and 5 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, survived, sexmale, sibsp, parch
Number of terms at each degree of interaction: 1 5 3

          GCV      RSS        GRSq        RSq
1st 0.1497326 150.3947 0.244428124 0.27307278
2nd 0.1873313 188.1596 0.001534961 0.03938799
3rd 0.1880052 188.8365 0.248086069 0.27659204
All 0.5638989 566.3922 0.247898454 0.27641154
> e7 <- earth(pclass ~ ., data=etitanic, degree=2, wp=c(1,.001,.001))
> printh(e7)
===e7 
Selected 8 of 18 terms, and 4 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, parch, survived, sibsp, sexmale-unused
Number of terms at each degree of interaction: 1 3 4

          GCV      RSS        GRSq        RSq
1st 0.1446933 146.0429  0.26985723 0.29410701
2nd 0.1903166 192.0918 -0.01437647 0.01931339
3rd 0.1977682 199.6128  0.20903965 0.23530933
All 0.4343755 438.4270  0.26951216 0.29377340
> printh(summary(e7))
===summary(e7) 
Call: earth(formula=pclass~., data=etitanic, wp=c(1, 0.001, 
      0.001), degree=2)

                                1st          2nd         3rd
(Intercept)              0.11109465  0.208133677  0.68077167
survived                 0.37207357 -0.134953747 -0.23711983
h(age-44)                0.03804985 -0.007569537 -0.03048031
h(2-parch)               0.17973291  0.071844412 -0.25157733
survived * h(53-age)    -0.00519971  0.006923433 -0.00172372
h(48-age) * h(2-parch)  -0.00633377 -0.002143893  0.00847766
h(age-48) * h(2-parch)  -0.02035324  0.002922143  0.01743110
h(1-sibsp) * h(1-parch) -0.13131817 -0.036400218  0.16771839

Selected 8 of 18 terms, and 4 of 5 predictors 
Termination condition: Reached nk 21
Importance: age, parch, survived, sibsp, sexmale-unused
Number of terms at each degree of interaction: 1 3 4

          GCV      RSS        GRSq        RSq
1st 0.1446933 146.0429  0.26985723 0.29410701
2nd 0.1903166 192.0918 -0.01437647 0.01931339
3rd 0.1977682 199.6128  0.20903965 0.23530933
All 0.4343755 438.4270  0.26951216 0.29377340
> if (PLOT)
+     plot(e7, col.points=as.numeric(etitanic$pclass)+1)
> 
> cat("--- earth.regress ---------------------------------\n")
--- earth.regress ---------------------------------
> 
> msg = "earth.regress with trees data, single response, no weights"
> cat("Test:", msg, "\n")
Test: earth.regress with trees data, single response, no weights 
> 
> data(trees)
> y <- trees$Volume
> x <- cbind(trees$Girth, trees$Height)
> colnames(x) <- c("girth", "height")
> 
> a.lm <- lm(y ~ x)
> a.lm.rss <- sum((a.lm$fitted.values - y)^2)
> if (is.null(dim(a.lm$coefficients)))
+     dim(a.lm$coefficients) <- c(length(a.lm$coefficients), 1)
> a <- earth:::earth.regress(x, y)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]"))
> check.fuzzy.equal(a.lm$residuals, a$residuals, msg=paste("residuals [", msg, "]"))
> 
> msg = "earth.regress with ozone1 data, multiple responses, no weights"
> cat("Test:", msg, "\n")
Test: earth.regress with ozone1 data, multiple responses, no weights 
> 
> data(ozone1)
> y <- cbind(ozone1$O3, ozone1$O3 ^ 2)
> colnames(y) <- c("O3", "O32")
> x <- cbind(ozone1$wind, ozone1$humidity, ozone1$temp)
> colnames(x) <- c("wind", "humidity", "temp")
> 
> a.lm <- lm(y ~ x)
> a.lm.rss <- sum((a.lm$fitted.values - y)^2)
> a <- earth:::earth.regress(x, y)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]"))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm$residuals, a$residuals, msg=paste("residuals [", msg, "]", sep=""))
> 
> # msg = "earth.regress with ozone1 data, multiple responses with case weights"
> # cat("Test:", msg, "\n")
> #
> # # options(digits=10)
> # weights. <- rep(.5, nrow(x))
> # weights.[1] <- 1
> # weights.[2] <- 2
> # weights.[3] <- 3
> # weights.[4] <- 4
> # weights.[5] <- 5
> # a.lm <- lm(y ~ x, weights=weights.)
> # # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> # a.lm.rss <- sum(a.lm$residuals^2)
> # a <- earth:::earth.regress(x, y, weights=weights.)
> # rownames(a.lm$coefficients) <- rownames(a$coefficients)
> # check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm$residuals, a$residuals, msg=paste("residuals [", msg, "]", sep=""))
> 
> # msg = "earth.regress case weights with zero weights 1"
> # cat("Test:", msg, "\n")
> #
> # weights. <- rep(1, nrow(x))
> # weights.[2] <- 0
> # weights.[4] <- 0
> # a.lm <- lm(y ~ x, weights=weights.)
> # # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> # a.lm.rss <- sum(a.lm$residuals^2)
> # a <- earth:::earth.regress(x, y, weights=weights.)
> # rownames(a.lm$coefficients) <- rownames(a$coefficients)
> # # options(digits=10)
> # check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> #
> # msg = "earth.regress case weights with zero weights 2"
> # cat("Test:", msg, "\n")
> # weights. <- rep(1, nrow(x))
> # weights.[5] <- 0
> # weights.[6] <- 0
> # weights.[7] <- 0
> # weights.[21] <- 0
> # weights.[22] <- 0
> # weights.[23] <- 0
> # weights.[24] <- 0
> # weights.[25] <- 0
> # weights.[26] <- 0
> # weights.[27] <- 0
> # a.lm <- lm(y ~ x, weights=weights.)
> # # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> # a.lm.rss <- sum(a.lm$residuals^2)
> # a <- earth:::earth.regress(x, y, weights=weights.)
> # rownames(a.lm$coefficients) <- rownames(a$coefficients)
> # check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> #
> # msg = "earth.regress case weights with zero weights and missing columns 1"
> # cat("Test:", msg, "\n")
> # x <- cbind(ozone1$wind, ozone1$humidity, ozone1$temp, ozone1$wind^2, ozone1$humidity^2, ozone1$temp^2)
> # weights. <- rep(1, nrow(x))
> # weights.[5] <- 0
> # weights.[6] <- 0
> # weights.[7] <- 0
> # weights.[21] <- 0
> # weights.[22] <- 0
> # weights.[23] <- 0
> # weights.[24] <- 0
> # weights.[25] <- 0
> # weights.[26] <- 0
> # weights.[27] <- 0
> # colnames(x) <- c("wind", "humidity", "temp", "wind2", "humidity2", "temp2")
> # used.cols = as.logical(c(1,0,1,0,1,1))
> # x.missing <- x[,used.cols]
> # a.lm <- lm(y ~ x.missing, weights=weights.)
> # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> # a.lm.rss <- sum(a.lm$residuals^2)
> # a <- earth:::earth.regress(x, y, weights=weights., used.cols=used.cols)
> # rownames(a.lm$coefficients) <- rownames(a$coefficients)
> # check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> #
> # msg = "earth.regress case weights with zero weights and missing columns 2"
> # cat("Test:", msg, "\n")
> # x <- cbind(ozone1$wind, ozone1$humidity, ozone1$temp, ozone1$wind^2, ozone1$humidity^2, ozone1$temp^2)
> # weights. <- rep(1, nrow(x))
> # weights.[5] <- .1
> # weights.[6] <- .2
> # weights.[7] <- 1.9
> # weights.[21] <- .59
> # colnames(x) <- c("wind", "humidity", "temp", "wind2", "humidity2", "temp2")
> # used.cols = as.logical(c(0,1,0,0,1,0))
> # x.missing <- x[,used.cols]
> # a.lm <- lm(y ~ x.missing, weights=weights.)
> # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> # a.lm.rss <- sum(a.lm$residuals^2)
> # a <- earth:::earth.regress(x, y, weights=weights., used.cols=used.cols)
> # rownames(a.lm$coefficients) <- rownames(a$coefficients)
> # check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> # check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> 
> cat("---standard method functions ------------------------\n")
---standard method functions ------------------------
> 
> short.etitanic <- etitanic[seq(from=1, to=1000, by=20),]
> a1 <- earth(pclass ~ ., data=short.etitanic, glm=list(family=binomial), trace=0)
> printh(variable.names(a1))
===variable.names(a1) 
[1] "survived" "sexmale"  "age"      "sibsp"    "parch"   
> printh(case.names(a1))
===case.names(a1) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> printh(case.names(a1, use.names=FALSE))
===case.names(a1, use.names = FALSE) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> 
> named.short.etitanic <- short.etitanic
> rownames(named.short.etitanic) <- paste("xx", 1:nrow(named.short.etitanic))
> a2 <- earth(pclass ~ ., data=named.short.etitanic, glm=list(family=binomial), trace=0)
> printh(variable.names(a2))
===variable.names(a2) 
[1] "survived" "sexmale"  "age"      "sibsp"    "parch"   
> printh(case.names(a2))
===case.names(a2) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> printh(case.names(a2, use.names=FALSE))
===case.names(a2, use.names = FALSE) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> 
> printh(deviance(a1), expect.warning=TRUE)
===deviance(a1)  expect warning -->Warning: deviance.earth: returning earth (not GLM) deviance
[1] 25.48701
> printh(deviance(a1, warn=FALSE))
===deviance(a1, warn = FALSE) [1] 25.48701
> printh(effects(a1), expect.warning=TRUE)
===effects(a1)  expect warning -->Warning: effects.earth: returning NULL
NULL
> printh(effects(a1, warn=FALSE))
===effects(a1, warn = FALSE) NULL
> printh(family(a1))
===family(a1) 

Family: binomial 
Link function: logit 

> printh(anova(a1), expect.warning=TRUE)
===anova(a1)  expect warning -->Warning: anova.earth: returning NULL
NULL
> printh(anova(a1, warn=FALSE))
===anova(a1, warn = FALSE) NULL
> printh(family(a1))
===family(a1) 

Family: binomial 
Link function: logit 

> 
> # TODO removed because causes different results on different machines
> # cat("--- thresh=0 -----------------------------------------\n")
> #
> # a.no.thresh <- earth(O3 ~ ., data = ozone1, thresh=0, nk=1000, degree=2, trace=4)
> # printh(a.no.thresh)
> # printh(summary(a.no.thresh))
> # plotmo(a.no.thresh, degree1=1, degree2=c(4,9,16), clip=0, , caption="test with thresh=0")
> 
> # test the way plotmo gets the data with earth with a formula interface
> # use strange data name se to make sure eval gets correct environment (don't pick up se in plotmo)
> se <- ozone1
> a <- earth(O3 ~ ., data=se, degree=2, keepxy=0)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=0, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> plotmo(a, trace=2, caption="getdata earth test1")
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using x from "se" passed to earth 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got x with colnames from object$call$formula

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using y from "se" passed to earth 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got y from object$call$formula
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 
[5,] "5 ibh"      "7 ibt" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 50 min 10.94673 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0   259.0000                      0
[2,]                     0   251.7143                      0
[3,]                     0   244.4286                      0
[4,]                     0   237.1429                      0
[5,]                     0   229.8571                      0
[6,]                     0   222.5714                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 50 min -59.21537 max 15.74855
                                      value 4.078332 4.406617 4.734902 5.063187 5.391473 5.719758 6.048043 6.376328 6.704613 7.032899 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 24 min 10.98811 max 15.39818
                                      value 15.39818 15.35408 15.30998 15.26588 15.24383 15.17768 15.02333 14.95718 14.80282 14.73667 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4         0  59.00000                         0
[2,]           1          4         0  51.71429                         0
[3,]           1          4         0  44.42857                         0
[4,]           1          4         0  37.14286                         0
[5,]           1          4         0  29.85714                         0
[6,]           1          4         0  22.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 50 min 7.625358 max 15.31408
                                      value 7.625358 8.586448 9.547539 10.50863 11.46972 12.43081 13.3919 14.35299 15.31408 15.25452 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 220 min 0.1747873 max 15.39818
                                      value 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 11.59233 7.786486 3.980636 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 400 min -1.004467 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 400 min -13.76989 max 39.90222
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             112661.00       66.5                      0
[2,]              83584.32       66.5                      0
[3,]              54507.63       66.5                      0
[4,]              25430.95       66.5                      0
[5,]                  0.00       66.5                      0
[6,]                  0.00       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 400 min 5.646739 max 14.25593
                                      value 5.646739 7.868685 10.09063 12.31258 14.25593 14.25593 14.25593 14.25593 14.25593 14.25593 ...

plotmo.predict(type="response") for degree2 plot "ibh:ibt" with newdata[400,9]:
      vh wind humidity temp       ibh dpg ibt vis   doy
1   5760    5       64   62  111.0000  24 -25 120 205.5
2   5760    5       64   62  368.3158  24 -25 120 205.5
3   5760    5       64   62  625.6316  24 -25 120 205.5
... 5760    5       64   62  882.9474  24 -25 120 205.5
400 5760    5       64   62 5000.0000  24 332 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg ibt vis   doy
1 5760    5       64   62  111.0000  24 -25 120 205.5
2 5760    5       64   62  368.3158  24 -25 120 205.5
3 5760    5       64   62  625.6316  24 -25 120 205.5
4 5760    5       64   62  882.9474  24 -25 120 205.5
5 5760    5       64   62 1140.2632  24 -25 120 205.5
6 5760    5       64   62 1397.5789  24 -25 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp       ibh dpg ibt vis   doy
1 5760    5       64   62  111.0000  24 -25 120 205.5
2 5760    5       64   62  368.3158  24 -25 120 205.5
3 5760    5       64   62  625.6316  24 -25 120 205.5
4 5760    5       64   62  882.9474  24 -25 120 205.5
5 5760    5       64   62 1140.2632  24 -25 120 205.5
6 5760    5       64   62 1397.5789  24 -25 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             19940.000        259                      0
[2,]             14793.684        259                      0
[3,]              9647.368        259                      0
[4,]              4501.053        259                      0
[5,]                 0.000        259                      0
[6,]                 0.000        259                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 400 min -274.704 max 15.74855
                                      value 2.554582 2.947846 3.341111 3.734376 4.078332 4.078332 4.078332 4.078332 4.078332 4.078332 ...


ylim 1.170751 37.28101 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.17 37.3 cex 0.66
persp(humidity:temp) theta -35 ylim 1.17 37.3 cex 0.66
persp(temp:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:ibt) theta 55 ylim 1.17 37.3 cex 0.66

> a <- earth(O3 ~ ., data=se, degree=2, keepxy=1)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> plotmo(a, trace=1, caption="getdata earth test2")
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

get.data.for.formula: using x from object$data 
got x with colnames from object$call$formula

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$y
get.plotmo.y column "O3" returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.earth(xgrid, type="response") column "O3" returned length 50 min 10.94673 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

predict.earth(xgrid, type="response") column "O3" returned length 220 min 0.1747873 max 15.39818
                                      value 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 11.59233 7.786486 3.980636 ...

ylim 1.170751 37.28101 

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

persp(wind:vis) theta 145 ylim 1.17 37.3 cex 0.66
persp(humidity:temp) theta -35 ylim 1.17 37.3 cex 0.66
persp(temp:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:ibt) theta 55 ylim 1.17 37.3 cex 0.66
> a <- earth(O3 ~ ., data=se, degree=2, keepxy=1)
> se <- NULL
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> plotmo(a, trace=FALSE, caption="getdata earth test3")

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> se <- ozone1
> a <- earth(O3 ~ ., data=se, degree=2, keepxy=0)
> se <- NULL
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=0, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> expect.err(try(plotmo(a, trace=2, caption="getdata earth test4")))
Using env attr(object$terms, ".Environment")

--get.plotmo.x for earth object

formula O3 ~ .
stripped formula O3~.
Error : the data "se" passed to earth is no longer available (use keepxy=TRUE in the call to earth?)
       (tried object$data, object$x and call$se)
Got error as expected
> 
> # test the way plotmo gets the data with earth with the default interface
> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=0)
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=0, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> plotmo(a, trace=2, caption="getdata earth test5")
Using env parent.frame()

--get.plotmo.x for earth object

got x with colnames from object$call$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$call$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 
[5,] "5 ibh"      "7 ibt" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.94673 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0   259.0000                      0
[2,]                     0   251.7143                      0
[3,]                     0   244.4286                      0
[4,]                     0   237.1429                      0
[5,]                     0   229.8571                      0
[6,]                     0   222.5714                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min -59.21537 max 15.74855
                                      value 4.078332 4.406617 4.734902 5.063187 5.391473 5.719758 6.048043 6.376328 6.704613 7.032899 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.98811 max 15.39818
                                      value 15.39818 15.35408 15.30998 15.26588 15.24383 15.17768 15.02333 14.95718 14.80282 14.73667 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4         0  59.00000                         0
[2,]           1          4         0  51.71429                         0
[3,]           1          4         0  44.42857                         0
[4,]           1          4         0  37.14286                         0
[5,]           1          4         0  29.85714                         0
[6,]           1          4         0  22.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.625358 max 15.31408
                                      value 7.625358 8.586448 9.547539 10.50863 11.46972 12.43081 13.3919 14.35299 15.31408 15.25452 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.1747873 max 15.39818
                                      value 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 11.59233 7.786486 3.980636 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -1.004467 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -13.76989 max 39.90222
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             112661.00       66.5                      0
[2,]              83584.32       66.5                      0
[3,]              54507.63       66.5                      0
[4,]              25430.95       66.5                      0
[5,]                  0.00       66.5                      0
[6,]                  0.00       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.646739 max 14.25593
                                      value 5.646739 7.868685 10.09063 12.31258 14.25593 14.25593 14.25593 14.25593 14.25593 14.25593 ...

plotmo.predict(type="response") for degree2 plot "ibh:ibt" with newdata[400,9]:
      vh wind humidity temp       ibh dpg ibt vis   doy
1   5760    5       64   62  111.0000  24 -25 120 205.5
2   5760    5       64   62  368.3158  24 -25 120 205.5
3   5760    5       64   62  625.6316  24 -25 120 205.5
... 5760    5       64   62  882.9474  24 -25 120 205.5
400 5760    5       64   62 5000.0000  24 332 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg ibt vis   doy
1 5760    5       64   62  111.0000  24 -25 120 205.5
2 5760    5       64   62  368.3158  24 -25 120 205.5
3 5760    5       64   62  625.6316  24 -25 120 205.5
4 5760    5       64   62  882.9474  24 -25 120 205.5
5 5760    5       64   62 1140.2632  24 -25 120 205.5
6 5760    5       64   62 1397.5789  24 -25 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             19940.000        259                      0
[2,]             14793.684        259                      0
[3,]              9647.368        259                      0
[4,]              4501.053        259                      0
[5,]                 0.000        259                      0
[6,]                 0.000        259                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -274.704 max 15.74855
                                      value 2.554582 2.947846 3.341111 3.734376 4.078332 4.078332 4.078332 4.078332 4.078332 4.078332 ...


ylim 1.170751 37.28101 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.17 37.3 cex 0.66
persp(humidity:temp) theta -35 ylim 1.17 37.3 cex 0.66
persp(temp:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:ibt) theta 55 ylim 1.17 37.3 cex 0.66

> a <- earth(se[,2:10], se[,1], degree=2, keepxy=1)
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> plotmo(a, trace=2, caption="getdata earth test6")
Using env parent.frame()

--get.plotmo.x for earth object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$y
get.plotmo.y column "se[,1]" returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 
[5,] "5 ibh"      "7 ibt" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.94673 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0   259.0000                      0
[2,]                     0   251.7143                      0
[3,]                     0   244.4286                      0
[4,]                     0   237.1429                      0
[5,]                     0   229.8571                      0
[6,]                     0   222.5714                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min -59.21537 max 15.74855
                                      value 4.078332 4.406617 4.734902 5.063187 5.391473 5.719758 6.048043 6.376328 6.704613 7.032899 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.98811 max 15.39818
                                      value 15.39818 15.35408 15.30998 15.26588 15.24383 15.17768 15.02333 14.95718 14.80282 14.73667 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4         0  59.00000                         0
[2,]           1          4         0  51.71429                         0
[3,]           1          4         0  44.42857                         0
[4,]           1          4         0  37.14286                         0
[5,]           1          4         0  29.85714                         0
[6,]           1          4         0  22.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.625358 max 15.31408
                                      value 7.625358 8.586448 9.547539 10.50863 11.46972 12.43081 13.3919 14.35299 15.31408 15.25452 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.1747873 max 15.39818
                                      value 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 11.59233 7.786486 3.980636 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -1.004467 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -13.76989 max 39.90222
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             112661.00       66.5                      0
[2,]              83584.32       66.5                      0
[3,]              54507.63       66.5                      0
[4,]              25430.95       66.5                      0
[5,]                  0.00       66.5                      0
[6,]                  0.00       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.646739 max 14.25593
                                      value 5.646739 7.868685 10.09063 12.31258 14.25593 14.25593 14.25593 14.25593 14.25593 14.25593 ...

plotmo.predict(type="response") for degree2 plot "ibh:ibt" with newdata[400,9]:
      vh wind humidity temp       ibh dpg ibt vis   doy
1   5760    5       64   62  111.0000  24 -25 120 205.5
2   5760    5       64   62  368.3158  24 -25 120 205.5
3   5760    5       64   62  625.6316  24 -25 120 205.5
... 5760    5       64   62  882.9474  24 -25 120 205.5
400 5760    5       64   62 5000.0000  24 332 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg ibt vis   doy
1 5760    5       64   62  111.0000  24 -25 120 205.5
2 5760    5       64   62  368.3158  24 -25 120 205.5
3 5760    5       64   62  625.6316  24 -25 120 205.5
4 5760    5       64   62  882.9474  24 -25 120 205.5
5 5760    5       64   62 1140.2632  24 -25 120 205.5
6 5760    5       64   62 1397.5789  24 -25 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             19940.000        259                      0
[2,]             14793.684        259                      0
[3,]              9647.368        259                      0
[4,]              4501.053        259                      0
[5,]                 0.000        259                      0
[6,]                 0.000        259                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -274.704 max 15.74855
                                      value 2.554582 2.947846 3.341111 3.734376 4.078332 4.078332 4.078332 4.078332 4.078332 4.078332 ...


ylim 1.170751 37.28101 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.17 37.3 cex 0.66
persp(humidity:temp) theta -35 ylim 1.17 37.3 cex 0.66
persp(temp:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:ibt) theta 55 ylim 1.17 37.3 cex 0.66

> a <- earth(se[,2:10], se[,1], degree=2, keepxy=1)
> se <- NULL
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> plotmo(a, trace=2, caption="getdata earth test7")
Using env parent.frame()

--get.plotmo.x for earth object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$y
get.plotmo.y column "se[,1]" returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 
[5,] "5 ibh"      "7 ibt" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.94673 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0   259.0000                      0
[2,]                     0   251.7143                      0
[3,]                     0   244.4286                      0
[4,]                     0   237.1429                      0
[5,]                     0   229.8571                      0
[6,]                     0   222.5714                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min -59.21537 max 15.74855
                                      value 4.078332 4.406617 4.734902 5.063187 5.391473 5.719758 6.048043 6.376328 6.704613 7.032899 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.98811 max 15.39818
                                      value 15.39818 15.35408 15.30998 15.26588 15.24383 15.17768 15.02333 14.95718 14.80282 14.73667 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4         0  59.00000                         0
[2,]           1          4         0  51.71429                         0
[3,]           1          4         0  44.42857                         0
[4,]           1          4         0  37.14286                         0
[5,]           1          4         0  29.85714                         0
[6,]           1          4         0  22.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.625358 max 15.31408
                                      value 7.625358 8.586448 9.547539 10.50863 11.46972 12.43081 13.3919 14.35299 15.31408 15.25452 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.1747873 max 15.39818
                                      value 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 11.59233 7.786486 3.980636 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -1.004467 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -13.76989 max 39.90222
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             112661.00       66.5                      0
[2,]              83584.32       66.5                      0
[3,]              54507.63       66.5                      0
[4,]              25430.95       66.5                      0
[5,]                  0.00       66.5                      0
[6,]                  0.00       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.646739 max 14.25593
                                      value 5.646739 7.868685 10.09063 12.31258 14.25593 14.25593 14.25593 14.25593 14.25593 14.25593 ...

plotmo.predict(type="response") for degree2 plot "ibh:ibt" with newdata[400,9]:
      vh wind humidity temp       ibh dpg ibt vis   doy
1   5760    5       64   62  111.0000  24 -25 120 205.5
2   5760    5       64   62  368.3158  24 -25 120 205.5
3   5760    5       64   62  625.6316  24 -25 120 205.5
... 5760    5       64   62  882.9474  24 -25 120 205.5
400 5760    5       64   62 5000.0000  24 332 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg ibt vis   doy
1 5760    5       64   62  111.0000  24 -25 120 205.5
2 5760    5       64   62  368.3158  24 -25 120 205.5
3 5760    5       64   62  625.6316  24 -25 120 205.5
4 5760    5       64   62  882.9474  24 -25 120 205.5
5 5760    5       64   62 1140.2632  24 -25 120 205.5
6 5760    5       64   62 1397.5789  24 -25 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             19940.000        259                      0
[2,]             14793.684        259                      0
[3,]              9647.368        259                      0
[4,]              4501.053        259                      0
[5,]                 0.000        259                      0
[6,]                 0.000        259                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -274.704 max 15.74855
                                      value 2.554582 2.947846 3.341111 3.734376 4.078332 4.078332 4.078332 4.078332 4.078332 4.078332 ...


ylim 1.170751 37.28101 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.17 37.3 cex 0.66
persp(humidity:temp) theta -35 ylim 1.17 37.3 cex 0.66
persp(temp:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:ibt) theta 55 ylim 1.17 37.3 cex 0.66

> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=0)
> se <- NULL
> expect.err(try(plotmo(a, trace=2, caption="getdata earth test8")))
Using env parent.frame()

--get.plotmo.x for earth object

Looked unsuccessfully for an x in the following places:

(i) object$x:
NULL

(ii) object$call$formula:
NULL

(iii) object$call$x:
NULL

Error : get.plotmo.x.default cannot get the x matrix
       (tried object$x, object$call$formula, and object$call$x)
Got error as expected
> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=0)
> # TODO error message could be improved here
> se$vh <- NULL # vh is unused (but plotmo still needs it --- why?)
> expect.err(try(plotmo(a, trace=2, caption="getdata earth test9"))) # get.plotmo.x.default cannot get the x matrix
Using env parent.frame()

--get.plotmo.x for earth object

Looked unsuccessfully for an x in the following places:

(i) object$x:
NULL

(ii) object$call$formula:
NULL

(iii) object$call$x:
`[.data.frame`(se, , 2:10) : undefined columns selected

Error : get.plotmo.x.default cannot get the x matrix
       (tried object$x, object$call$formula, and object$call$x)
Got error as expected
> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=TRUE)
> se$vh <- NULL # vh is unused (but plotmo still needs it --- why?)
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=TRUE, degree=2)

                            coefficients
(Intercept)                   14.8352757
h(temp-58)                     0.3300798
h(234-ibt)                    -0.0450588
h(200-vis)                     0.0220504
h(92-doy)                     -0.1319144
h(doy-92)                     -0.0234024
h(wind-7) * h(200-vis)        -0.0190292
h(55-humidity) * h(temp-58)   -0.0220227
h(temp-58) * h(dpg-54)        -0.0195522
h(temp-58) * h(54-dpg)         0.0040424
h(1108-ibh) * h(44-dpg)       -0.0000764
h(ibh-1108) * h(ibt-266)      -0.0011307

Selected 12 of 21 terms, and 8 of 9 predictors 
Termination condition: Reached nk 21
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 6
GCV 13.37351    RSS 3683.886    GRSq 0.7922582    RSq 0.8255356
> plotmo(a, trace=2, caption="getdata earth test9")
Using env parent.frame()

--get.plotmo.x for earth object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$y
get.plotmo.y column "se[,1]" returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 
[5,] "5 ibh"      "7 ibt" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.94673 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0   259.0000                      0
[2,]                     0   251.7143                      0
[3,]                     0   244.4286                      0
[4,]                     0   237.1429                      0
[5,]                     0   229.8571                      0
[6,]                     0   222.5714                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min -59.21537 max 15.74855
                                      value 4.078332 4.406617 4.734902 5.063187 5.391473 5.719758 6.048043 6.376328 6.704613 7.032899 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.98811 max 15.39818
                                      value 15.39818 15.35408 15.30998 15.26588 15.24383 15.17768 15.02333 14.95718 14.80282 14.73667 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4         0  59.00000                         0
[2,]           1          4         0  51.71429                         0
[3,]           1          4         0  44.42857                         0
[4,]           1          4         0  37.14286                         0
[5,]           1          4         0  29.85714                         0
[6,]           1          4         0  22.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.625358 max 15.31408
                                      value 7.625358 8.586448 9.547539 10.50863 11.46972 12.43081 13.3919 14.35299 15.31408 15.25452 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.1747873 max 15.39818
                                      value 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 15.39818 11.59233 7.786486 3.980636 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -1.004467 max 26.74408
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          0     113.5         0                         0
[2,]           1          0     113.5         0                         0
[3,]           1          0     113.5         0                         0
[4,]           1          0     113.5         0                         0
[5,]           1          0     113.5         0                         0
[6,]           1          0     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]                     0       66.5                      0
[2,]                     0       66.5                      0
[3,]                     0       66.5                      0
[4,]                     0       66.5                      0
[5,]                     0       66.5                      0
[6,]                     0       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -13.76989 max 39.90222
                                      value 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 10.94673 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             112661.00       66.5                      0
[2,]              83584.32       66.5                      0
[3,]              54507.63       66.5                      0
[4,]              25430.95       66.5                      0
[5,]                  0.00       66.5                      0
[6,]                  0.00       66.5                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.646739 max 14.25593
                                      value 5.646739 7.868685 10.09063 12.31258 14.25593 14.25593 14.25593 14.25593 14.25593 14.25593 ...

plotmo.predict(type="response") for degree2 plot "ibh:ibt" with newdata[400,9]:
      vh wind humidity temp       ibh dpg ibt vis   doy
1   5760    5       64   62  111.0000  24 -25 120 205.5
2   5760    5       64   62  368.3158  24 -25 120 205.5
3   5760    5       64   62  625.6316  24 -25 120 205.5
... 5760    5       64   62  882.9474  24 -25 120 205.5
400 5760    5       64   62 5000.0000  24 332 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg ibt vis   doy
1 5760    5       64   62  111.0000  24 -25 120 205.5
2 5760    5       64   62  368.3158  24 -25 120 205.5
3 5760    5       64   62  625.6316  24 -25 120 205.5
4 5760    5       64   62  882.9474  24 -25 120 205.5
5 5760    5       64   62 1140.2632  24 -25 120 205.5
6 5760    5       64   62 1397.5789  24 -25 120 205.5
predict.earth: bx is a 400 by 12 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-92), 4=h(92-doy), 5=h(55-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1108-ibh)*h(44-dpg), 11=h(234-ibt), 12=h(ibh-1108)*h(ibt-266)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-92) h(92-doy) h(55-humidity)*h(temp-58)
[1,]           1          4     113.5         0                         0
[2,]           1          4     113.5         0                         0
[3,]           1          4     113.5         0                         0
[4,]           1          4     113.5         0                         0
[5,]           1          4     113.5         0                         0
[6,]           1          4     113.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1108-ibh)*h(44-dpg) h(234-ibt) h(ibh-1108)*h(ibt-266)
[1,]             19940.000        259                      0
[2,]             14793.684        259                      0
[3,]              9647.368        259                      0
[4,]              4501.053        259                      0
[5,]                 0.000        259                      0
[6,]                 0.000        259                      0
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -274.704 max 15.74855
                                      value 2.554582 2.947846 3.341111 3.734376 4.078332 4.078332 4.078332 4.078332 4.078332 4.078332 ...


ylim 1.170751 37.28101 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.17 37.3 cex 0.66
persp(humidity:temp) theta -35 ylim 1.17 37.3 cex 0.66
persp(temp:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.17 37.3 cex 0.66
persp(ibh:ibt) theta 55 ylim 1.17 37.3 cex 0.66

> 
> # test the way plotmo gets the data with lm
> se <- ozone1
> a <- lm(O3 ~ ., data=se)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared:  0.7012,	Adjusted R-squared:  0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16

> plotmo(a, trace=0, caption="getdata lm test1")

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, x=1)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, x = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared:  0.7012,	Adjusted R-squared:  0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16

> plotmo(a, trace=0, caption="getdata lm test2")

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, y=1)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, y = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared:  0.7012,	Adjusted R-squared:  0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16

> plotmo(a, trace=2, caption="getdata lm test3")
Using env attr(object$terms, ".Environment")

--get.plotmo.x for lm object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using x from "se" passed to lm 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got x with colnames from object$call$formula

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

got y from object$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 wind, 3 humidity, 4 temp, 5 ibh, 6 dpg, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from "se" passed to lm 
term.labels: vh wind humidity temp ibh dpg ibt vis doy 
considering vh
considering wind
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,9]:
          vh wind humidity temp    ibh dpg   ibt vis   doy
1   5320.000    5       64   62 2112.5  24 167.5 120 205.5
2   5332.857    5       64   62 2112.5  24 167.5 120 205.5
3   5345.714    5       64   62 2112.5  24 167.5 120 205.5
... 5358.571    5       64   62 2112.5  24 167.5 120 205.5
50  5950.000    5       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.57289 max 14.99199
                                   value 14.99199 14.92221 14.85243 14.78265 14.71288 14.6431 14.57332 14.50354 14.43377 14.36399 ...

plotmo.predict(type="response") for degree1 plot "wind" with newdata[11,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5 120 205.5
2   5760    2       64   62 2112.5  24 167.5 120 205.5
3   5760    3       64   62 2112.5  24 167.5 120 205.5
... 5760    4       64   62 2112.5  24 167.5 120 205.5
11  5760   11       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 11 min 12.27655 max 12.87696
                                   value 12.87696 12.7678 12.71322 12.65863 12.60405 12.54947 12.49488 12.4403 12.38572 12.33113 ...

plotmo.predict(type="response") for degree1 plot "humidity" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   62 2112.5  24 167.5 120 205.5
2   5760    5 20.51020   62 2112.5  24 167.5 120 205.5
3   5760    5 22.02041   62 2112.5  24 167.5 120 205.5
... 5760    5 23.53061   62 2112.5  24 167.5 120 205.5
50  5760    5 93.00000   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 8.960214 max 14.9523
                                   value 8.960214 9.082502 9.204789 9.327076 9.449364 9.571651 9.693939 9.816226 9.938514 10.0608 ...

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 2.408729 max 21.14607
                                   value 2.408729 2.791124 3.173519 3.555914 3.938309 4.320703 4.703098 5.085493 5.467888 5.850282 ...

plotmo.predict(type="response") for degree1 plot "ibh" with newdata[50,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000  24 167.5 120 205.5
2   5760    5       64   62  210.7755  24 167.5 120 205.5
3   5760    5       64   62  310.5510  24 167.5 120 205.5
... 5760    5       64   62  410.3265  24 167.5 120 205.5
50  5760    5       64   62 5000.0000  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.92886 max 13.07206
                                   value 13.07206 13.04873 13.0254 13.00207 12.97874 12.95541 12.93208 12.90875 12.88542 12.86209 ...

plotmo.predict(type="response") for degree1 plot "dpg" with newdata[50,9]:
      vh wind humidity temp    ibh       dpg   ibt vis   doy
1   5760    5       64   62 2112.5 -69.00000 167.5 120 205.5
2   5760    5       64   62 2112.5 -65.40816 167.5 120 205.5
3   5760    5       64   62 2112.5 -61.81633 167.5 120 205.5
... 5760    5       64   62 2112.5 -58.22449 167.5 120 205.5
50  5760    5       64   62 2112.5 107.00000 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 12.32493 max 12.9168
                                   value 12.9168 12.90472 12.89264 12.88056 12.86848 12.8564 12.84432 12.83224 12.82016 12.80809 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 6.89813 max 17.48002
                                   value 6.89813 7.114087 7.330043 7.546 7.761957 7.977914 8.193871 8.409828 8.625785 8.841742 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

predict.lm(xgrid, type="response") returned length 24 min 10.76612 max 13.56297
                                   value 13.56297 13.54698 13.531 13.51502 13.50703 13.48306 13.42712 13.40315 13.34721 13.32324 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

predict.lm(xgrid, type="response") returned length 50 min 10.92151 max 14.17715
                                   value 14.17715 14.11071 14.04427 13.97783 13.91138 13.84494 13.7785 13.71206 13.64562 13.57918 ...

ylim 2.408729 21.14607 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, x=1, y=1)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, x = 1, y = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared:  0.7012,	Adjusted R-squared:  0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16

> plotmo(a, trace=2, caption="getdata lm test3")
Using env attr(object$terms, ".Environment")

--get.plotmo.x for lm object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

got y from object$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 wind, 3 humidity, 4 temp, 5 ibh, 6 dpg, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from object$x 
term.labels: `(Intercept)` vh wind humidity temp ibh dpg ibt vis doy 
considering `(Intercept)`
considering vh
considering wind
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,9]:
          vh wind humidity temp    ibh dpg   ibt vis   doy
1   5320.000    5       64   62 2112.5  24 167.5 120 205.5
2   5332.857    5       64   62 2112.5  24 167.5 120 205.5
3   5345.714    5       64   62 2112.5  24 167.5 120 205.5
... 5358.571    5       64   62 2112.5  24 167.5 120 205.5
50  5950.000    5       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.57289 max 14.99199
                                   value 14.99199 14.92221 14.85243 14.78265 14.71288 14.6431 14.57332 14.50354 14.43377 14.36399 ...

plotmo.predict(type="response") for degree1 plot "wind" with newdata[11,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5 120 205.5
2   5760    2       64   62 2112.5  24 167.5 120 205.5
3   5760    3       64   62 2112.5  24 167.5 120 205.5
... 5760    4       64   62 2112.5  24 167.5 120 205.5
11  5760   11       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 11 min 12.27655 max 12.87696
                                   value 12.87696 12.7678 12.71322 12.65863 12.60405 12.54947 12.49488 12.4403 12.38572 12.33113 ...

plotmo.predict(type="response") for degree1 plot "humidity" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   62 2112.5  24 167.5 120 205.5
2   5760    5 20.51020   62 2112.5  24 167.5 120 205.5
3   5760    5 22.02041   62 2112.5  24 167.5 120 205.5
... 5760    5 23.53061   62 2112.5  24 167.5 120 205.5
50  5760    5 93.00000   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 8.960214 max 14.9523
                                   value 8.960214 9.082502 9.204789 9.327076 9.449364 9.571651 9.693939 9.816226 9.938514 10.0608 ...

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 2.408729 max 21.14607
                                   value 2.408729 2.791124 3.173519 3.555914 3.938309 4.320703 4.703098 5.085493 5.467888 5.850282 ...

plotmo.predict(type="response") for degree1 plot "ibh" with newdata[50,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000  24 167.5 120 205.5
2   5760    5       64   62  210.7755  24 167.5 120 205.5
3   5760    5       64   62  310.5510  24 167.5 120 205.5
... 5760    5       64   62  410.3265  24 167.5 120 205.5
50  5760    5       64   62 5000.0000  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.92886 max 13.07206
                                   value 13.07206 13.04873 13.0254 13.00207 12.97874 12.95541 12.93208 12.90875 12.88542 12.86209 ...

plotmo.predict(type="response") for degree1 plot "dpg" with newdata[50,9]:
      vh wind humidity temp    ibh       dpg   ibt vis   doy
1   5760    5       64   62 2112.5 -69.00000 167.5 120 205.5
2   5760    5       64   62 2112.5 -65.40816 167.5 120 205.5
3   5760    5       64   62 2112.5 -61.81633 167.5 120 205.5
... 5760    5       64   62 2112.5 -58.22449 167.5 120 205.5
50  5760    5       64   62 2112.5 107.00000 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 12.32493 max 12.9168
                                   value 12.9168 12.90472 12.89264 12.88056 12.86848 12.8564 12.84432 12.83224 12.82016 12.80809 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 6.89813 max 17.48002
                                   value 6.89813 7.114087 7.330043 7.546 7.761957 7.977914 8.193871 8.409828 8.625785 8.841742 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

predict.lm(xgrid, type="response") returned length 24 min 10.76612 max 13.56297
                                   value 13.56297 13.54698 13.531 13.51502 13.50703 13.48306 13.42712 13.40315 13.34721 13.32324 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

predict.lm(xgrid, type="response") returned length 50 min 10.92151 max 14.17715
                                   value 14.17715 14.11071 14.04427 13.97783 13.91138 13.84494 13.7785 13.71206 13.64562 13.57918 ...

ylim 2.408729 21.14607 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, x=0, y=1)
> se <- NULL
> expect.err(try(plotmo(a, trace=2, caption="getdata lm test4")))
Using env attr(object$terms, ".Environment")

--get.plotmo.x for lm object

formula O3 ~ .
stripped formula O3~.
Error : the data "se" passed to lm is no longer available (use x=TRUE in the call to lm?)
       (tried object$data, object$x and call$se)
Got error as expected
> se <- ozone1
> a <- lm(O3 ~ ., data=se, x=1, y=1)
> se <- NULL
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, x = 1, y = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared:  0.7012,	Adjusted R-squared:  0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16

> plotmo(a, trace=2, caption="getdata lm test5")
Using env attr(object$terms, ".Environment")

--get.plotmo.x for lm object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

got y from object$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 wind, 3 humidity, 4 temp, 5 ibh, 6 dpg, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from object$x 
term.labels: `(Intercept)` vh wind humidity temp ibh dpg ibt vis doy 
considering `(Intercept)`
considering vh
considering wind
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,9]:
          vh wind humidity temp    ibh dpg   ibt vis   doy
1   5320.000    5       64   62 2112.5  24 167.5 120 205.5
2   5332.857    5       64   62 2112.5  24 167.5 120 205.5
3   5345.714    5       64   62 2112.5  24 167.5 120 205.5
... 5358.571    5       64   62 2112.5  24 167.5 120 205.5
50  5950.000    5       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.57289 max 14.99199
                                   value 14.99199 14.92221 14.85243 14.78265 14.71288 14.6431 14.57332 14.50354 14.43377 14.36399 ...

plotmo.predict(type="response") for degree1 plot "wind" with newdata[11,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5 120 205.5
2   5760    2       64   62 2112.5  24 167.5 120 205.5
3   5760    3       64   62 2112.5  24 167.5 120 205.5
... 5760    4       64   62 2112.5  24 167.5 120 205.5
11  5760   11       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 11 min 12.27655 max 12.87696
                                   value 12.87696 12.7678 12.71322 12.65863 12.60405 12.54947 12.49488 12.4403 12.38572 12.33113 ...

plotmo.predict(type="response") for degree1 plot "humidity" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   62 2112.5  24 167.5 120 205.5
2   5760    5 20.51020   62 2112.5  24 167.5 120 205.5
3   5760    5 22.02041   62 2112.5  24 167.5 120 205.5
... 5760    5 23.53061   62 2112.5  24 167.5 120 205.5
50  5760    5 93.00000   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 8.960214 max 14.9523
                                   value 8.960214 9.082502 9.204789 9.327076 9.449364 9.571651 9.693939 9.816226 9.938514 10.0608 ...

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 2.408729 max 21.14607
                                   value 2.408729 2.791124 3.173519 3.555914 3.938309 4.320703 4.703098 5.085493 5.467888 5.850282 ...

plotmo.predict(type="response") for degree1 plot "ibh" with newdata[50,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000  24 167.5 120 205.5
2   5760    5       64   62  210.7755  24 167.5 120 205.5
3   5760    5       64   62  310.5510  24 167.5 120 205.5
... 5760    5       64   62  410.3265  24 167.5 120 205.5
50  5760    5       64   62 5000.0000  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.92886 max 13.07206
                                   value 13.07206 13.04873 13.0254 13.00207 12.97874 12.95541 12.93208 12.90875 12.88542 12.86209 ...

plotmo.predict(type="response") for degree1 plot "dpg" with newdata[50,9]:
      vh wind humidity temp    ibh       dpg   ibt vis   doy
1   5760    5       64   62 2112.5 -69.00000 167.5 120 205.5
2   5760    5       64   62 2112.5 -65.40816 167.5 120 205.5
3   5760    5       64   62 2112.5 -61.81633 167.5 120 205.5
... 5760    5       64   62 2112.5 -58.22449 167.5 120 205.5
50  5760    5       64   62 2112.5 107.00000 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 12.32493 max 12.9168
                                   value 12.9168 12.90472 12.89264 12.88056 12.86848 12.8564 12.84432 12.83224 12.82016 12.80809 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 6.89813 max 17.48002
                                   value 6.89813 7.114087 7.330043 7.546 7.761957 7.977914 8.193871 8.409828 8.625785 8.841742 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

predict.lm(xgrid, type="response") returned length 24 min 10.76612 max 13.56297
                                   value 13.56297 13.54698 13.531 13.51502 13.50703 13.48306 13.42712 13.40315 13.34721 13.32324 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

predict.lm(xgrid, type="response") returned length 50 min 10.92151 max 14.17715
                                   value 14.17715 14.11071 14.04427 13.97783 13.91138 13.84494 13.7785 13.71206 13.64562 13.57918 ...

ylim 2.408729 21.14607 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> se <- ozone1
> a <- lm(O3 ~ ., data=se)
> se$wind <- NULL
> expect.err(try(plotmo(a, trace=2, caption="getdata lm test6")))
Using env attr(object$terms, ".Environment")

--get.plotmo.x for lm object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using x from "se" passed to lm 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got x with colnames from object$call$formula

x[330,8]:
      vh humidity temp  ibh dpg ibt vis doy
1   5710       28   40 2693 -25  87 250  33
2   5700       37   45  590 -24 128 100  34
3   5760       51   54 1450  25 139  60  35
... 5720       69   35 1568  15 121  60  36
330 5550       85   39 5000   8  44 100 390

nlevels: vh=53 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using y from "se" passed to lm 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got y from object$call$formula
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 humidity, 3 temp, 4 ibh, 5 dpg, 6 ibt, 7 vis, 8 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from "se" passed to lm 
term.labels: vh humidity temp ibh dpg ibt vis doy 
considering vh
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,8]:
          vh humidity temp    ibh dpg   ibt vis   doy
1   5320.000       64   62 2112.5  24 167.5 120 205.5
2   5332.857       64   62 2112.5  24 167.5 120 205.5
3   5345.714       64   62 2112.5  24 167.5 120 205.5
... 5358.571       64   62 2112.5  24 167.5 120 205.5
50  5950.000       64   62 2112.5  24 167.5 120 205.5

Error in eval(expr, envir, enclos) : object 'wind' not found
Got error as expected
> 
> cat("test fixed.point warning in print.summary.earth\n")
test fixed.point warning in print.summary.earth
> options(digits=3)
> et <- etitanic
> et$age <- 1000 * et$age
> a <- earth(survived~., data=et)
> print(summary(a))
Call: earth(formula=survived~., data=et)

             coefficients
(Intercept)        1.0947
pclass2nd         -0.2114
pclass3rd         -0.3413
sexmale           -0.4851
h(10000-age)       0.0000
h(age-10000)       0.0000
h(sibsp-1)        -0.0970
h(1-parch)        -0.0902
h(parch-1)        -0.0627

Selected 9 of 12 terms, and 6 of 6 predictors 
Termination condition: RSq changed by less than 0.001 at 12 terms
Importance: sexmale, pclass3rd, age, pclass2nd, sibsp, parch
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.152    RSS 154    GRSq 0.372    RSq 0.391
> print(summary(a, fixed.point=FALSE))
Call: earth(formula=survived~., data=et)

             coefficients
(Intercept)      1.09e+00
pclass2nd       -2.11e-01
pclass3rd       -3.41e-01
sexmale         -4.85e-01
h(10000-age)     2.57e-05
h(age-10000)    -4.22e-06
h(sibsp-1)      -9.70e-02
h(1-parch)      -9.02e-02
h(parch-1)      -6.27e-02

Selected 9 of 12 terms, and 6 of 6 predictors 
Termination condition: RSq changed by less than 0.001 at 12 terms
Importance: sexmale, pclass3rd, age, pclass2nd, sibsp, parch
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.152    RSS 154    GRSq 0.372    RSq 0.391
> options(digits=7) # back to default
> 
> cat("--- summary earth with new data ----------------------\n")
--- summary earth with new data ----------------------
> a.trees <- earth(Volume~., data=trees)
> cat("summary(a.trees, newdata=trees)\n")
summary(a.trees, newdata=trees)
> print(summary(a.trees, newdata=trees))

RSq 0.971 on newdata (31 cases)

> cat("summary(a.trees, newdata=trees[10:20,])\n")
summary(a.trees, newdata=trees[10:20,])
> print(summary(a.trees, newdata=trees[10:20,]))

RSq 0.437 on newdata (11 cases)

> 
> cat("--- ../../tests/test.earth.R -------------------------\n")
--- ../../tests/test.earth.R -------------------------
> 
> options(options.old)
> source("../../tests/test.earth.R")
Call: earth(formula=Volume~., data=trees)

             coefficients
(Intercept)         37.93
h(16-Girth)         -3.92
h(Girth-16)          7.40
h(Height-75)         0.48

Selected 4 of 6 terms, and 2 of 2 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: Girth, Height
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 12.7    RSS 236    GRSq 0.954    RSq 0.971
> 
> cat("--- check that spurious warn gone: non-integer #successes in a binomial glm ---\n")
--- check that spurious warn gone: non-integer #successes in a binomial glm ---
> 
> library(segmented) # for down data
> data(down)
> fit.e <- earth(cases/births~age, data=down, weights=down$births, glm=list(family="binomial"))
Warning message:
support of weights is provisional in this version of earth 
> # with trace=-1, test that no warning: support of weights is provisional in this version of earth
> fit.e <- earth(cases/births~age, data=down, weights=down$births, glm=list(family="binomial"), trace=-1)
> summary(fit.e)
Call: earth(formula=cases/births~age, data=down, weights=down$births, 
      trace=-1, glm=list(family="binomial"))

GLM coefficients
            cases/births
(Intercept)       -6.798
h(age-37.5)        0.472

Earth selected 2 of 6 terms, and 1 of 1 predictors 
Termination condition: RSq changed by less than 0.001 at 6 terms
Importance: age
Number of terms at each degree of interaction: 1 1 (additive model)
Earth GCV 0.0114    RSS 0.277    GRSq 0.878    RSq 0.894

GLM null.deviance 625 (29 dof)   deviance 151 (28 dof)   iters 5
> 
> if(!interactive()) {
+     dev.off()         # finish postscript plot
+     q(runLast=FALSE)  # needed else R prints the time on exit (R2.5 and higher) which messes up the diffs
+ }
