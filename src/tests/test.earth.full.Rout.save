> # test.earth.full.R: test earth
> 
> print(R.version.string)
[1] "R version 2.13.0 (2011-04-13)"
> 
> library(earth)
Loading required package: leaps
Loading required package: plotmo
Loading required package: plotrix
> library(mda)
Loading required package: class
> source("check.models.equal.R")
> data(ozone1)
> data(trees)
> data(etitanic)
> source("fast.postscript.R")
> if(!interactive())
+     fast.postscript(paper="letter")
Opening Rplots.ps 
> 
> PRINT.TIME <- FALSE         # FALSE for no time results (for diff against reference)
> PLOT <- TRUE                # TRUE to do plots too, FALSE for speed
> options.old <- options()
> options(warn=1) # print warnings as they occur
> # options(digits=5) # removed because want to check against default
> 
> printh <- function(x, expect.warning=FALSE, max.print=0) # like print but with a header
+ {
+     cat("===", deparse(substitute(x)), " ", sep="")
+     if(expect.warning)
+         cat(" expect warning -->")
+     else if (NROW(x) > 1)
+         cat("\n")
+     if (max.print > 0)
+         print(head(x, n=max.print))
+     else
+         print(x)
+ }
> 
> print(citation("earth"))

To cite package 'earth' in publications use:

  Stephen Milborrow. Derived from mda:mars by Trevor Hastie and Rob
  Tibshirani. (2011). earth: Multivariate Adaptive Regression Spline
  Models. R package version 3.2-1.
  http://CRAN.R-project.org/package=earth

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {earth: Multivariate Adaptive Regression Spline Models},
    author = {Stephen Milborrow. Derived from mda:mars by Trevor Hastie and Rob Tibshirani.},
    year = {2011},
    note = {R package version 3.2-1},
    url = {http://CRAN.R-project.org/package=earth},
  }

ATTENTION: This citation information has been auto-generated from the
package DESCRIPTION file and may need manual editing, see
'help("citation")' .

> 
> #--- test examples from man pages ------------------------------------------------------------
> 
> cat("--- earth.Rd -----------------------------\n")
--- earth.Rd -----------------------------
> example(earth)

earth> a <- earth(Volume ~ ., data = trees)

earth> plotmo(a)

 grid:    Girth Height
           12.9     76


earth> summary(a, digits = 2, style = "pmax")
Call: earth(formula=Volume~., data=trees)

Volume =
  27
  +  6.2 * pmax(0,  Girth -     14) 
  -  3.3 * pmax(0,     14 -  Girth) 
  + 0.49 * pmax(0, Height -     72) 

Selected 4 of 6 terms, and 2 of 2 predictors 
Importance: Girth, Height
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 11    RSS 197    GRSq 0.96    RSq 0.98
> 
> a <- earth(mpg ~ ., data = mtcars, pmethod = "none", trace = 4)
Call: earth(formula=mpg~., data=mtcars, trace=4, pmethod="none")
x is a 32 by 10 matrix: 1=cyl, 2=disp, 3=hp, 4=drat, 5=wt, 6=qsec, 7=vs, 8=am, 9=gear, 10=carb
First few rows of x are
     cyl disp  hp drat    wt  qsec vs am gear carb
[1,]   6  160 110 3.90 2.620 16.46  0  1    4    4
[2,]   6  160 110 3.90 2.875 17.02  0  1    4    4
[3,]   4  108  93 3.85 2.320 18.61  1  1    4    1
[4,]   6  258 110 3.08 3.215 19.44  1  0    3    1
[5,]   8  360 175 3.15 3.440 17.02  0  0    3    2
[6,]   6  225 105 2.76 3.460 20.22  1  0    3    1
y is a 32 by 1 matrix: 1=mpg
First few rows of y are
      mpg
[1,] 21.0
[2,] 21.0
[3,] 22.8
[4,] 21.4
[5,] 18.7
[6,] 18.1
Forward pass: minspan 5 endspan 10

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.8157 0.8602       0.8602    2         disp         145  2   3   
4      0.7815 0.8797      0.01956    3           hp         123  4   5   
6      0.7601 0.9099      0.03016    6         qsec       18.52  6   7   
8      0.6839 0.9260      0.01611    4         drat        3.15  8   9   
10     0.5031 0.9374      0.01144    9         gear           4  10  11  
12     0.3575 0.9458     0.008417    2         disp       275.8  12      
14     0.0073 0.9494     0.003535    6         qsec       17.02  13      
16    -0.5893 0.9587     0.009271    7           vs           0< 14      
18   -32.1650 0.9655     0.006835    1          cyl           6  15  16  reject term

Reached min GRSq (GRSq -32.165 < -10) at 17 terms
After forward pass GRSq -32.17 RSq 0.9655
Forward pass complete: 17 terms (14 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.6706  0.7118     0.6706      1  1 3
          3      0.8157  0.8602     0.1450      1  1 2 3
          4      0.7988  0.8691    -0.0169      2  1 2 3 4
          5      0.7815  0.8797    -0.0173      2  1 2 3 4 5
          6      0.7601  0.8899    -0.0214      4  1 3 4 6 13 14
          7      0.7934  0.9224     0.0332      4  1 3 4 5 6 13 14
          8      0.7852  0.9354    -0.0082      5  1 3 4 5 6 9 13 14
          9      0.7579  0.9433    -0.0272      5  1 3 4 5 6 9 12 13 14
         10      0.6997  0.9472    -0.0582      6  1 3 4 5 6 9 10 12 13 14
         11      0.6132  0.9513    -0.0865      6  1 2 3 4 5 6 9 10 12 13 14
         12      0.4534  0.9539    -0.1598      6  1 2 3 4 5 6 9 10 11 12 13 14
         13      0.1741  0.9579    -0.2793      6  1 2 3 4 5 6 8 9 10 11 12 13 14
chosen   14     -0.5893  0.9587    -0.7634      6  1 2 3 4 5 6 7 8 9 10 11 12 13 14

Prune method "none" penalty 2 nprune 14: selected 14 of 14 terms, and 6 of 10 predictors
After backward pass GRSq -0.5893 RSq 0.9587 
> 
> set.seed(1)
> train.subset <- sample(1:nrow(trees), .8 * nrow(trees))
> test.subset <- (1:nrow(trees))[-train.subset]
> a <- earth(Volume ~ ., data = trees[train.subset, ])
> yhat <- predict(a, newdata = trees[test.subset, ])
> y <- trees$Volume[test.subset]
> printh(sum((yhat - mean(yhat))^2) / sum((y - mean(y))^2)) # print R-Squared
===sum((yhat - mean(yhat))^2)/sum((y - mean(y))^2) [1] 1.057729
> get.used.pred.names <- function(obj) # obj is an earth object
+ {
+   any1 <- function(x) any(x != 0)    # like any but no warning if x is double
+   names(which(apply(obj$dirs[obj$selected.terms,,drop=FALSE],2,any1)))
+ }
> printh(get.used.pred.names(a))
===get.used.pred.names(a) 
[1] "Girth"  "Height"
> 
> a1 <- earth(survived ~ ., data=etitanic,   # c.f. Harrell "Reg. Mod. Strat." ch. 12
+              degree=2, trace=1,
+              glm=list(family=binomial))
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=survived
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached max number of terms 21
After forward pass GRSq 0.4069 RSq 0.4487
Prune method "backward" penalty 3 nprune 16: selected 9 of 16 terms, and 6 of 6 predictors
After backward pass GRSq 0.4222 RSq 0.4441 
GLM survived: null.deviance 1414.62 (1045 dof)   deviance 879.625 (1037 dof)   iters 5
> printh(a1)
===a1 
Earth selected 9 of 16 terms, and 6 of 6 predictors 
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch
Number of terms at each degree of interaction: 1 3 5
Earth GCV 0.1398544    RSS 140.4728    GRSq 0.422183    RSq 0.4440888

GLM null.deviance 1414.62 (1045 dof)   deviance 879.625 (1037 dof)   iters 5
> 
> a1a <- earth(etitanic[,-2], etitanic[,2],  # equivalent but using earth.default
+              degree=2, trace=1,
+              glm=list(family=binomial))
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, ...
y is a 1046 by 1 matrix: 1=etitanic[,2]
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
Reached max number of terms 21
After forward pass GRSq 0.4069 RSq 0.4487
Prune method "backward" penalty 3 nprune 16: selected 9 of 16 terms, and 6 of 6 predictors
After backward pass GRSq 0.4222 RSq 0.4441 
GLM etitanic[,2]: null.deviance 1414.62 (1045 dof)   deviance 879.625 (1037 dof)   iters 5
> printh(a1a)
===a1a 
Earth selected 9 of 16 terms, and 6 of 6 predictors 
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch
Number of terms at each degree of interaction: 1 3 5
Earth GCV 0.1398544    RSS 140.4728    GRSq 0.422183    RSq 0.4440888

GLM null.deviance 1414.62 (1045 dof)   deviance 879.625 (1037 dof)   iters 5
> 
> a2 <- earth(pclass ~ ., data=etitanic, trace=1, glm=list(family=binomial))
x is a 1046 by 5 matrix: 1=survived, 2=sexmale, 3=age, 4=sibsp, 5=parch
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass term 1, 2, 4, 6, 8, 10, 12, 14
Reached delta RSq threshold (DeltaRSq 0.00061857 < 0.001) at 13 terms
After forward pass GRSq 0.163 RSq 0.1947
Prune method "backward" penalty 2 nprune 10: selected 8 of 10 terms, and 4 of 5 predictors
After backward pass GRSq 0.167 RSq 0.1891 
GLM 1st: null.deviance 1223.308 (1045 dof)   deviance 920.8021 (1038 dof)   iters 5
GLM 2nd: null.deviance 1175.305 (1045 dof)   deviance 1147.518 (1038 dof)   iters 5
GLM 3rd: null.deviance 1448.212 (1045 dof)   deviance 1142.756 (1038 dof)   iters 5
> printh(a2)
===a2 
Earth selected 8 of 10 terms, and 4 of 5 predictors 
Importance: age, survived, sibsp, parch, sexmale-unused
Number of terms at each degree of interaction: 1 7 (additive model)

Earth
          GCV      RSS         GRSq        RSq
1st 0.1483414 150.7467  0.251448718 0.27137124
2nd 0.1885520 191.6094 -0.004971341 0.02177575
3rd 0.1927692 195.8949  0.229032722 0.24955184
All 0.5296626 538.2511  0.166969402 0.18914032

GLM (family binomial, link logit)
    null.deviance   df  deviance   df iters converged
1st      1223.308 1045  920.8021 1038     5         1
2nd      1175.305 1045 1147.5176 1038     5         1
3rd      1448.213 1045 1142.7559 1038     5         1
> 
> ldose <- rep(0:5, 2) - 2 # V&R 4th ed. p. 191
> sex <- factor(rep(c("male", "female"), times=c(6,6)))
> numdead <- c(1,4,9,13,18,20,0,2,6,10,12,16)
> pair <- cbind(numdead, numalive=20 - numdead)
> 
> a3 <- earth(pair ~ sex + ldose, trace=1, pmethod="none",
+             glm=list(family=binomial(link=probit), maxit=100))
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 2 matrix: 1=numdead (paired with numalive)
Forward pass term 1, 2, 4, 6
Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.9069 RSq 0.9808
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.9525 RSq 0.9808 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 5.565963 (9 dof)   iters 4
> printh(a3)
===a3 
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 2.376093    RSS 9.702381    GRSq 0.952486    RSq 0.9807588

GLM null.deviance 124.8756 (11 dof)   deviance 5.565963 (9 dof)   iters 4
> 
> numdead2 <- c(2,8,11,12,20,23,0,4,6,16,12,14) # bogus data
> doublepair <- cbind(numdead, numalive=20-numdead,
+                     numdead2=numdead2, numalive2=30-numdead2)
> 
> a4 <- earth(doublepair ~ sex + ldose, trace=1, pmethod="none",
+             glm=list(family="binomial"))
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 4 matrix: 1=numdead (paired with numalive), 2=numdead2 (paired with numalive2)
Forward pass term 1, 2, 4, 6
Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.658 RSq 0.9293
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.8255 RSq 0.9293 
GLM numdead: null.deviance 124.8756 (11 dof)   deviance 6.757064 (9 dof)   iters 4
GLM numdead2: null.deviance 91.62481 (11 dof)   deviance 16.06743 (9 dof)   iters 4
> printh(a4)
===a4 
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)

Earth
               GCV       RSS      GRSq       RSq
numdead   2.376093  9.702381 0.9524860 0.9807588
numdead2 15.773761 64.409524 0.7079827 0.8817451
All      18.149854 74.111905 0.8255238 0.9293443

GLM (family binomial, link logit)
         null.deviance df  deviance df iters converged
numdead      124.87559 11  6.757064  9     4         1
numdead2      91.62481 11 16.067427  9     4         1
> 
> counts <- c(18,17,15,20,10,20,25,13,12) # Dobson 1990 p. 93
> outcome <- gl(3,1,9)
> treatment <- gl(3,3)
> 
> a5 <- earth(counts ~ outcome + treatment, trace=1, pmethod="none",
+             glm=list(family=poisson))
x is a 9 by 4 matrix: 1=outcome2, 2=outcome3, 3=treatment2, 4=treatment3
y is a 9 by 1 matrix: 1=counts
Forward pass term 1, 2, 4, 6
Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq -6.576 RSq 0.5265
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 4 predictors
After backward pass GRSq -0.8939 RSq 0.5265 
GLM counts: null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4
> printh(a5)
===a5 
Earth selected 3 of 3 terms, and 2 of 4 predictors 
Importance: outcome2, outcome3, treatment2-unused, treatment3-unused
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 46.875    RSS 83.33333    GRSq -0.8939394    RSq 0.5265152

GLM null.deviance 10.58145 (8 dof)   deviance 5.129141 (6 dof)   iters 4
> 
> a6 <- earth(numdead ~ sex + ldose, trace=1, pmethod="none",
+             glm=list(family=gaussian(link=identity)))
x is a 12 by 2 matrix: 1=sexmale, 2=ldose
y is a 12 by 1 matrix: 1=numdead
Forward pass term 1, 2, 4, 6
Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.9069 RSq 0.9808
Prune method "none" penalty 2 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.9525 RSq 0.9808 
GLM numdead: null.deviance 504.25 (11 dof)   deviance 9.702381 (9 dof)   iters 2
> printh(a6$coefficients == a6$glm.coefficients)  # all TRUE
===a6$coefficients == a6$glm.coefficients 
            numdead
(Intercept)    TRUE
h(ldose--2)    TRUE
sexmale        TRUE
> printh(a6)
===a6 
Earth selected 3 of 3 terms, and 2 of 2 predictors 
Importance: ldose, sexmale
Number of terms at each degree of interaction: 1 2 (additive model)
Earth GCV 2.376093    RSS 9.702381    GRSq 0.952486    RSq 0.9807588

GLM null.deviance 504.25 (11 dof)   deviance 9.702381 (9 dof)   iters 2
> 
> remove(ldose)
> remove(sex)
> remove(numdead)
> remove(pair)
> remove(numdead2)
> remove(doublepair)
> remove(counts)
> remove(outcome)
> remove(treatment)
> 
> printh(earth(cbind(Volume,lvol=log(Volume)) ~ ., data=trees))
===earth(cbind(Volume, lvol = log(Volume)) ~ ., data = trees) 
Selected 4 of 6 terms, and 2 of 2 predictors 
Importance: Girth, Height
Number of terms at each degree of interaction: 1 3 (additive model)

             GCV        RSS      GRSq       RSq
Volume 10.606315 197.072183 0.9620131 0.9756884
lvol    0.013537   0.251526 0.9526989 0.9697273
All    10.619852 197.323709 0.9620035 0.9756823
> attach(trees)
> printh(earth(data.frame(Girth,Height), data.frame(Volume,lvol=log(Volume))))
===earth(data.frame(Girth, Height), data.frame(Volume, lvol = log(Volume))) 
Selected 4 of 6 terms, and 2 of 2 predictors 
Importance: Girth, Height
Number of terms at each degree of interaction: 1 3 (additive model)

             GCV        RSS      GRSq       RSq
Volume 10.606315 197.072183 0.9620131 0.9756884
lvol    0.013537   0.251526 0.9526989 0.9697273
All    10.619852 197.323709 0.9620035 0.9756823
> detach(trees)
> 
> lm.fit <- lm(O3 ~ log(temp) + humidity*temp, data=ozone1)
> printh(lm.fit)
===lm.fit 

Call:
lm(formula = O3 ~ log(temp) + humidity * temp, data = ozone1)

Coefficients:
  (Intercept)      log(temp)       humidity           temp  humidity:temp  
     94.85623      -31.27411       -0.20050        0.63299        0.00475  

> plotmo(lm.fit, se=2)

 grid:    temp humidity
            62       64

> lm.fit2 <- lm(O3 ~ temp+ibh+doy, data=ozone1)
> printh(lm.fit2)
===lm.fit2 

Call:
lm(formula = O3 ~ temp + ibh + doy, data = ozone1)

Coefficients:
(Intercept)         temp          ibh          doy  
 -7.6740829    0.3785184   -0.0009858   -0.0066324  

> plotmo(lm.fit2, all2=TRUE, clip=FALSE)

 grid:    temp    ibh   doy
            62 2112.5 205.5

> 
> cat("--- print.default of earth object---------\n")
--- print.default of earth object---------
> print.default(a, digits=3)
$bx
      (Intercept) h(Girth-13.7) h(13.7-Girth) h(Height-75)
 [1,]           1           0.0           2.6            5
 [2,]           1           0.0           2.3            1
 [3,]           1           0.0           0.8           10
 [4,]           1           3.6           0.0            6
 [5,]           1           0.0           2.9            8
 [6,]           1           2.3           0.0            0
 [7,]           1           4.2           0.0            5
 [8,]           1           0.0           0.8            0
 [9,]           1           0.0           1.7            0
[10,]           1           0.0           5.1            0
[11,]           1           0.0           3.0            6
[12,]           1           0.0           3.2            0
[13,]           1           0.0           2.0            0
[14,]           1           0.0           2.7            0
[15,]           1           0.0           0.0            0
[16,]           1           0.0           2.7            0
[17,]           1           0.0           2.4            4
[18,]           1           4.3           0.0            5
[19,]           1           0.3           0.0            3
[20,]           1           0.0           2.5            0
[21,]           1           0.8           0.0            0
[22,]           1           0.0           4.9            0
[23,]           1           3.8           0.0            7
[24,]           1           0.5           0.0            5

$dirs
              Girth Height
(Intercept)       0      0
h(Girth-13.7)     1      0
h(13.7-Girth)    -1      0
h(Height-75)      0      1
h(75-Height)      0     -1

$cuts
              Girth Height
(Intercept)     0.0      0
h(Girth-13.7)  13.7      0
h(13.7-Girth)  13.7      0
h(Height-75)    0.0     75
h(75-Height)    0.0     75

$selected.terms
[1] 1 2 3 4

$prune.terms
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    0    0    0    0
[2,]    1    2    0    0    0
[3,]    1    2    3    0    0
[4,]    1    2    3    4    0
[5,]    1    2    3    4    5

$rss
[1] 126

$rsq
[1] 0.973

$gcv
[1] 10.5

$grsq
[1] 0.951

$rss.per.response
[1] 126

$rsq.per.response
[1] 0.973

$gcv.per.response
[1] 10.5

$grsq.per.response
[1] 0.951

$rss.per.subset
[1] 4739  796  236  126  125

$gcv.per.subset
[1] 215.0  43.3  15.7  10.5  13.4

$rss.per.subset
[1] 4739  796  236  126  125

$gcv.per.subset
[1] 215.0  43.3  15.7  10.5  13.4

$fitted.values
      Volume
 [1,]  21.82
 [2,]  19.95
 [3,]  32.02
 [4,]  52.91
 [5,]  22.95
 [6,]  40.92
 [7,]  55.66
 [8,]  24.64
 [9,]  21.38
[10,]   9.07
[11,]  21.11
[12,]  15.95
[13,]  20.30
[14,]  17.76
[15,]  27.54
[16,]  17.76
[17,]  21.80
[18,]  56.24
[19,]  31.50
[20,]  18.49
[21,]  32.19
[22,]   9.80
[23,]  54.81
[24,]  34.14

$residuals
      Volume
 [1,]  0.784
 [2,]  1.051
 [3,]  1.775
 [4,]  2.492
 [5,] -3.245
 [6,] -2.616
 [7,]  2.640
 [8,] -2.441
 [9,] -2.283
[10,]  1.226
[11,] -2.307
[12,]  0.448
[13,]  1.003
[14,] -2.163
[15,] -1.837
[16,]  0.437
[17,]  2.398
[18,] -4.742
[19,]  3.003
[20,]  1.413
[21,]  4.109
[22,]  0.402
[23,]  0.890
[24,] -2.437

$coefficients
              Volume
(Intercept)   27.537
h(Girth-13.7)  5.817
h(13.7-Girth) -3.620
h(Height-75)   0.738

$penalty
[1] 2

$namesx.org
[1] "Girth"  "Height"

$namesx
[1] "Girth"  "Height"

$terms
Volume ~ Girth + Height
attr(,"variables")
list(Volume, Girth, Height)
attr(,"factors")
       Girth Height
Volume     0      0
Girth      1      0
Height     0      1
attr(,"term.labels")
[1] "Girth"  "Height"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(Volume, Girth, Height)
attr(,"dataClasses")
   Volume     Girth    Height 
"numeric" "numeric" "numeric" 

$call
earth(formula = Volume ~ ., data = trees[train.subset, ])

attr(,"class")
[1] "earth"
> cat("--- done print.default of earth object----\n")
--- done print.default of earth object----
> if (PLOT)
+     plot(a)
> library(mda)
> (a <- fda(Species~., data=iris, method=earth, keepxy=TRUE))
Call:
fda(formula = Species ~ ., data = iris, method = earth, keepxy = TRUE)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 92.84 100.00 

Training Misclassification Error: 0.02667 ( N = 150 )
> if (PLOT)
+     plot(a)
> printh(summary(a$fit))
===summary(a$fit) 
Call: earth(x=x, y=Theta, weights=weights, keepxy=TRUE)

                            y1         y2
(Intercept)         -2.2593563 -0.5770863
h(Sepal.Length-4.9) -0.1499415 -0.3058077
h(Petal.Length-3.6)  1.3910265  0.3175657
h(Petal.Length-4.5) -0.5009526  1.2731238
h(4.5-Petal.Length)  1.1494121 -0.0231700
h(Petal.Length-5.4) -0.8462664 -1.4715197
h(Petal.Width-1.6)   2.2978429  3.9451201
h(Petal.Width-1.9)  -2.7263266 -4.6922255

Selected 8 of 13 terms, and 3 of 4 predictors 
Importance: Petal.Length, Petal.Width, Sepal.Length, Sepal.Width-unused
Number of terms at each degree of interaction: 1 7 (additive model)

           GCV       RSS      GRSq       RSq
y1  0.06445282  7.831017 0.9364037 0.9477932
y2  0.12559901 15.260280 0.8760701 0.8982648
All 0.19005183 23.091297 0.9062369 0.9230290
> # expect Warning: summary.earth ignored unrecognized argument "none.such1"
> printh(summary(a$fit, none.such1="xxx"))
===summary(a$fit, none.such1 = "xxx") Warning: summary.earth ignored unrecognized argument "none.such1"

Call: earth(x=x, y=Theta, weights=weights, keepxy=TRUE)

                            y1         y2
(Intercept)         -2.2593563 -0.5770863
h(Sepal.Length-4.9) -0.1499415 -0.3058077
h(Petal.Length-3.6)  1.3910265  0.3175657
h(Petal.Length-4.5) -0.5009526  1.2731238
h(4.5-Petal.Length)  1.1494121 -0.0231700
h(Petal.Length-5.4) -0.8462664 -1.4715197
h(Petal.Width-1.6)   2.2978429  3.9451201
h(Petal.Width-1.9)  -2.7263266 -4.6922255

Selected 8 of 13 terms, and 3 of 4 predictors 
Importance: Petal.Length, Petal.Width, Sepal.Length, Sepal.Width-unused
Number of terms at each degree of interaction: 1 7 (additive model)

           GCV       RSS      GRSq       RSq
y1  0.06445282  7.831017 0.9364037 0.9477932
y2  0.12559901 15.260280 0.8760701 0.8982648
All 0.19005183 23.091297 0.9062369 0.9230290
> # expect Warning: format.earth ignored unrecognized argument "none.such2"
> printh(summary(a$fit, style="bf", none.such2="xxx"))
===summary(a$fit, style = "bf", none.such2 = "xxx") Warning: format.earth ignored unrecognized argument "none.such2"

Call: earth(x=x, y=Theta, weights=weights, keepxy=TRUE)

y1 =
  -2.259356
  - 0.1499415 * bf1
  +  1.391026 * bf2
  - 0.5009526 * bf3
  +  1.149412 * bf4
  - 0.8462664 * bf5
  +  2.297843 * bf6
  -  2.726327 * bf7

   bf1  h(Sepal.Length-4.9)
   bf2  h(Petal.Length-3.6)
   bf3  h(Petal.Length-4.5)
   bf4  h(4.5-Petal.Length)
   bf5  h(Petal.Length-5.4)
   bf6  h(Petal.Width-1.6)
   bf7  h(Petal.Width-1.9)

y2 =
  -0.5770863
  - 0.3058077 * bf1
  + 0.3175657 * bf2
  +  1.273124 * bf3
  -   0.02317 * bf4
  -   1.47152 * bf5
  +   3.94512 * bf6
  -  4.692226 * bf7

   bf1  h(Sepal.Length-4.9)
   bf2  h(Petal.Length-3.6)
   bf3  h(Petal.Length-4.5)
   bf4  h(4.5-Petal.Length)
   bf5  h(Petal.Length-5.4)
   bf6  h(Petal.Width-1.6)
   bf7  h(Petal.Width-1.9)

Selected 8 of 13 terms, and 3 of 4 predictors 
Importance: Petal.Length, Petal.Width, Sepal.Length, Sepal.Width-unused
Number of terms at each degree of interaction: 1 7 (additive model)

           GCV       RSS      GRSq       RSq
y1  0.06445282  7.831017 0.9364037 0.9477932
y2  0.12559901 15.260280 0.8760701 0.8982648
All 0.19005183 23.091297 0.9062369 0.9230290
> if (PLOT) {
+     plot(a$fit, col.residuals=iris$Species)
+     plotmo(a$fit, nresponse=1, ylim=c(-1.5,1.5), clip=FALSE)
+     plotmo(a$fit, nresponse=2, ylim=c(-1.5,1.5), clip=FALSE)
+ }

 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3


 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3

> a <- update(a, nk=3) # not on man page
> printh(a)
===a 
Call:
fda(formula = Species ~ ., data = iris, method = earth, keepxy = TRUE, 
    nk = 3)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 94.38 100.00 

Training Misclassification Error: 0.04 ( N = 150 )
> printh(summary(a$fit))
===summary(a$fit) 
Call: earth(x=x, y=Theta, weights=weights, keepxy=TRUE, nk=3)

                          y1          y2
(Intercept)        -1.300791 -0.74367728
h(Petal.Width-1.2)  1.351182  2.22366217
h(1.2-Petal.Width)  2.601323  0.03896856

Selected 3 of 3 terms, and 1 of 4 predictors 
Importance: Petal.Width, Sepal.Length-unused, Sepal.Width-unused, ...
Number of terms at each degree of interaction: 1 2 (additive model)

          GCV      RSS      GRSq       RSq
y1  0.1190355 16.68481 0.8825464 0.8887680
y2  0.2430154 34.06267 0.7602140 0.7729156
All 0.3620509 50.74747 0.8213802 0.8308418
> head(etitanic) # pclass and sex are unordered factors
  pclass survived    sex     age sibsp parch
1    1st        1 female 29.0000     0     0
2    1st        1   male  0.9167     1     2
3    1st        0 female  2.0000     1     2
4    1st        0   male 30.0000     1     2
5    1st        0 female 25.0000     1     2
6    1st        1   male 48.0000     0     0
> earth(pclass ~ ., data=etitanic, trace=2)
x is a 1046 by 5 matrix: 1=survived, 2=sexmale, 3=age, 4=sibsp, 5=parch
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0910 0.0980      0.09797    3          age          26  2   3   
4      0.1525 0.1622       0.0642    1     survived           0< 4       
6      0.1598 0.1758      0.01368    4        sibsp           1  5   6   
8      0.1670 0.1891       0.0133    5        parch           2  7   8   
10     0.1664 0.1918     0.002617    3          age          21  9       
12     0.1656 0.1941     0.002356    3          age          56  10      
14     0.1630 0.1947    0.0006186    3          age          48  11      reject term

Reached delta RSq threshold (DeltaRSq 0.00061857 < 0.001) at 13 terms
After forward pass GRSq 0.163 RSq 0.1947
Forward pass complete: 13 terms (10 terms used)
Prune method "backward" penalty 2 nprune 10: selected 8 of 10 terms, and 4 of 5 predictors
After backward pass GRSq 0.167 RSq 0.1891 
Selected 8 of 10 terms, and 4 of 5 predictors 
Importance: age, survived, sibsp, parch, sexmale-unused
Number of terms at each degree of interaction: 1 7 (additive model)

          GCV      RSS         GRSq        RSq
1st 0.1483414 150.7467  0.251448718 0.27137124
2nd 0.1885520 191.6094 -0.004971341 0.02177575
3rd 0.1927692 195.8949  0.229032722 0.24955184
All 0.5296626 538.2511  0.166969402 0.18914032
> 
> cat("--- format.earth.Rd ----------------------\n")
--- format.earth.Rd ----------------------
> as.func <- function( # convert expression string to func
+                object, digits = 8, use.names = TRUE, ...)
+   eval(parse(text=paste(
+     "function(x)\n",
+     "{\n",
+     "if(is.vector(x))\n",
+     "  x <- matrix(x, nrow = 1, ncol = length(x))\n",
+     "with(as.data.frame(x),\n",
+     format(object, digits = digits, use.names = use.names, style = "p", ...),
+     ")\n",
+     "}\n", sep = "")))
> a <- earth(Volume ~ ., data = trees)
> my.func <- as.func(a, use.names = FALSE)
> printh(my.func(c(10,80)))     # yields 17.76888
===my.func(c(10, 80)) [1] 18.11065
> printh(predict(a, c(10,80)))  # yields 17.76888, but is slower
===predict(a, c(10, 80))        Volume
[1,] 18.11065
> example(format.earth)

frmt.r> a <- earth(Volume ~ ., data = trees)

frmt.r> cat(format(a))
  27.2459
  +  6.176692 * h(Girth-14)
  -  3.266228 * h(14-Girth)
  + 0.4912072 * h(Height-72)

frmt.r> # yields:
frmt.r> #    27.2
frmt.r> #    +  6.18 * h(Girth-14)
frmt.r> #    -  3.27 * h(14-Girth)
frmt.r> #    + 0.491 * h(Height-72)
frmt.r> 
frmt.r> cat(format(a, style="pmax")) # default formatting style prior to earth version 1.4
  27.2459
  +  6.176692 * pmax(0,  Girth -     14) 
  -  3.266228 * pmax(0,     14 -  Girth) 
  + 0.4912072 * pmax(0, Height -     72) 

frmt.r> # yields:
frmt.r> #    27.2
frmt.r> #    +  6.18 * pmax(0,  Girth -     14)
frmt.r> #    -  3.27 * pmax(0,     14 -  Girth)
frmt.r> #    + 0.491 * pmax(0, Height -     72)
frmt.r> 
frmt.r> cat(format(a, style="bf"))
  27.2459
  +  6.176692 * bf1
  -  3.266228 * bf2
  + 0.4912072 * bf3

   bf1  h(Girth-14)
   bf2  h(14-Girth)
   bf3  h(Height-72)

frmt.r> # yields:
frmt.r> #    27.2
frmt.r> #    +  6.18 * bf1
frmt.r> #    -  3.27 * bf2
frmt.r> #    + 0.491 * bf3
frmt.r> #
frmt.r> #     bf1  h(Girth-14)
frmt.r> #     bf2  h(14-Girth)
frmt.r> #     bf3  h(Height-72)
frmt.r> 
frmt.r> 
frmt.r> 
> a <- earth(Volume ~ ., data = trees)
> cat(format(a)) # basic tests of format.earth
  27.2459
  +  6.176692 * h(Girth-14)
  -  3.266228 * h(14-Girth)
  + 0.4912072 * h(Height-72)
> cat(format(a, digits=4))
  27.25
  +  6.177 * h(Girth-14)
  -  3.266 * h(14-Girth)
  + 0.4912 * h(Height-72)
> # cat(format(a, use.names=FALSE))
> cat(format(a, style="pmax"))
  27.2459
  +  6.176692 * pmax(0,  Girth -     14) 
  -  3.266228 * pmax(0,     14 -  Girth) 
  + 0.4912072 * pmax(0, Height -     72) 
> cat(format(a, style="max"))
  27.2459
  +  6.176692 * max(0,  Girth -     14) 
  -  3.266228 * max(0,     14 -  Girth) 
  + 0.4912072 * max(0, Height -     72) 
> cat(format(a, style="bf"))
  27.2459
  +  6.176692 * bf1
  -  3.266228 * bf2
  + 0.4912072 * bf3

   bf1  h(Girth-14)
   bf2  h(14-Girth)
   bf3  h(Height-72)
> cat(format(a, use.names=FALSE, style="p"))
  27.2459
  +  6.176692 * pmax(0, x[,1] -    14) 
  -  3.266228 * pmax(0,    14 - x[,1]) 
  + 0.4912072 * pmax(0, x[,2] -    72) 
> cat(format(a, use.names=FALSE, style="m"))
  27.2459
  +  6.176692 * max(0, x[,1] -    14) 
  -  3.266228 * max(0,    14 - x[,1]) 
  + 0.4912072 * max(0, x[,2] -    72) 
> a <- earth(Volume ~ Girth*Height, data = trees, pmethod="none")
> cat(format(a))
  23.99875
  +   2.332447 * h(Girth-12.9)
  -  0.7650929 * h(12.9-Girth)
  + 0.04033515 * h(Girth:Height-954.6)
  - 0.02653566 * h(954.6-Girth:Height)
> cat(format(a, colon.char="*"))
  23.99875
  +   2.332447 * h(Girth-12.9)
  -  0.7650929 * h(12.9-Girth)
  + 0.04033515 * h(Girth*Height-954.6)
  - 0.02653566 * h(954.6-Girth*Height)
> a <- lm(Volume ~ ., data = trees)
> cat(format(a)) # basic tests of format.lm
  -57.98766
  +  4.708161 * Girth
  + 0.3392512 * Height
> cat(format(a, digits=4))
  -57.99
  +  4.708 * Girth
  + 0.3393 * Height
> cat(format(a, use.names=FALSE))
  -57.98766
  +  4.708161 * x[,1]
  + 0.3392512 * x[,2]
> cat(format(a, style="p"))
  -57.98766
  +  4.708161 * Girth
  + 0.3392512 * Height
> cat(format(a, use.names=FALSE, style="p"))
  -57.98766
  +  4.708161 * x[,1]
  + 0.3392512 * x[,2]
> a <- lm(Volume ~ Girth*Height, data = trees)
> cat(format(a))
  69.39632
  -  5.855848 * Girth
  -  1.297083 * Height
  + 0.1346544 * Girth:Height
> cat(format(a, colon.char="*"))
  69.39632
  -  5.855848 * Girth
  -  1.297083 * Height
  + 0.1346544 * Girth*Height
> cat("--- mars.to.earth.Rd ----------------------\n")
--- mars.to.earth.Rd ----------------------
> example(mars.to.earth)

mrs.t.> if (require(mda)) {
mrs.t.+     a <- mars(trees[,-3], trees[,3])
mrs.t.+     a <- mars.to.earth(a)
mrs.t.+     summary(a, digits = 2) # the standard earth functions can now be used
mrs.t.+ 
mrs.t.+     # yields (note the reconstructed call):
mrs.t.+     #    Call: earth(x=trees[, -3], y=trees[, 3])
mrs.t.+     #
mrs.t.+     #                    y
mrs.t.+     #   (Intercept)  19.76
mrs.t.+     #   h(Girth-12)   5.40
mrs.t.+     #   h(12-Girth)  -2.56
mrs.t.+     #   h(Height-76)  0.72
mrs.t.+     #
mrs.t.+     #   Selected 4 of 5 terms, and 2 of 2 predictors
mrs.t.+     #   Importance: Girth, Height
mrs.t.+     #   Number of terms at each degree of interaction: 1 3 (additive model)
mrs.t.+     #   GCV 13    RSS 251    GRSq 0.95    RSq 0.97
mrs.t.+ }
Converted mars(x=trees[, -3], y=trees[, 3])
to        earth(x=trees[, -3], y=trees[, 3])
Call: earth(x=trees[, -3], y=trees[, 3])

             coefficients
(Intercept)         19.76
h(Girth-12)          5.40
h(12-Girth)         -2.56
h(Height-76)         0.72

Selected 4 of 5 terms, and 2 of 2 predictors 
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 13    RSS 251    GRSq 0.95    RSq 0.97
> library(mda)
> a <- mars(trees[,-3], trees[,3])
> a <- mars.to.earth(a)
Converted mars(x=trees[, -3], y=trees[, 3])
to        earth(x=trees[, -3], y=trees[, 3])
> summary(a, digits = 2)
Call: earth(x=trees[, -3], y=trees[, 3])

             coefficients
(Intercept)         19.76
h(Girth-12)          5.40
h(12-Girth)         -2.56
h(Height-76)         0.72

Selected 4 of 5 terms, and 2 of 2 predictors 
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 13    RSS 251    GRSq 0.95    RSq 0.97
> printh(summary(a, digits=2))
===summary(a, digits = 2) 
Call: earth(x=trees[, -3], y=trees[, 3])

             coefficients
(Intercept)         19.76
h(Girth-12)          5.40
h(12-Girth)         -2.56
h(Height-76)         0.72

Selected 4 of 5 terms, and 2 of 2 predictors 
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 13    RSS 251    GRSq 0.95    RSq 0.97
> printh(summary(a, digits=2, style="bf"))
===summary(a, digits = 2, style = "bf") 
Call: earth(x=trees[, -3], y=trees[, 3])

y =
  20
  +  5.4 * bf1
  -  2.6 * bf2
  + 0.72 * bf3

   bf1  h(Girth-12)
   bf2  h(12-Girth)
   bf3  h(Height-76)

Selected 4 of 5 terms, and 2 of 2 predictors 
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 13    RSS 251    GRSq 0.95    RSq 0.97
> cat("--- plot.earth.models.Rd ----------------------\n")
--- plot.earth.models.Rd ----------------------
> if (PLOT)
+     example(plot.earth.models)

plt.r.> data(ozone1)

plt.r.> a1 <- earth(O3 ~ .,          data = ozone1, degree = 2)

plt.r.> a2 <- earth(O3 ~ .-wind,     data = ozone1, degree = 2, nk = 31)

plt.r.> a3 <- earth(O3 ~ .-humidity, data = ozone1, degree = 2, nk = 31)

plt.r.> plot.earth.models(list(a1,a2,a3), ylim=c(.6,.8))
> cat("--- plot.earth.Rd ----------------------\n")
--- plot.earth.Rd ----------------------
> if (PLOT) {
+     data(etitanic)
+     a <- earth(survived ~ ., data=etitanic, glm=list(family=binomial))
+     par(mfrow=c(2,2))
+     plot(a$glm.list[[1]])
+     example(plot.earth)
+ }

plt.rt> data(ozone1)

plt.rt> a <- earth(O3 ~ ., data = ozone1, degree = 2)

plt.rt> plot(a)
> cat("--- predict.earth.Rd ----------------------\n")
--- predict.earth.Rd ----------------------
> example(predict.earth)

prdct.> data(trees)

prdct.> a <- earth(Volume ~ ., data = trees)

prdct.> predict(a)           # same as a$fitted.values
         Volume
 [1,]  8.628402
 [2,]  9.608270
 [3,] 10.261516
 [4,] 15.814103
 [5,] 20.888213
 [6,] 22.197250
 [7,] 17.447216
 [8,] 18.920838
 [9,] 21.703497
[10,] 19.574084
[11,] 21.865535
[12,] 20.718536
[13,] 20.718536
[14,] 19.733576
[15,] 22.187066
[16,] 24.635464
[17,] 30.038743
[18,] 31.836441
[19,] 26.266031
[20,] 26.592654
[21,] 30.193143
[22,] 32.410896
[23,] 31.316660
[24,] 39.599283
[25,] 43.908327
[26,] 52.049848
[27,] 53.776393
[28,] 55.264655
[29,] 55.882325
[30,] 55.882325
[31,] 75.380174

prdct.> predict(a, c(10,80)) # yields 18.11
       Volume
[1,] 18.11065
> cat("--- update.earth.Rd ----------------------\n")
--- update.earth.Rd ----------------------
> example(update.earth)

updt.r> data(ozone1)

updt.r> (a <- earth(O3 ~ ., data = ozone1, degree = 2))
Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567

updt.r> # yields:
updt.r> #    Selected 11 of 21 terms, and 8 of 9 predictors
updt.r> #    Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
updt.r> #    Number of terms at each degree of interaction: 1 5 5
updt.r> #    GCV 13.5    RSS 3768    GRSq 0.791    RSq 0.822
updt.r> 
updt.r> update(a, formula = O3 ~ . - temp) # requires forward pass and pruning
Selected 14 of 21 terms, and 8 of 8 predictors 
Importance: ibt, humidity, doy, vh, ibh, dpg, wind, vis
Number of terms at each degree of interaction: 1 5 8
GCV 13.13386    RSS 3498.871    GRSq 0.7959809    RSq 0.8342977

updt.r> # yields:
updt.r> #    Selected 14 of 21 terms, and 8 of 8 predictors
updt.r> #    Importance: ibt, humidity, doy, vh, ibh, dpg, wind, vis
updt.r> #    Number of terms at each degree of interaction: 1 5 8
updt.r> #    GCV 13.1    RSS 3499    GRSq 0.796    RSq 0.834
updt.r> 
updt.r> update(a, nprune = 8)              # requires only pruning
Selected 8 of 21 terms, and 6 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh-unused, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 2
GCV 15.08166    RSS 4434.568    GRSq 0.7657241    RSq 0.7899842

updt.r> # yields:
updt.r> #    Selected 8 of 21 terms, and 6 of 9 predictors
updt.r> #    Importance: temp, humidity, ibt, doy, dpg, ibh-unused, vis, vh-unused, wind-unused
updt.r> #    Number of terms at each degree of interaction: 1 5 2
updt.r> #    GCV 15.1    RSS 4435    GRSq 0.766    RSq 0.79
updt.r> 
updt.r> update(a, penalty=1, ponly=TRUE)   # pruning pass only with a new penalty
Selected 13 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 7
GCV 12.5252    RSS 3671.06    GRSq 0.8054357    RSq 0.826143

updt.r> # yields:
updt.r> #    Selected 13 of 21 terms, and 8 of 9 predictors
updt.r> #    Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
updt.r> #    Number of terms at each degree of interaction: 1 5 7
updt.r> #    GCV 12.5    RSS 3671    GRSq 0.805    RSq 0.826
updt.r> 
updt.r> 
updt.r> 
> 
> cat("--- evimp.Rd -----------------------------\n")
--- evimp.Rd -----------------------------
> 
> par(mfrow=c(2,2))
> cat('before calling evimp par("mar", "cex"):\n')
before calling evimp par("mar", "cex"):
> print(par("mar", "cex"))
$mar
[1] 5.1 4.1 4.1 2.1

$cex
[1] 0.83

> 
> example(evimp)

evimp> data(ozone1)

evimp> a <- earth(O3 ~ ., data=ozone1, degree=2)

evimp> ev <- evimp(a, trim=FALSE)

evimp> plot(ev)

evimp> print(ev)
          nsubsets   gcv    rss
temp            10 100.0  100.0
humidity         8  35.6   38.4
ibt              8  35.6   38.4
doy              7  33.6   36.0
dpg              5  25.9   28.0
ibh              4  30.9>  32.3>
vis              4  20.8   22.9
wind             1   8.7    9.9
vh-unused        0   0.0    0.0
> 
> cat("--- plot.evimp.Rd ------------------------\n")
--- plot.evimp.Rd ------------------------
> 
> example(plot.evimp)

plt.vm> data(ozone1)

plt.vm> a <- earth(O3 ~ ., data=ozone1, degree=2)

plt.vm> ev <- evimp(a)

plt.vm> plot(ev)

plt.vm> print(ev)
         nsubsets   gcv    rss
temp           10 100.0  100.0
humidity        8  35.6   38.4
ibt             8  35.6   38.4
doy             7  33.6   36.0
dpg             5  25.9   28.0
ibh             4  30.9>  32.3>
vis             4  20.8   22.9
wind            1   8.7    9.9
> 
> rownames(ev)[4] <- "a_long_variable_name"
> 
> plot(ev, main="plot.evimp with various options",
+     cex.var = .8,
+     type.nsubsets = "p",
+     col.nsubsets = "red",
+     lty.nsubsets = 2, # ignored because type.nsubsets="p"
+     type.gcv = "l",
+     col.gcv = "green",
+     lty.gcv = 3,
+     type.rss = "b",
+     col.rss = "blue",
+     lty.rss = 4,
+     cex.legend = .8,
+     x.legend = "topright")
> 
> cat('after calling evimp par("mar", "cex"):\n')
after calling evimp par("mar", "cex"):
> print(par("mar", "cex"))
$mar
[1] 5.1 4.1 4.1 2.1

$cex
[1] 0.83

> par(mfrow=c(1,1))
> 
> cat("--- test predict.earth -------------------\n")
--- test predict.earth -------------------
> 
> a <- earth(Volume ~ ., data = trees)
> cat("1a predict(a, c(10,80))\n")
1a predict(a, c(10,80))
> printh(predict(a, c(10,80), trace=1))
===predict(a, c(10, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
predict.earth: returning earth predictions 
       Volume
[1,] 18.11065
> cat("1b predict(a, c(10,10,80,80))\n")
1b predict(a, c(10,10,80,80))
> printh(predict(a, c(10,10,80,80), trace=1))
===predict(a, c(10, 10, 80, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    10     80
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           4            8
predict.earth: returning earth predictions 

       Volume
[1,] 18.11065
[2,] 18.11065
> cat("1c predict(a, c(10,11,80,81))\n")
1c predict(a, c(10,11,80,81))
> printh(predict(a, c(10,11,80,81), trace=1))
===predict(a, c(10, 11, 80, 81), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    11     81
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    11     81
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           3            9
predict.earth: returning earth predictions 

       Volume
[1,] 18.11065
[2,] 21.86808
> cat("2 predict(a)\n")
2 predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

        Volume
[1,]  8.628402
[2,]  9.608270
[3,] 10.261516
[4,] 15.814103
[5,] 20.888213
[6,] 22.197250
> cat("3a predict(a, matrix(c(10,12), nrow=1, ncol=2))\n")
3a predict(a, matrix(c(10,12), nrow=1, ncol=2))
> printh(predict(a, matrix(c(10,12), nrow=1, ncol=2), trace=1))
===predict(a, matrix(c(10, 12), nrow = 1, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            0
predict.earth: returning earth predictions 
       Volume
[1,] 14.18099
> cat("3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)\n")
3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)
> printh(predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE), trace=1))
===predict(a, matrix(c(10, 12), nrow = 2, ncol = 2, byrow = TRUE),     trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
2    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
2    10     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            0
[2,]           1           0           4            0
predict.earth: returning earth predictions 

       Volume
[1,] 14.18099
[2,] 14.18099
> cat("3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))\n")
3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume
[1,] 18.11065
[2,] 29.55517
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> colnames(xpredict) <- c("Girth", "Height")
> cat("4 predict(a, xpredict with colnames)\n")
4 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume
[1,] 18.11065
[2,] 29.55517
> cat("5 predict(a, as.data.frame(xpredict with colnames))\n")
5 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume
[1,] 18.11065
[2,] 29.55517
> # reverse dataframe columns (and their names), predict should deal with it correctly
> xpredict <- as.data.frame(cbind(xpredict[,2], xpredict[,1]))
> colnames(xpredict) <- c("Height", "Girth")
> cat("6a predict(a, xpredict with reversed columns and colnames)\n")
6a predict(a, xpredict with reversed columns and colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume
[1,] 18.11065
[2,] 29.55517
> xpredict2 <- cbind(xpredict[,1], xpredict[,2]) # nameless matrix
> cat("6b predict(a, xpredict2)\n")
6b predict(a, xpredict2)
> printh(predict(a, xpredict2, trace=1))
===predict(a, xpredict2, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    80     10
2    90     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    80     10
2    90     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1          66           0            0
[2,]           1          76           0            0
predict.earth: returning earth predictions 

       Volume
[1,] 434.9076
[2,] 496.6745
> 
> # repeat but with x,y (not formula) call to earth
> 
> x1 <- cbind(trees$Girth, trees$Height)
> colnames(x1) <- c("Girth", "Height")
> a <- earth(x1, trees$Volume)
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> cat("7a predict(a)\n")
7a predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

     trees$Volume
[1,]     8.628402
[2,]     9.608270
[3,]    10.261516
[4,]    15.814103
[5,]    20.888213
[6,]    22.197250
> cat("7n predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)\n")
7n predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

     trees$Volume
[1,]     18.11065
[2,]     29.55517
> colnames(xpredict) <- c("Girth", "Height")
> cat("8 predict(a, xpredict with colnames)\n")
8 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

     trees$Volume
[1,]     18.11065
[2,]     29.55517
> cat("9 predict(a, as.data.frame(xpredict with colnames))\n")
9 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

     trees$Volume
[1,]     18.11065
[2,]     29.55517
> cat("--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'\n")
--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'
> xpredict2 <- cbind(xpredict[,1], xpredict[,2])
> colnames(xpredict2) <- c("none.such", "joe")
> cat("10a predict(a, xpredict2)\n")
10a predict(a, xpredict2)
> printh(predict(a, xpredict2, trace=1), expect.warning=TRUE)
===predict(a, xpredict2, trace = 1)  expect warning -->get.earth.x from model.matrix.earth from predict.earth: unexpected x column names, renaming columns
    Old names: none.such joe
    New names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 
     trees$Volume
[1,]     18.11065
[2,]     29.55517
> cat("--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'\n")
--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'
> xpredict2 <- cbind(xpredict[,1], xpredict[,2])
> colnames(xpredict2) <- c("Height", "Girth") # reversed
> cat("10b predict(a, xpredict2)\n")
10b predict(a, xpredict2)
> printh(predict(a, xpredict2, trace=1), expect.warning=TRUE)
===predict(a, xpredict2, trace = 1)  expect warning -->get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    80     10
[2,]    90     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1          66           0            0
[2,]           1          76           0            0
predict.earth: returning earth predictions 
     trees$Volume
[1,]     434.9076
[2,]     496.6745
> 
> cat("--- test predict.earth with multiple response models-------------------\n")
--- test predict.earth with multiple response models-------------------
> 
> a <- earth(cbind(Volume, Volume + 100) ~ ., data = trees)
> cat("1a predict(a, c(10,80))\n")
1a predict(a, c(10,80))
> printh(predict(a, c(10,80), trace=1))
===predict(a, c(10, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
predict.earth: returning earth predictions 
       Volume       y2
[1,] 18.11065 118.1106
> cat("1b predict(a, c(10,10,80,80))\n")
1b predict(a, c(10,10,80,80))
> printh(predict(a, c(10,10,80,80), trace=1))
===predict(a, c(10, 10, 80, 80), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    10     80
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    10     80
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           4            8
predict.earth: returning earth predictions 

       Volume       y2
[1,] 18.11065 118.1106
[2,] 18.11065 118.1106
> cat("1c predict(a, c(10,11,80,81))\n")
1c predict(a, c(10,11,80,81))
> printh(predict(a, c(10,11,80,81), trace=1))
===predict(a, c(10, 11, 80, 81), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    11     81
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    11     81
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           3            9
predict.earth: returning earth predictions 

       Volume       y2
[1,] 18.11065 118.1106
[2,] 21.86808 121.8681
> cat("2 predict(a)\n")
2 predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

        Volume       y2
[1,]  8.628402 108.6284
[2,]  9.608270 109.6083
[3,] 10.261516 110.2615
[4,] 15.814103 115.8141
[5,] 20.888213 120.8882
[6,] 22.197250 122.1973
> cat("3a predict(a, matrix(c(10,12), nrow=1, ncol=2))\n")
3a predict(a, matrix(c(10,12), nrow=1, ncol=2))
> printh(predict(a, matrix(c(10,12), nrow=1, ncol=2), trace=1))
===predict(a, matrix(c(10, 12), nrow = 1, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
predict.earth: bx is a 1 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            0
predict.earth: returning earth predictions 
       Volume      y2
[1,] 14.18099 114.181
> cat("3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)\n")
3b predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE)
> printh(predict(a, matrix(c(10,12), nrow=2, ncol=2, byrow=TRUE), trace=1))
===predict(a, matrix(c(10, 12), nrow = 2, ncol = 2, byrow = TRUE),     trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     12
2    10     12
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     12
2    10     12
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            0
[2,]           1           0           4            0
predict.earth: returning earth predictions 

       Volume      y2
[1,] 14.18099 114.181
[2,] 14.18099 114.181
> cat("3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))\n")
3c predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2))
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> colnames(xpredict) <- c("Girth", "Height")
> cat("4 predict(a, xpredict with colnames)\n")
4 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> cat("5 predict(a, as.data.frame(xpredict with colnames))\n")
5 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> # reverse dataframe columns (and their names), predict should deal with it correctly
> xpredict <- as.data.frame(cbind(xpredict[,2], xpredict[,1]))
> colnames(xpredict) <- c("Height", "Girth")
> cat("6 predict(a, xpredict with reversed columns and colnames)\n")
6 predict(a, xpredict with reversed columns and colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of data after call to model.frame are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

       Volume       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> 
> # repeat but with x,y (not formula) call to earth
> 
> x1 <- cbind(trees$Girth, trees$Height)
> colnames(x1) <- c("Girth", "Height")
> a <- earth(x1, cbind(trees$Volume, trees$Volume+100))
> xpredict <- matrix(c(10,12,80,90), nrow=2, ncol=2)
> cat("7a predict(a)\n")
7a predict(a)
> printh(head(predict(a, trace=1)))
===head(predict(a, trace = 1)) predict.earth: returning earth fitted.values 

            y1       y2
[1,]  8.628402 108.6284
[2,]  9.608270 109.6083
[3,] 10.261516 110.2615
[4,] 15.814103 115.8141
[5,] 20.888213 120.8882
[6,] 22.197250 122.1973
> cat("7b predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)\n")
7b predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2)
> printh(predict(a, matrix(c(10,12,80,90), nrow=2, ncol=2), trace=1))
===predict(a, matrix(c(10, 12, 80, 90), nrow = 2, ncol = 2), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x has no column names, adding column names: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

           y1       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> colnames(xpredict) <- c("Girth", "Height")
> cat("8 predict(a, xpredict with colnames)\n")
8 predict(a, xpredict with colnames)
> printh(predict(a, xpredict, trace=1))
===predict(a, xpredict, trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
     Girth Height
[1,]    10     80
[2,]    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

           y1       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> cat("9 predict(a, as.data.frame(xpredict with colnames))\n")
9 predict(a, as.data.frame(xpredict with colnames))
> printh(predict(a, as.data.frame(xpredict), trace=1))
===predict(a, as.data.frame(xpredict), trace = 1) get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 

           y1       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> cat("--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'\n")
--Expect warning from predict.earth: the variable names in 'data' do not match those in 'object'
> xpredict <- as.data.frame(cbind(xpredict[,2], xpredict[,1]))
> colnames(xpredict) <- c("Height", "Girth")
> cat("10 predict(a, xpredict)\n")
10 predict(a, xpredict)
> printh(predict(a, xpredict, trace=1), expect.warning=TRUE)
===predict(a, xpredict, trace = 1)  expect warning -->get.earth.x from model.matrix.earth from predict.earth: x columns are in the wrong order, correcting the column order
    Old columns: Height Girth
    New columns: Girth Height
get.earth.x from model.matrix.earth from predict.earth: x is a 2 by 2 matrix: 1=Girth, 2=Height
Contents of x are
  Girth Height
1    10     80
2    12     90
predict.earth: bx is a 2 by 4 matrix: 1=(Intercept), 2=h(Girth-14), 3=h(14-Girth), 4=h(Height-72)
Contents of bx are
     (Intercept) h(Girth-14) h(14-Girth) h(Height-72)
[1,]           1           0           4            8
[2,]           1           0           2           18
predict.earth: returning earth predictions 
           y1       y2
[1,] 18.11065 118.1106
[2,] 29.55517 129.5552
> 
> cat("--- earth.predict with NAs, with formula interface ---\n")
--- earth.predict with NAs, with formula interface ---
> 
> predict.with.message <- function(message, earth.model, newdata) {
+     cat("predict.earth  ", message, ":\n", sep="")
+     print(predict(earth.model, newdata=newdata, trace=1))
+     cat("\n")
+ }
> 
> iris.earth <- earth(Petal.Width ~ Sepal.Length + Sepal.Width + Petal.Length, data=iris)
> x <- iris[1,]
> predict.with.message("formula interface and vector", iris.earth, newdata=x)
predict.earth  formula interface and vector:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
predict.earth: bx is a 1 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                  0                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2522345

> x$Sepal.Width <- as.numeric(NA)
> predict.with.message("formula interface and vector with NA", iris.earth, newdata=x)
predict.earth  formula interface and vector with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1          NA          1.4         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1          NA          1.4
predict.earth: bx is a 1 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                 NA                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
predict.earth: returning earth predictions 
     Petal.Width
[1,]          NA

> x <- iris[1,]
> x$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("formula interface and vector with NA in unused variable", iris.earth, newdata=x)
predict.earth  formula interface and vector with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4          NA  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 1 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
predict.earth: bx is a 1 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                  0                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2522345

> 
> x <- iris[1:3,]
> predict.with.message("formula interface and matrix", iris.earth, newdata=x)
predict.earth  formula interface and matrix:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
2          4.9         3.0          1.4
3          4.7         3.2          1.3
predict.earth: bx is a 3 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                0.0                   0
[2,]           1               4.6                0.5                   0
[3,]           1               4.7                0.3                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
[2,]                 2.0                   0                   0
[3,]                 2.2                   0                   0
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2522345
[2,]   0.1759537
[3,]   0.1880673

> x[2,]$Sepal.Width <- as.numeric(NA)
> predict.with.message("formula interface and matrix with NA", iris.earth, newdata=x)
predict.earth  formula interface and matrix with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9          NA          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
2          4.9          NA          1.4
3          4.7         3.2          1.3
predict.earth: bx is a 3 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                0.0                   0
[2,]           1               4.6                 NA                   0
[3,]           1               4.7                0.3                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
[2,]                 2.0                   0                   0
[3,]                 2.2                   0                   0
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2522345
[2,]          NA
[3,]   0.1880673

> x <- iris[1:3,]
> x[2,]$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("formula interface and matrix with NA in unused variable", iris.earth, newdata=x)
predict.earth  formula interface and matrix with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4          NA  setosa
3          4.7         3.2          1.3         0.2  setosa
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 3 by 3 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length
Contents of data after call to model.frame are
  Sepal.Length Sepal.Width Petal.Length
1          5.1         3.5          1.4
2          4.9         3.0          1.4
3          4.7         3.2          1.3
predict.earth: bx is a 3 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                0.0                   0
[2,]           1               4.6                0.5                   0
[3,]           1               4.7                0.3                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
[2,]                 2.0                   0                   0
[3,]                 2.2                   0                   0
predict.earth: returning earth predictions 
     Petal.Width
[1,]   0.2522345
[2,]   0.1759537
[3,]   0.1880673

> 
> cat("--- earth.predict with NAs, with matrix interface ---\n")
--- earth.predict with NAs, with matrix interface ---
> 
> iris.earth <- earth(iris[,1:3], iris[,4])
> x <- iris[1,]
> predict.with.message("default interface and vector", iris.earth, newdata=x)
predict.earth  default interface and vector:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
predict.earth: bx is a 1 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                  0                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2522345

> x$Sepal.Width <- as.numeric(NA)
> predict.with.message("default interface and vector with NA", iris.earth, newdata=x)
predict.earth  default interface and vector with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1          NA          1.4         0.2  setosa
predict.earth: bx is a 1 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                 NA                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
predict.earth: returning earth predictions 
     iris[,4]
[1,]       NA

> x <- iris[1,]
> x$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("default interface and vector with NA in unused variable", iris.earth, newdata=x)
predict.earth  default interface and vector with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 1 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4          NA  setosa
predict.earth: bx is a 1 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                  0                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2522345

> 
> x <- iris[1:3,]
> predict.with.message("default interface and matrix", iris.earth, newdata=x)
predict.earth  default interface and matrix:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
predict.earth: bx is a 3 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                0.0                   0
[2,]           1               4.6                0.5                   0
[3,]           1               4.7                0.3                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
[2,]                 2.0                   0                   0
[3,]                 2.2                   0                   0
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2522345
[2,] 0.1759537
[3,] 0.1880673

> x[2,]$Sepal.Width <- as.numeric(NA)
> predict.with.message("default interface and matrix with NA", iris.earth, newdata=x)
predict.earth  default interface and matrix with NA:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9          NA          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
predict.earth: bx is a 3 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                0.0                   0
[2,]           1               4.6                 NA                   0
[3,]           1               4.7                0.3                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
[2,]                 2.0                   0                   0
[3,]                 2.2                   0                   0
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2522345
[2,]        NA
[3,] 0.1880673

> x <- iris[1:3,]
> x[2,]$Petal.Width <- as.numeric(NA) # Petal.Width is unused in the earth model
> predict.with.message("default interface and matrix with NA in unused variable", iris.earth, newdata=x)
predict.earth  default interface and matrix with NA in unused variable:
get.earth.x from model.matrix.earth from predict.earth: x is a 3 by 5 matrix: 1=Sepal.Length, 2=Sepal.Width, 3=Petal.Length, 4=Petal.Width, 5=Species (factor)
Contents of x are
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4          NA  setosa
3          4.7         3.2          1.3         0.2  setosa
predict.earth: bx is a 3 by 7 matrix: 1=(Intercept), 2=h(6-Petal.Length), 3=h(3.5-Sepal.Width), 4=h(Sepal.Length-6.9), 5=h(6.9-Sepal.Length), 6=h(Petal.Length-4.4), 7=h(Sepal.Length-7.2)
Contents of bx are
     (Intercept) h(6-Petal.Length) h(3.5-Sepal.Width) h(Sepal.Length-6.9)
[1,]           1               4.6                0.0                   0
[2,]           1               4.6                0.5                   0
[3,]           1               4.7                0.3                   0
     h(6.9-Sepal.Length) h(Petal.Length-4.4) h(Sepal.Length-7.2)
[1,]                 1.8                   0                   0
[2,]                 2.0                   0                   0
[3,]                 2.2                   0                   0
predict.earth: returning earth predictions 
      iris[,4]
[1,] 0.2522345
[2,] 0.1759537
[3,] 0.1880673

> 
> cat("--- test reorder.earth ----------------------\n")
--- test reorder.earth ----------------------
> a <- earth(O3 ~ ., data = ozone1, degree = 2)
> earth:::reorder.earth(a, decomp = "none")
 [1]  1  2  3  4  5  6  7  8  9 10 11
> earth:::reorder.earth(a)   # defaults to decomp = "anova"
 [1]  1  2 11  8  3  4  9  5  6  7 10
> a$selected.terms[earth:::reorder.earth(a)]
 [1]  1  2 19 13  6  7 14  9 10 11 17
> 
> cat("--- test model building capabilities ----------------------\n")
--- test model building capabilities ----------------------
> itest <- 0
> N <- 100
> set.seed(1)
> x1 <- runif(N, -1, 1)
> x2 <- runif(N, -1, 1)
> x3 <- runif(N, -1, 1)
> x4 <- runif(N, -1, 1)
> x5 <- runif(N, -1, 1)
> x6 <- runif(N, -1, 1)
> x7 <- runif(N, -1, 1)
> x8 <- runif(N, -1, 1)
> x9 <- runif(N, -1, 1)
> x10 <- runif(N, -1, 1)
> 
> make.func <- function(
+     obj      = stop("no 'obj' arg"),
+     digits   = 14,
+     use.names = TRUE,   # use predictor names, else "x[,1]" etc
+     ...)                # extra args passed onto format
+ {
+     s <- paste(
+         "function(x)\n",
+         "{\n",
+         "if(is.vector(x))\n",
+         "  x <- matrix(x, nrow=1, ncol=length(x))\n",
+         "with(as.data.frame(x),\n",
+         format(obj, digits=digits, use.names=use.names, style="p", ...),
+         ")\n",
+         "}\n", sep="")
+ 
+     eval.parent(parse(text=s))
+ }
> 
> # this cross checks that RSq and GRSq claimed by
> # the model versus an independent calc of RSq and GRSq
> 
> test.model.rsq <- function(object, x, y, MarsFunc, nCases, nUsedTerms, penalty, RefFunc=NULL, ...)
+ {
+     y1 <- RefFunc(x, ...)
+     rss <- sum((y1 - MarsFunc(x))^2)
+     rss.null <- sum((y - mean(y))^2)
+     gcv.null <- earth:::get.gcv(rss.null, 1, penalty, nCases)
+     gcv <- earth:::get.gcv(rss, nUsedTerms, penalty, nCases)
+     if(is.finite(object$rsq))
+         if(!isTRUE(all.equal(object$rsq, 1 - rss/rss.null)))
+             cat("\nWarning: RSq mismatch object$rsq", object$rsq, "calculated RSq", 1 - rss/rss.null)
+         else if(!isTRUE(all.equal(object$grsq, 1 - gcv/gcv.null)))
+             cat("\nWarning GRSq mismatch object$grsq", object$grsq, "calculated GRSq", 1 - gcv/gcv.null)
+ }
> 
> # this uses the global matrix data.global (data.global[,1] is the response)
> 
> test.earth <- function(itest, func, degree=2, nk=51, plotit=PLOT,
+                        test.rsq=TRUE, trace=0, linpreds=FALSE, pmethod="backward", nprune=NULL)
+ {
+     cat("itest", sprintf("%-3d", itest), sprintf("%-32s", deparse(substitute(func))),
+         "degree", sprintf("%-2d", degree), "nk", sprintf("%-3g", nk), "pmethod", pmethod)
+     if(trace)
+         cat("\n")
+     gc()
+     earthTime <- system.time(fite <- earth(data.global[,-1], data.global[,1],
+                                         degree=degree, trace=trace, nk=nk,
+                                         pmethod=pmethod, fast.k=-1, linpreds=linpreds,
+                                         nprune=nprune))
+     funca <- make.func(fite)
+     nCases <- nrow(data.global)
+     penalty <- ifelse(degree>1,3,2)
+     nUsedTerms <- sum(fite$selected.terms!=0)
+     cat(" nTerms",  sprintf("%-2d", nUsedTerms), "of", sprintf("%-3d ", nrow(fite$dirs)))
+     if(PRINT.TIME)
+         cat(" time", earthTime[1], " ")
+     cat("GRSq", sprintf("%4.2g", fite$grsq))
+     caption <- paste("itest ", itest, ": ", deparse(substitute(func)),
+                         " degree=", degree, " nk=", nk,
+                         if(pmethod!="backward") paste("pmethod", pmethod) else "", sep="")
+     if(test.rsq)
+         test.model.rsq(fite, x=data.global[,-1, drop=FALSE], y=data.global[,1], MarsFunc=funca,
+             nCases=nCases, nUsedTerms=nUsedTerms, penalty=penalty, RefFunc=func)
+     # TODO add printh(evimp(fite))
+     if(plotit) {
+         plotmo(fite, func=func, caption=caption)
+         plot(fite, nresiduals=500, caption=caption)
+     }
+     cat("\n")
+     fite
+ }
> 
> ozone.test <- function(itest, sModel, x, y, degree=2, nk=51,
+                     plotit=PLOT, trace=0, col.loess="lightblue")
+ {
+     fite <- earth(x, y, degree=degree, nk=nk, trace=trace)
+     fitm <- mars(x, y, degree=degree, nk=nk)
+ 
+     cat("itest",
+         sprintf("%-3d", itest),
+         sprintf("%-32s", sModel),
+         "degree", sprintf("%-2d", degree), "nk", sprintf("%-3g", nk),
+         "nTerms",  sprintf("%-2d", sum(fite$selected.terms != 0)),
+         "of", sprintf("%-3d", nrow(fite$dirs)),
+         "GRSq", sprintf("%4.2g", fite$grsq),
+         "GRSq ratio", fite$grsq/mars.to.earth(fitm)$grsq,
+         "\n")
+     caption <- paste("itest ", itest, ": ", sModel, " degree=", degree, " nk=", nk, sep="")
+     printh(summary(fite))
+     printh(summary(fite, style="bf"))
+     if(plotit) {
+         fitme <- mars.to.earth(fitm)
+         plotmo(fite, caption=paste("EARTH", caption))
+         plotmo(fitme, caption=paste("MARS", caption))
+         plot(fite, nresiduals=500, col.loess=col.loess, caption=paste("EARTH", caption))
+         plot(fitme, caption=paste("MARS", caption))
+         fitme <- update(fitme)  # generate model selection data
+         plot.earth.models(list(fite, fitme), caption=paste(itest, ": Compare earth to mars ", sModel, sep=""))
+     }
+     fite
+ }
> 
> funcNoise <- function(x)    # noise
+ {
+     set.seed(ncol(x))
+     rnorm(length(x))
+ }
> x <- cbind(x1)
> data.global <- cbind(funcNoise(x), x1)
> # plotit=FALSE because there is only an intercept
> itest <- itest+1; test.earth(itest, funcNoise, nk=5,  degree=1, plotit=FALSE, test.rsq=FALSE)
itest 1   funcNoise                        degree 1  nk 5   pmethod backward nTerms 1  of 4   GRSq    0
Selected 1 of 4 terms, and 0 of 1 predictors 
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> itest <- itest+1; test.earth(itest, funcNoise, nk=5,  degree=2, plotit=FALSE, test.rsq=FALSE)
itest 2   funcNoise                        degree 2  nk 5   pmethod backward nTerms 1  of 4   GRSq    0
Selected 1 of 4 terms, and 0 of 1 predictors 
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> itest <- itest+1; test.earth(itest, funcNoise, nk=51, degree=1, plotit=FALSE, test.rsq=FALSE)
itest 3   funcNoise                        degree 1  nk 51  pmethod backward nTerms 1  of 8   GRSq    0
Selected 1 of 8 terms, and 0 of 1 predictors 
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> itest <- itest+1; a <- test.earth(itest, funcNoise, nk=51, degree=2, plotit=FALSE, test.rsq=FALSE)
itest 4   funcNoise                        degree 2  nk 51  pmethod backward nTerms 1  of 8   GRSq    0
> printh(summary(a, fixed.point=FALSE)) # check that print summary works with intercept only model
===summary(a, fixed.point = FALSE) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, fast.k=-1, 
      linpreds=linpreds, nprune=nprune)

            coefficients
(Intercept)    0.1088874

Selected 1 of 8 terms, and 0 of 1 predictors 
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> printh(summary(a, fixed.point=FALSE, style="bf")) # ditto
===summary(a, fixed.point = FALSE, style = "bf") 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, fast.k=-1, 
      linpreds=linpreds, nprune=nprune)

data.global[,1] =
  0.1088874


Selected 1 of 8 terms, and 0 of 1 predictors 
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> printh(summary(a, details=1, fixed.point=FALSE))
===summary(a, details = 1, fixed.point = FALSE) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, fast.k=-1, 
      linpreds=linpreds, nprune=nprune)

            coefficients
(Intercept)    0.1088874

Number of cases: 100
Selected 1 of 8 terms, and 0 of 1 predictors 
Importance: data.global[,-1]-unused
Number of terms at each degree of interaction: 1 (intercept only model)
GCV 0.8149112    RSS 79.86945    GRSq 0    RSq 0
> 
> func1 <- function(x)
+ {
+     sin(3 * x[,1]) + x[,2]
+ }
> x.global <- cbind(                    x1, x2)
> data.global <- cbind(func1(x.global), x1, x2)
> itest <- itest+1; test.earth(itest, func1, nk=5,  degree=1)
itest 5   func1                            degree 1  nk 5   pmethod backward nTerms 5  of 5   GRSq 0.86
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 5 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.1220314    RSS 10.10542    GRSq 0.855971    RSq 0.8783079
> itest <- itest+1; test.earth(itest, func1, nk=5,  degree=2, trace=1.5)
itest 6   func1                            degree 2  nk 5   pmethod backward
x is a 100 by 2 matrix: 1=x1, 2=x2
y is a 100 by 1 matrix: 1=data.global[,1]
malloc      8  B: nUses			*pnPreds 2 sizeof(int)
malloc     20  B: nFactorsInTerm	nMaxTerms 5 sizeof(int) 4
calloc      4  B: iDirs			nMaxTerms 5 nPreds 2 sizeof(int) 4
malloc     20  B: BoolFullSet		nMaxTerms 5 sizeof(bool) 4
malloc      4 kB: bxOrth		nCases 100 nMaxTerms 5  sizeof(double) 8
malloc      4 kB: bxOrthCenteredT	nMaxTerms 5 nCases 100  sizeof(double) 8
malloc     40  B: bxOrthMean		nMaxTerms 5 nResp 1  sizeof(double) 8
malloc      8  B: yMean			nResp 1 sizeof(double) 8
malloc    800  B: Weights		nCases 100 sizeof(double) 8
malloc    800  B: xOrder		nRows 100 nCols 2 sizeof(int) 4
malloc    400  B: BetaCacheGlobal	nMaxTerms 5 nMaxTerms 5 nPreds 2 sizeof(double) 8
Forward pass term 1
malloc    160  B: Q			nMaxTerms 0.000000 sizeof(tQueue) 32
malloc    160  B: SortedQ		nMaxTerms 0.000000 sizeof(tQueue) 32
malloc    800  B: xbx			nCases 100 sizeof(double) 8
malloc     40  B: CovSx			nMaxTerms 5 sizeof(double) 8
calloc      8  B: CovCol		nMaxTerms 5 sizeof(double) 8
calloc      8  B: ycbpSum		nMaxTerms 5 nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
Forward pass term 2
malloc    800  B: xbx			nCases 100 sizeof(double) 8
malloc     40  B: CovSx			nMaxTerms 5 sizeof(double) 8
calloc      8  B: CovCol		nMaxTerms 5 sizeof(double) 8
calloc      8  B: ycbpSum		nMaxTerms 5 nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
malloc      8  B: ybxSum		nResp 1 sizeof(double) 8
Forward pass term 4

Reached max number of terms 5
After forward pass GRSq 0.8494 RSq 0.8783
malloc     20  B: iPivots		nTerms 5 sizeof(int) 4
malloc      4 kB: xUsed			nCases 100 nUsedCols 5 sizeof(double) 8
malloc     40  B: Betas			nUsedCols 5 nResp 1 sizeof(double) 8
malloc    800  B: Residuals		nCases 100 nResp 1 sizeof(double) 8
malloc     40  B: qraux			nUsedCols 5 sizeof(double) 8
malloc      4 kB: work			nCases 100 nUsedCols 5 sizeof(double) 8
Prune method "backward" penalty 3 nprune 5: selected 5 of 5 terms, and 2 of 2 predictors
After backward pass GRSq 0.8494 RSq 0.8783 
 nTerms 5  of 5   GRSq 0.85
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 5 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.1275776    RSS 10.10542    GRSq 0.8494251    RSq 0.8783079
> itest <- itest+1; test.earth(itest, func1, nk=51, degree=1)
itest 7   func1                            degree 1  nk 51  pmethod backward nTerms 9  of 9   GRSq    1
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 9 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.001049021    RSS 0.07226709    GRSq 0.9987619    RSq 0.9991297
> itest <- itest+1; test.earth(itest, func1, nk=51, degree=2)
itest 8   func1                            degree 2  nk 51  pmethod backward nTerms 9  of 9   GRSq    1
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 9 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.001157941    RSS 0.07226709    GRSq 0.9986333    RSq 0.9991297
> # test pmethod="exhaustive" with and without tracing
> itest <- itest+1; test.earth(itest, func1, trace=0, nk=51, degree=1, pmethod="exhaustive", nprune=5)
itest 9   func1                            degree 1  nk 51  pmethod exhaustive nTerms 5  of 9   GRSq 0.98
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.01906992    RSS 1.57918    GRSq 0.9774925    RSq 0.9809831
> itest <- itest+1; test.earth(itest, func1, trace=2, nk=51, degree=1, pmethod="exhaust", nprune=5)
itest 10  func1                            degree 1  nk 51  pmethod exhaust
x is a 100 by 2 matrix: 1=x1, 2=x2
y is a 100 by 1 matrix: 1=data.global[,1]
Forward pass: minspan 4 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.5393 0.5758       0.5758    1           x1     0.72868  2   3   
4      0.8560 0.8783       0.3025    2           x2    -0.17375  4   5   
6      0.9545 0.9632      0.08491    1           x1    -0.57571  6       
8      0.9874 0.9903      0.02704    1           x1     0.46463  7       
10     0.9969 0.9977     0.007453    1           x1    -0.32185  8       
12     0.9988 0.9991     0.001417    1           x1     0.29412  9       

Reached max RSq (RSq 0.99913 > 0.999) at 13 terms
After forward pass GRSq 0.9988 RSq 0.9991
Forward pass complete: 13 terms (9 terms used)
Exhaustive pruning: number of subsets 381 (bx sing val ratio 0.0096)
Prune method "exhaustive" penalty 2 nprune 5: selected 5 of 9 terms, and 2 of 2 predictors
After backward pass GRSq 0.9775 RSq 0.981 
 nTerms 5  of 9   GRSq 0.98
 grid:    x1         x2
 -0.02437858 0.03719751


Selected 5 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 4 (additive model)
GCV 0.01906992    RSS 1.57918    GRSq 0.9774925    RSq 0.9809831
> 
> func7 <- function(x)    # just one predictor
+ {
+     sin(5 * x[,1])
+ }
> x.global <- cbind(                    x1)
> data.global <- cbind(func7(x.global), x1)
> itest <- itest+1; test.earth(itest, func7, nk=5,  degree=1)
itest 11  func7                            degree 1  nk 5   pmethod backward nTerms 4  of 4   GRSq 0.74
  grid:    x
 -0.02437858


Selected 4 of 4 terms, and 1 of 1 predictors 
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 0.1355322    RSS 11.72218    GRSq 0.7358613    RSq 0.7669079
> itest <- itest+1; test.earth(itest, func7, nk=5,  degree=2)
itest 12  func7                            degree 2  nk 5   pmethod backward nTerms 4  of 4   GRSq 0.73
  grid:    x
 -0.02437858


Selected 4 of 4 terms, and 1 of 1 predictors 
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 3 (additive model)
GCV 0.1400123    RSS 11.72218    GRSq 0.7271301    RSq 0.7669079
> itest <- itest+1; test.earth(itest, func7, nk=51, degree=1)
itest 13  func7                            degree 1  nk 51  pmethod backward nTerms 7  of 8   GRSq 0.99
  grid:    x
 -0.02437858


Selected 7 of 8 terms, and 1 of 1 predictors 
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 6 (additive model)
GCV 0.007134307    RSS 0.5399957    GRSq 0.986096    RSq 0.9892623
> itest <- itest+1; test.earth(itest, func7, nk=51, degree=2)
itest 14  func7                            degree 2  nk 51  pmethod backward nTerms 7  of 8   GRSq 0.99
  grid:    x
 -0.02437858


Selected 7 of 8 terms, and 1 of 1 predictors 
Importance: data.global[,-1]
Number of terms at each degree of interaction: 1 6 (additive model)
GCV 0.007653001    RSS 0.5399957    GRSq 0.9850851    RSq 0.9892623
> 
> func8 <- function(x)
+ {
+     ret <- 0
+     for (i in 1:5)
+         ret <- ret + sin(2 * x[,i])
+     ret + x[,1]*cos(4 * x[,2]) + (x[,3]-2)* x[,4]
+ }
> 
> func8noise <- function(x)
+ {
+     set.seed(ncol(x))
+     func8(x) + rnorm(nrow(x),0,1)
+ }
> 
> x.global <- cbind(                    x1,  x2,  x3,  x4,  x5)
> data.global <- cbind(func8(x.global), x1,  x2,  x3,  x4,  x5)
> itest <- itest+1; test.earth(itest, func8, nk=11, degree=1)
itest 15  func8                            degree 1  nk 11  pmethod backward nTerms 10 of 11  GRSq 0.89
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3061181    RSS 20.08441    GRSq 0.894668    RSq 0.9294885
> itest <- itest+1; test.earth(itest, func8, nk=11, degree=2)
itest 16  func8                            degree 2  nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3431912    RSS 20.08441    GRSq 0.8819115    RSq 0.9294885
> itest <- itest+1; test.earth(itest, func8, nk=11, degree=10)
itest 17  func8                            degree 10 nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3431912    RSS 20.08441    GRSq 0.8819115    RSq 0.9294885
> itest <- itest+1; test.earth(itest, func8, nk=51, degree=1)
itest 18  func8                            degree 1  nk 51  pmethod backward nTerms 12 of 17  GRSq 0.92
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 12 of 17 terms, and 5 of 5 predictors 
Importance: x3, x5, x2, x1, x4
Number of terms at each degree of interaction: 1 11 (additive model)
GCV 0.2323811    RSS 13.77787    GRSq 0.9200401    RSq 0.9516292
> itest <- itest+1; test.earth(itest, func8, nk=51, degree=2)
itest 19  func8                            degree 2  nk 51  pmethod backward nTerms 20 of 23  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 20 of 23 terms, and 5 of 5 predictors 
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 5
GCV 0.05130346    RSS 1.360696    GRSq 0.982347    RSq 0.9952229
> itest <- itest+1; test.earth(itest, func8, nk=51, degree=10)
itest 20  func8                            degree 10 nk 51  pmethod backward nTerms 20 of 23  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 20 of 23 terms, and 5 of 5 predictors 
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 5
GCV 0.05130346    RSS 1.360696    GRSq 0.982347    RSq 0.9952229
> itest <- itest+1; test.earth(itest, func8noise, nk=11, degree=1,  test.rsq=FALSE)
itest 21  func8noise                       degree 1  nk 11  pmethod backward nTerms 10 of 11  GRSq 0.89
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3061181    RSS 20.08441    GRSq 0.894668    RSq 0.9294885
> itest <- itest+1; test.earth(itest, func8noise, nk=11, degree=2,  test.rsq=FALSE)
itest 22  func8noise                       degree 2  nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3431912    RSS 20.08441    GRSq 0.8819115    RSq 0.9294885
> itest <- itest+1; test.earth(itest, func8noise, nk=11, degree=10, test.rsq=FALSE)
itest 23  func8noise                       degree 10 nk 11  pmethod backward nTerms 10 of 11  GRSq 0.88
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 10 of 11 terms, and 5 of 5 predictors 
Importance: x1, x5, x2, x3, x4
Number of terms at each degree of interaction: 1 9 (additive model)
GCV 0.3431912    RSS 20.08441    GRSq 0.8819115    RSq 0.9294885
> itest <- itest+1; test.earth(itest, func8noise, nk=51, degree=1,  test.rsq=FALSE)
itest 24  func8noise                       degree 1  nk 51  pmethod backward nTerms 12 of 17  GRSq 0.92
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 12 of 17 terms, and 5 of 5 predictors 
Importance: x3, x5, x2, x1, x4
Number of terms at each degree of interaction: 1 11 (additive model)
GCV 0.2323811    RSS 13.77787    GRSq 0.9200401    RSq 0.9516292
> itest <- itest+1; test.earth(itest, func8noise, nk=51, degree=2,  test.rsq=FALSE)
itest 25  func8noise                       degree 2  nk 51  pmethod backward nTerms 20 of 23  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 20 of 23 terms, and 5 of 5 predictors 
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 5
GCV 0.05130346    RSS 1.360696    GRSq 0.982347    RSq 0.9952229
> 
> itest <- itest+1; test.earth(itest, func8noise, nk=51, degree=10, test.rsq=FALSE)
itest 26  func8noise                       degree 10 nk 51  pmethod backward nTerms 20 of 23  GRSq 0.98
 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


Selected 20 of 23 terms, and 5 of 5 predictors 
Importance: x1, x5, x3, x2, x4
Number of terms at each degree of interaction: 1 14 5
GCV 0.05130346    RSS 1.360696    GRSq 0.982347    RSq 0.9952229
> 
> eqn56 <- function(x) # Friedman MARS paper equation 56
+ {
+     0.1 * exp(4*x[,1]) +
+     4 / (1 + exp(-20*(x[,2]-0.5))) +
+     3 * x[,3] +
+     2 * x[,4] +
+     x[,5]
+ }
> 
> neg.eqn56 <- function(x)
+ {
+     -eqn56(x)
+ }
> 
> eqn56noise <- function(x)
+ {
+     set.seed(ncol(x))
+     eqn56(x) + rnorm(nrow(x),0,1)
+ }
> 
> neg.eqn56noise <- function(x)
+ {
+     -eqn56noise(x)
+ }
> 
> x.global <- cbind(                    x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> data.global <- cbind(eqn56(x.global), x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> itest <- itest+1; test.earth(itest, eqn56, nk=11, degree=1)
itest 27  eqn56                            degree 1  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.96
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3367594    RSS 21.01716    GRSq 0.9600263    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56, nk=11, degree=2)
itest 28  eqn56                            degree 2  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56, nk=11, degree=10)
itest 29  eqn56                            degree 10 nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56, nk=51, degree=1)
itest 30  eqn56                            degree 1  nk 51  pmethod backward nTerms 13 of 15  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 15 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.02660665    RSS 1.496624    GRSq 0.9968418    RSq 0.9981874
> itest <- itest+1; test.earth(itest, eqn56, nk=51, degree=2)
itest 31  eqn56                            degree 2  nk 51  pmethod backward nTerms 13 of 16  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 16 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 11 1
GCV 0.02440621    RSS 1.16198    GRSq 0.997103    RSq 0.9985927
> itest <- itest+1; test.earth(itest, eqn56, nk=51, degree=10)
itest 32  eqn56                            degree 10 nk 51  pmethod backward nTerms 13 of 16  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 16 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 11 1
GCV 0.02440621    RSS 1.16198    GRSq 0.997103    RSq 0.9985927
> itest <- itest+1; test.earth(itest, eqn56noise, nk=11, degree=1,  test.rsq=FALSE)
itest 33  eqn56noise                       degree 1  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.96
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3367594    RSS 21.01716    GRSq 0.9600263    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56noise, nk=11, degree=2,  test.rsq=FALSE)
itest 34  eqn56noise                       degree 2  nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56noise, nk=11, degree=10, test.rsq=FALSE)
itest 35  eqn56noise                       degree 10 nk 11  pmethod backward nTerms 11 of 11  GRSq 0.95
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 11 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.3838049    RSS 21.01716    GRSq 0.954442    RSq 0.9745459
> itest <- itest+1; test.earth(itest, eqn56noise, nk=51, degree=1,  test.rsq=FALSE)
itest 36  eqn56noise                       degree 1  nk 51  pmethod backward nTerms 13 of 15  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 15 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 12 (additive model)
GCV 0.02660665    RSS 1.496624    GRSq 0.9968418    RSq 0.9981874
> itest <- itest+1; test.earth(itest, eqn56noise, nk=51, degree=2,  test.rsq=FALSE)
itest 37  eqn56noise                       degree 2  nk 51  pmethod backward nTerms 13 of 16  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 16 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 11 1
GCV 0.02440621    RSS 1.16198    GRSq 0.997103    RSq 0.9985927
> itest <- itest+1; test.earth(itest, eqn56noise, nk=51, degree=10, test.rsq=FALSE)
itest 38  eqn56noise                       degree 10 nk 51  pmethod backward nTerms 13 of 16  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 13 of 16 terms, and 5 of 10 predictors 
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 11 1
GCV 0.02440621    RSS 1.16198    GRSq 0.997103    RSq 0.9985927
> 
> robotArm <- function(x) # Friedman Fast MARS paper
+ {
+     l1     <- x[,1]
+     l2     <- x[,2]
+     theta1 <- x[,3]
+     theta2 <- x[,4]
+     phi    <- x[,5]
+ 
+     x1 <- l1 * cos(theta1) - l2 * cos(theta1 + theta2) * cos(phi)
+     y <-  l1 * sin(theta1) - l2 * sin(theta1 + theta2) * cos(phi)
+     z <-  l2 *  sin(theta2) * sin(phi)
+ 
+     sqrt(x1^2 + y^2 + z^2)
+ }
> N1 <- 100
> set.seed(1)
> x1. <- runif(N1, -1, 1)
> x2. <- runif(N1, -1, 1)
> x3. <- runif(N1, -1, 1)
> x4. <- runif(N1, -1, 1)
> x5. <- runif(N1, -1, 1)
> 
> x.global <- cbind(                       (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> data.global <- cbind(robotArm(x.global), (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> colnames(x.global) <- c("l1", "l2", "theta1", "theta2", "phi")
> colnames(data.global) <- c("arm", "l1", "l2", "theta1", "theta2", "phi")
> itest <- itest+1; test.earth(itest, robotArm, nk=51, degree=1)
itest 39  robotArm                         degree 1  nk 51  pmethod backward nTerms 11 of 19  GRSq 0.79
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 19 terms, and 4 of 5 predictors 
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.03972609    RSS 2.479305    GRSq 0.7873676    RSq 0.8646017
> itest <- itest+1; a87 <- test.earth(itest, robotArm, nk=51, degree=10)
itest 40  robotArm                         degree 10 nk 51  pmethod backward nTerms 20 of 39  GRSq 0.89
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


> printh(summary(a87))
===summary(a87) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, fast.k=-1, 
      linpreds=linpreds, nprune=nprune)

                                                         coefficients
(Intercept)                                                  3.354227
h(l1-0.875321)                                               1.901282
h(0.875321-l1)                                              -0.871595
h(l2-1.10154)                                                0.787000
h(1.10154-l2)                                               -1.113447
h(theta2-2.64029)                                           -0.676355
h(theta2-4.14578)                                            0.385106
h(4.14578-theta2)                                           -0.751180
h(0.875321-l1) * h(2.91516-theta2)                           0.379480
h(0.875321-l1) * h(theta2-5.22555)                          -0.867977
h(l1-0.875321) * h(phi-1.19202)                           -292.274842
h(1.10154-l2) * h(theta2-5.99132)                            3.781391
h(1.10154-l2) * h(5.99132-theta2)                            0.104902
h(theta2-1.3937) * h(phi-1.37959)                           -2.690959
h(theta2-1.3937) * h(1.37959-phi)                           -0.245111
h(theta2-1.3937) * h(phi-0.046284)                          -0.333635
h(theta2-2.64029) * h(1.36883-phi)                           0.227507
h(0.777321-l1) * h(theta2-1.3937) * h(phi-0.046284)         -0.339410
h(0.875321-l1) * h(theta2-2.91516) * h(phi- -0.00669771)     1.121190
h(0.875321-l1) * h(theta2-2.91516) * h(-0.00669771-phi)      0.259488

Selected 20 of 39 terms, and 4 of 5 predictors 
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 7 9 3
GCV 0.02072208    RSS 0.5496014    GRSq 0.8890859    RSq 0.9699855
> printh(summary(a87, style="bf"))
===summary(a87, style = "bf") 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, fast.k=-1, 
      linpreds=linpreds, nprune=nprune)

data.global[,1] =
  3.354227
  +    1.901282 * bf1
  -   0.8715952 * bf2
  +   0.7870004 * bf3
  -    1.113447 * bf4
  -   0.6763552 * bf5
  +   0.3851064 * bf6
  -   0.7511801 * bf7
  +   0.3794805 * bf2 * bf8
  -   0.8679774 * bf2 * bf9
  -    292.2748 * bf1 * bf10
  +    3.781391 * bf4 * bf11
  +   0.1049022 * bf4 * bf12
  -    2.690959 * bf13 * bf14
  -   0.2451107 * bf13 * bf15
  -   0.3336347 * bf13 * bf16
  +   0.2275069 * bf5 * bf17
  -     0.33941 * bf18 * bf13 * bf16
  +     1.12119 * bf2 * bf19 * bf20
  +    0.259488 * bf2 * bf19 * bf21

   bf1  h(l1-0.875321)
   bf2  h(0.875321-l1)
   bf3  h(l2-1.10154)
   bf4  h(1.10154-l2)
   bf5  h(theta2-2.64029)
   bf6  h(theta2-4.14578)
   bf7  h(4.14578-theta2)
   bf8  h(2.91516-theta2)
   bf9  h(theta2-5.22555)
  bf10  h(phi-1.19202)
  bf11  h(theta2-5.99132)
  bf12  h(5.99132-theta2)
  bf13  h(theta2-1.3937)
  bf14  h(phi-1.37959)
  bf15  h(1.37959-phi)
  bf16  h(phi-0.046284)
  bf17  h(1.36883-phi)
  bf18  h(0.777321-l1)
  bf19  h(theta2-2.91516)
  bf20  h(phi--0.00669771)
  bf21  h(-0.00669771-phi)

Selected 20 of 39 terms, and 4 of 5 predictors 
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 7 9 3
GCV 0.02072208    RSS 0.5496014    GRSq 0.8890859    RSq 0.9699855
> itest <- itest+1; test.earth(itest, robotArm, nk=201, degree=1)
itest 41  robotArm                         degree 1  nk 201 pmethod backward nTerms 11 of 19  GRSq 0.79
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 19 terms, and 4 of 5 predictors 
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 10 (additive model)
GCV 0.03972609    RSS 2.479305    GRSq 0.7873676    RSq 0.8646017
> itest <- itest+1; a88 <- test.earth(itest, robotArm, nk=201, degree=10)
itest 42  robotArm                         degree 10 nk 201 pmethod backward nTerms 20 of 39  GRSq 0.89
 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


> printh(summary(a88))
===summary(a88) 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, fast.k=-1, 
      linpreds=linpreds, nprune=nprune)

                                                         coefficients
(Intercept)                                                  3.354227
h(l1-0.875321)                                               1.901282
h(0.875321-l1)                                              -0.871595
h(l2-1.10154)                                                0.787000
h(1.10154-l2)                                               -1.113447
h(theta2-2.64029)                                           -0.676355
h(theta2-4.14578)                                            0.385106
h(4.14578-theta2)                                           -0.751180
h(0.875321-l1) * h(2.91516-theta2)                           0.379480
h(0.875321-l1) * h(theta2-5.22555)                          -0.867977
h(l1-0.875321) * h(phi-1.19202)                           -292.274842
h(1.10154-l2) * h(theta2-5.99132)                            3.781391
h(1.10154-l2) * h(5.99132-theta2)                            0.104902
h(theta2-1.3937) * h(phi-1.37959)                           -2.690959
h(theta2-1.3937) * h(1.37959-phi)                           -0.245111
h(theta2-1.3937) * h(phi-0.046284)                          -0.333635
h(theta2-2.64029) * h(1.36883-phi)                           0.227507
h(0.777321-l1) * h(theta2-1.3937) * h(phi-0.046284)         -0.339410
h(0.875321-l1) * h(theta2-2.91516) * h(phi- -0.00669771)     1.121190
h(0.875321-l1) * h(theta2-2.91516) * h(-0.00669771-phi)      0.259488

Selected 20 of 39 terms, and 4 of 5 predictors 
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 7 9 3
GCV 0.02072208    RSS 0.5496014    GRSq 0.8890859    RSq 0.9699855
> printh(summary(a88, style="bf"))
===summary(a88, style = "bf") 
Call: earth(x=data.global[, -1], y=data.global[, 1], trace=trace, 
      degree=degree, nk=nk, pmethod=pmethod, fast.k=-1, 
      linpreds=linpreds, nprune=nprune)

data.global[,1] =
  3.354227
  +    1.901282 * bf1
  -   0.8715952 * bf2
  +   0.7870004 * bf3
  -    1.113447 * bf4
  -   0.6763552 * bf5
  +   0.3851064 * bf6
  -   0.7511801 * bf7
  +   0.3794805 * bf2 * bf8
  -   0.8679774 * bf2 * bf9
  -    292.2748 * bf1 * bf10
  +    3.781391 * bf4 * bf11
  +   0.1049022 * bf4 * bf12
  -    2.690959 * bf13 * bf14
  -   0.2451107 * bf13 * bf15
  -   0.3336347 * bf13 * bf16
  +   0.2275069 * bf5 * bf17
  -     0.33941 * bf18 * bf13 * bf16
  +     1.12119 * bf2 * bf19 * bf20
  +    0.259488 * bf2 * bf19 * bf21

   bf1  h(l1-0.875321)
   bf2  h(0.875321-l1)
   bf3  h(l2-1.10154)
   bf4  h(1.10154-l2)
   bf5  h(theta2-2.64029)
   bf6  h(theta2-4.14578)
   bf7  h(4.14578-theta2)
   bf8  h(2.91516-theta2)
   bf9  h(theta2-5.22555)
  bf10  h(phi-1.19202)
  bf11  h(theta2-5.99132)
  bf12  h(5.99132-theta2)
  bf13  h(theta2-1.3937)
  bf14  h(phi-1.37959)
  bf15  h(1.37959-phi)
  bf16  h(phi-0.046284)
  bf17  h(1.36883-phi)
  bf18  h(0.777321-l1)
  bf19  h(theta2-2.91516)
  bf20  h(phi--0.00669771)
  bf21  h(-0.00669771-phi)

Selected 20 of 39 terms, and 4 of 5 predictors 
Importance: theta2, l2, l1, phi, theta1-unused
Number of terms at each degree of interaction: 1 7 9 3
GCV 0.02072208    RSS 0.5496014    GRSq 0.8890859    RSq 0.9699855
> 
> cat("--- linear predictors -------------------------\n")
--- linear predictors -------------------------
> 
> # Build a linear-only earth model and an identical lm model to compare predict().
> # The somewhat strange args are to force the models to use the same predictors.
> itest <- itest+1; cat("itest", sprintf("%-3d", itest), "\n")
itest 43  
> a <- earth(O3 ~ ., linpreds=TRUE, data = ozone1, pmethod="none", thresh=1e-10)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, linpreds=TRUE, pmethod="none", 
      thresh=1e-10)

            coefficients
(Intercept)   -9.2940941
wind          -0.0272423
humidity       0.0832655
temp           0.2649552
ibh           -0.0003230
dpg           -0.0026598
ibt            0.0235920
vis           -0.0077189
doy           -0.0093787

Selected 9 of 9 terms, and 8 of 9 predictors 8 linear predictors
Importance: temp, humidity, ibh, ibt, doy, vis, dpg, wind, vh-unused
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 21.32277    RSS 6330.213    GRSq 0.6687758    RSq 0.7002088
> alin <- lm(O3 ~ . - vh, data = ozone1)
> printh(summary(alin))
===summary(alin) 

Call:
lm(formula = O3 ~ . - vh, data = ozone1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.0077  -2.8663  -0.2215   2.7642  13.4535 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -9.2940941  1.9968503  -4.654 4.76e-06 ***
wind        -0.0272423  0.1320735  -0.206 0.836714    
humidity     0.0832655  0.0187013   4.452 1.17e-05 ***
temp         0.2649552  0.0486640   5.445 1.03e-07 ***
ibh         -0.0003230  0.0002819  -1.146 0.252821    
dpg         -0.0026598  0.0112590  -0.236 0.813396    
ibt          0.0235920  0.0122064   1.933 0.054146 .  
vis         -0.0077189  0.0037406  -2.064 0.039865 *  
doy         -0.0093787  0.0027625  -3.395 0.000773 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 4.441 on 321 degrees of freedom
Multiple R-squared: 0.7002,	Adjusted R-squared: 0.6927 
F-statistic: 93.72 on 8 and 321 DF,  p-value: < 2.2e-16 

> printh(summary(alin, style="bf"))
===summary(alin, style = "bf") 

Call:
lm(formula = O3 ~ . - vh, data = ozone1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.0077  -2.8663  -0.2215   2.7642  13.4535 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) -9.2940941  1.9968503  -4.654 4.76e-06 ***
wind        -0.0272423  0.1320735  -0.206 0.836714    
humidity     0.0832655  0.0187013   4.452 1.17e-05 ***
temp         0.2649552  0.0486640   5.445 1.03e-07 ***
ibh         -0.0003230  0.0002819  -1.146 0.252821    
dpg         -0.0026598  0.0112590  -0.236 0.813396    
ibt          0.0235920  0.0122064   1.933 0.054146 .  
vis         -0.0077189  0.0037406  -2.064 0.039865 *  
doy         -0.0093787  0.0027625  -3.395 0.000773 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 4.441 on 321 degrees of freedom
Multiple R-squared: 0.7002,	Adjusted R-squared: 0.6927 
F-statistic: 93.72 on 8 and 321 DF,  p-value: < 2.2e-16 

> stopifnot(all.equal(as.double(predict(a)), as.double(predict(alin))))
> newdata <- data.frame(
+         vh = c(5700,5701,5702),
+         wind = c(3,4,5),
+         humidity = c(30,40,50),
+         temp = c(31,42,53),
+         ibh = c(1000, 1000, 1000),
+         dpg = c(-10, 0, 10),
+         ibt = c(90, 80, 60),
+         vis = c(100, 110, 120),
+         doy= c(12, 34, 56))
> apred <- as.double(predict(a, newdata=newdata))
> alinpred <- as.double(predict(alin, newdata=newdata))
> stopifnot(all.equal(apred, alinpred))
> # printh(head(predict(a, type="terms")))
> printh(earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms))
===earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms) 
[1] 0 1 2 3 4 5 6 7 8
> 
> # test with mixed linear and standard predictors
> itest <- itest+1; cat("itest", sprintf("%-3d", itest), "\n")
itest 44  
> a <- earth(O3 ~ ., linpreds=c(3, 8), data = ozone1, degree=2, trace=4)  # 3,8 is humidity,vis
Call: earth(formula=O3~., data=ozone1, trace=4, linpreds=c(3, 
      8), degree=2)
x is a 330 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
       vh wind humidity temp  ibh dpg ibt vis doy
[1,] 5710    4       28   40 2693 -25  87 250  33
[2,] 5700    3       37   45  590 -24 128 100  34
[3,] 5760    3       51   54 1450  25 139  60  35
[4,] 5720    4       69   35 1568  15 121  60  36
[5,] 5790    6       19   45 2631 -33 123 100  37
[6,] 5790    3       25   55  554 -28 182 250  38
y is a 330 by 1 matrix: 1=O3
First few rows of y are
     O3
[1,]  3
[2,]  5
[3,]  5
[4,]  6
[5,]  4
[6,]  4
linear predictors 3=humidity 8=vis
Forward pass: minspan 6 endspan 10

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.6493 0.6599       0.6599    4         temp          58  2   3   
4      0.6908 0.7094      0.04948    5          ibh        1069  4   5   
6      0.7110 0.7368      0.02744    9          doy          89  6   7   
8      0.7337 0.7613       0.0245    3     humidity          19< 8       2   
10     0.7524 0.7851       0.0238    6          dpg          11  9   10  
12     0.7573 0.7962      0.01107    1           vh        5900  11  12  
14     0.7642 0.8052     0.009048    8          vis           0< 13      
16     0.7694 0.8127     0.007528    9          doy         151  14      
18     0.7692 0.8188     0.006099    2         wind           4  15  16  12  
20     0.7675 0.8237     0.004849    4         temp          72  17  18  16  

Reached max number of terms 21
After forward pass GRSq 0.7675 RSq 0.8237
Forward pass complete: 21 terms (18 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.6721  0.6771     0.6721      2  1 8
          3      0.6909  0.7002     0.0188      2  1 2 4
          4      0.7278  0.7400     0.0369      4  1 4 7 8
          5      0.7373  0.7530     0.0095      4  1 4 6 7 8
          6      0.7495  0.7682     0.0122      5  1 4 6 7 8 9
          7      0.7642  0.7852     0.0147      6  1 7 8 9 12 13 14
          8      0.7753  0.7986     0.0111      6  1 7 8 9 10 12 13 14
          9      0.7793  0.8053     0.0040      7  1 4 7 8 9 10 12 13 14
         10      0.7793  0.8085    -0.0000      7  1 4 7 8 9 10 12 13 14 17
         11      0.7821  0.8139     0.0027      7  1 4 7 8 9 10 11 12 13 14 17
         12      0.7809  0.8160    -0.0011      8  1 4 7 8 9 10 11 12 13 14 16 17
chosen   13      0.7833  0.8210     0.0024      8  1 4 7 8 9 10 11 12 13 14 15 16 17
         14      0.7808  0.8220    -0.0025      8  1 4 6 7 8 9 10 11 12 13 14 15 16 17
         15      0.7782  0.8229    -0.0026      8  1 2 4 6 7 8 9 10 11 12 13 14 15 16 17
         16      0.7751  0.8235    -0.0031      8  1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17
         17      0.7715  0.8237    -0.0036      8  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
         18      0.7675  0.8237    -0.0040      8  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18

Prune method "backward" penalty 3 nprune 18: selected 13 of 18 terms, and 8 of 9 predictors
After backward pass GRSq 0.7833 RSq 0.821 
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, trace=4, linpreds=c(3, 
      8), degree=2)

                        coefficients
(Intercept)               18.0057404
vis                       -0.0113823
h(vh-5900)                 0.4017820
h(5900-vh)                -0.0154223
h(ibh-1069)               -0.0005118
h(dpg-11)                 -0.0927226
h(11-dpg)                 -0.0579073
h(89-doy)                 -0.1409308
h(doy-151)                -0.0274469
humidity * h(temp-58)      0.0075823
h(vh-5900) * h(wind-4)    -0.0867242
h(vh-5900) * h(4-wind)    -0.3996014
h(temp-72) * h(doy-151)   -0.0034190

Selected 13 of 18 terms, and 8 of 9 predictors 2 linear predictors
Importance: temp, humidity, doy, ibh, dpg, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 8 4
GCV 13.94806    RSS 3778.698    GRSq 0.7833333    RSq 0.8210454
> if (PLOT) {
+     plot(a)
+     plotmo(a)
+ }

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> printh(earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms))
===earth:::get.nused.preds.per.subset(a$dirs, a$prune.terms) 
 [1] 0 2 2 4 4 5 6 6 7 7 7 8 8 8 8 8 8 8
> printh(earth:::get.nterms.per.degree(a))
===earth:::get.nterms.per.degree(a) 

0 1 2 
1 8 4 
> # printh(head(predict(a, type="terms")))
> 
> # this is a good example because it has linear preds in both 1 and 2 degree terms
> x.global <- cbind(                    x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> data.global <- cbind(eqn56(x.global), x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> itest <- itest+1; test.earth(itest, eqn56,     nk=21, degree=2, linpreds=c(3,5))
itest 45  eqn56                            degree 2  nk 21  pmethod backward nTerms 11 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 14 terms, and 5 of 10 predictors 3 linear predictors
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 9 1
GCV 0.02254096    RSS 1.234343    GRSq 0.9973244    RSq 0.9985051
> # check symmetry by using negative of eqn56
> itest <- itest+1; data.global <- cbind(neg.eqn56(x.global), x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 )
> test.earth(itest, neg.eqn56, nk=21, degree=2, linpreds=c(3,5))
itest 46  neg.eqn56                        degree 2  nk 21  pmethod backward nTerms 11 of 14  GRSq    1
 grid:    x1         x2         x3          x4          x5        x6         x7
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241 0.1161652 0.03777443
          x8          x9        x10
 -0.02585157 -0.07134113 -0.1014971


Selected 11 of 14 terms, and 5 of 10 predictors 3 linear predictors
Importance: x3, x2, x4, x1, x5, x6-unused, x7-unused, x8-unused, x9-unused, ...
Number of terms at each degree of interaction: 1 9 1
GCV 0.02254096    RSS 1.234343    GRSq 0.9973244    RSq 0.9985051
> 
> cat("--- tests with ozone data ----------------------\n")
--- tests with ozone data ----------------------
> 
> data(ozone1)
> attach(ozone1)
> 
> x.global <- cbind(wind, humidity, temp, vis)
> y <- doy
> itest <- itest+1; ozone.test(itest, "doy ~ wind+humidity+temp+vis", x.global, y, degree=1, nk=21)
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)
itest 47  doy ~ wind+humidity+temp+vis     degree 1  nk 21  nTerms 6  of 15  GRSq 0.18 GRSq ratio 1.363416 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

               coefficients
(Intercept)      133.587081
h(3-wind)         57.523805
h(humidity-28)     1.483386
h(28-humidity)     8.749051
h(temp-49)         1.140510
h(49-temp)        -4.903351

Selected 6 of 15 terms, and 3 of 4 predictors 
Importance: wind, temp, humidity, vis-unused
Number of terms at each degree of interaction: 1 5 (additive model)
GCV 8930.508    RSS 2753871    GRSq 0.1827523    RSq 0.231678
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  133.5871
  +   57.5238 * bf1
  +  1.483386 * bf2
  +  8.749051 * bf3
  +   1.14051 * bf4
  -  4.903351 * bf5

   bf1  h(3-wind)
   bf2  h(humidity-28)
   bf3  h(28-humidity)
   bf4  h(temp-49)
   bf5  h(49-temp)

Selected 6 of 15 terms, and 3 of 4 predictors 
Importance: wind, temp, humidity, vis-unused
Number of terms at each degree of interaction: 1 5 (additive model)
GCV 8930.508    RSS 2753871    GRSq 0.1827523    RSq 0.231678
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)

 grid:    wind humidity temp vis
             5       64   62 120


 grid:    wind humidity temp vis
             5       64   62 120

Selected 6 of 15 terms, and 3 of 4 predictors 
Importance: wind, temp, humidity, vis-unused
Number of terms at each degree of interaction: 1 5 (additive model)
GCV 8930.508    RSS 2753871    GRSq 0.1827523    RSq 0.231678
> 
> x.global <- cbind(wind, humidity, temp, vis)
> y <- doy
> itest <- itest+1; a91 <- ozone.test(itest, "doy ~ wind+humidity+temp+vis", x.global, y, degree=2, nk=21)
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)
itest 48  doy ~ wind+humidity+temp+vis     degree 2  nk 21  nTerms 8  of 20  GRSq 0.21 GRSq ratio 1.710692 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

                            coefficients
(Intercept)                   140.122198
h(3-wind)                      55.271007
h(humidity-28)                  1.913497
h(28-humidity) * h(temp-60)     1.485234
h(28-humidity) * h(60-temp)     1.128805
h(humidity-54) * h(49-temp)    -0.659818
h(humidity-77) * h(49-temp)     4.252359
h(77-humidity) * h(49-temp)    -0.162175

Selected 8 of 20 terms, and 3 of 4 predictors 
Importance: wind, humidity, temp, vis-unused
Number of terms at each degree of interaction: 1 2 5
GCV 8636.803    RSS 2539541    GRSq 0.2096298    RSq 0.2914755
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  140.1222
  +   55.27101 * bf1
  +   1.913497 * bf2
  +   1.485234 * bf3 * bf4
  +   1.128805 * bf3 * bf5
  -  0.6598181 * bf6 * bf7
  +   4.252359 * bf8 * bf7
  -  0.1621753 * bf9 * bf7

   bf1  h(3-wind)
   bf2  h(humidity-28)
   bf3  h(28-humidity)
   bf4  h(temp-60)
   bf5  h(60-temp)
   bf6  h(humidity-54)
   bf7  h(49-temp)
   bf8  h(humidity-77)
   bf9  h(77-humidity)

Selected 8 of 20 terms, and 3 of 4 predictors 
Importance: wind, humidity, temp, vis-unused
Number of terms at each degree of interaction: 1 2 5
GCV 8636.803    RSS 2539541    GRSq 0.2096298    RSq 0.2914755
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)

 grid:    wind humidity temp vis
             5       64   62 120


 grid:    wind humidity temp vis
             5       64   62 120

> 
> # this is a basic test of RegressAndFix (because this generates lin dep bx cols)
> 
> cat("--Expect warning from mda::mars: NAs introduced by coercion\n") # why do we get a warning?
--Expect warning from mda::mars: NAs introduced by coercion
> x.global <- cbind(wind, exp(humidity))
> y <- doy
> # col.loess is 0 else get loess errors
> itest <- itest+1; ozone.test(itest, "doy ~ wind+exp(humidity)", x.global, y, degree=1, nk=21, col.loess=0)
Warning in storage.mode(tagx) <- "integer" : NAs introduced by coercion
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)
itest 49  doy ~ wind+exp(humidity)         degree 1  nk 21  nTerms 3  of 7   GRSq  0.1 GRSq ratio 1.640727 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

            coefficients
(Intercept)    202.17924
h(3-wind)       50.04004
h(wind-9)      -61.15513

Selected 3 of 7 terms, and 1 of 2 predictors 
Importance: wind, x2-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 9821.564    RSS 3143644    GRSq 0.1012101    RSq 0.1229323
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  202.1792
  + 50.04004 * bf1
  - 61.15513 * bf2

   bf1  h(3-wind)
   bf2  h(wind-9)

Selected 3 of 7 terms, and 1 of 2 predictors 
Importance: wind, x2-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 9821.564    RSS 3143644    GRSq 0.1012101    RSq 0.1229323
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)

 grid:    wind           V2
             5 6.235149e+27


 grid:    wind           V2
             5 6.235149e+27

Selected 3 of 7 terms, and 1 of 2 predictors 
Importance: wind, x2-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 9821.564    RSS 3143644    GRSq 0.1012101    RSq 0.1229323
> 
> x.global <- cbind(vh,wind,humidity,temp,ibh,dpg,ibt,vis,doy)
> y <- O3
> itest <- itest+1; ozone.test(itest, "O3~.", x.global, y, degree=2, nk=21)
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)
itest 50  O3~.                             degree 2  nk 21  nTerms 11 of 21  GRSq 0.79 GRSq ratio 1.010102 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  14.88852
  +    0.3207913 * bf1
  -   0.04561807 * bf2
  +   0.02201538 * bf3
  -   0.02324712 * bf4
  -    0.1436648 * bf5
  -    0.0187155 * bf6 * bf3
  -   0.02096002 * bf7 * bf1
  -   0.01890919 * bf1 * bf8
  +  0.004100053 * bf1 * bf9
  - 8.051735e-05 * bf10 * bf11

   bf1  h(temp-58)
   bf2  h(233-ibt)
   bf3  h(200-vis)
   bf4  h(doy-89)
   bf5  h(89-doy)
   bf6  h(wind-7)
   bf7  h(56-humidity)
   bf8  h(dpg-54)
   bf9  h(54-dpg)
  bf10  h(1069-ibh)
  bf11  h(44-dpg)

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> 
> x.global <- cbind(vh,wind,humidity,temp,ibh,dpg,ibt,vis,doy)
> y <- O3
> itest <- itest+1; ozone.test(itest, "O3~., nk=51", x.global, y, degree=2, nk=51)
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)
itest 51  O3~., nk=51                      degree 2  nk 51  nTerms 27 of 48  GRSq 0.81 GRSq ratio 1.010625 
===summary(fite) 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

                            coefficients
(Intercept)                   12.0135192
h(temp-58)                     0.6578253
h(ibt-233)                     0.2203734
h(233-ibt)                    -0.0296826
h(200-vis)                     0.0576446
h(doy-89)                     -0.0206850
h(89-doy)                     -0.1163833
h(vh-5870) * h(temp-58)       -0.0081176
h(vh-5890) * h(200-vis)        0.0029107
h(5890-vh) * h(200-vis)       -0.0001168
h(vh-5850) * h(doy-89)         0.0005563
h(7-wind) * h(temp-81)        -0.4721177
h(wind-6) * h(ibt-233)        -0.1810748
h(6-wind) * h(ibt-233)        -0.0304043
h(56-humidity) * h(temp-58)   -0.0127575
h(71-humidity) * h(ibt-233)   -0.0073213
h(temp-58) * h(dpg-54)        -0.0148074
h(temp-76) * h(233-ibt)       -0.0542600
h(temp-72) * h(200-vis)       -0.0037720
h(temp-84) * h(200-vis)        0.0198905
h(temp-88) * h(200-vis)       -0.0227786
h(temp-58) * h(doy-159)       -0.0021176
h(temp-58) * h(159-doy)       -0.0053335
h(1069-ibh) * h(ibt-268)       0.0006451
h(dpg-17) * h(200-vis)        -0.0006026
h(17-dpg) * h(200-vis)        -0.0005448
h(ibt-258) * h(200-vis)       -0.0025072

Selected 27 of 48 terms, and 9 of 9 predictors 
Importance: temp, ibt, doy, vis, dpg, ibh, humidity, wind, vh
Number of terms at each degree of interaction: 1 6 20
GCV 12.45516    RSS 2630.53    GRSq 0.8065237    RSq 0.8754213
===summary(fite, style = "bf") 
Call: earth(x=x, y=y, trace=trace, degree=degree, nk=nk)

y =
  12.01352
  +    0.6578253 * bf1
  +    0.2203734 * bf2
  -   0.02968265 * bf3
  +   0.05764456 * bf4
  -   0.02068496 * bf5
  -    0.1163833 * bf6
  -  0.008117648 * bf7 * bf1
  +  0.002910693 * bf8 * bf4
  - 0.0001168164 * bf9 * bf4
  + 0.0005563047 * bf10 * bf5
  -    0.4721177 * bf11 * bf12
  -    0.1810748 * bf13 * bf2
  -   0.03040432 * bf14 * bf2
  -   0.01275745 * bf15 * bf1
  -  0.007321349 * bf16 * bf2
  -   0.01480744 * bf1 * bf17
  -   0.05426002 * bf18 * bf3
  -   0.00377203 * bf19 * bf4
  +   0.01989054 * bf20 * bf4
  -   0.02277855 * bf21 * bf4
  -  0.002117587 * bf1 * bf22
  -  0.005333521 * bf1 * bf23
  + 0.0006450869 * bf24 * bf25
  - 0.0006026025 * bf26 * bf4
  - 0.0005448315 * bf27 * bf4
  -  0.002507211 * bf28 * bf4

   bf1  h(temp-58)
   bf2  h(ibt-233)
   bf3  h(233-ibt)
   bf4  h(200-vis)
   bf5  h(doy-89)
   bf6  h(89-doy)
   bf7  h(vh-5870)
   bf8  h(vh-5890)
   bf9  h(5890-vh)
  bf10  h(vh-5850)
  bf11  h(7-wind)
  bf12  h(temp-81)
  bf13  h(wind-6)
  bf14  h(6-wind)
  bf15  h(56-humidity)
  bf16  h(71-humidity)
  bf17  h(dpg-54)
  bf18  h(temp-76)
  bf19  h(temp-72)
  bf20  h(temp-84)
  bf21  h(temp-88)
  bf22  h(doy-159)
  bf23  h(159-doy)
  bf24  h(1069-ibh)
  bf25  h(ibt-268)
  bf26  h(dpg-17)
  bf27  h(17-dpg)
  bf28  h(ibt-258)

Selected 27 of 48 terms, and 9 of 9 predictors 
Importance: temp, ibt, doy, vis, dpg, ibh, humidity, wind, vh
Number of terms at each degree of interaction: 1 6 20
GCV 12.45516    RSS 2630.53    GRSq 0.8065237    RSq 0.8754213
Converted mars(x=x, y=y, degree=degree, nk=nk)
to        earth(x=x, y=y, degree=degree, nk=nk)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

Selected 27 of 48 terms, and 9 of 9 predictors 
Importance: temp, ibt, doy, vis, dpg, ibh, humidity, wind, vh
Number of terms at each degree of interaction: 1 6 20
GCV 12.45516    RSS 2630.53    GRSq 0.8065237    RSq 0.8754213
> 
> detach(ozone1)
> 
> cat("--- fast mars -----------------------------------\n")
--- fast mars -----------------------------------
> 
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = -1, fast.beta = 1))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = -1,     fast.beta = 1) 
Selected 11 of 31 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = -1, fast.beta = 0))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = -1,     fast.beta = 0) 
Selected 11 of 31 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = 5, fast.beta = 1))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = 5,     fast.beta = 1) 
Selected 13 of 30 terms, and 8 of 9 predictors 
Importance: temp, humidity, dpg, ibt, doy, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 6 6
GCV 12.817    RSS 3472.281    GRSq 0.8009029    RSq 0.835557
> printh(earth(O3 ~ ., data=ozone1, degree=2, nk = 31, fast.k = 5, fast.beta = 0))
===earth(O3 ~ ., data = ozone1, degree = 2, nk = 31, fast.k = 5,     fast.beta = 0) 
Selected 18 of 31 terms, and 9 of 9 predictors 
Importance: temp, ibt, humidity, doy, dpg, vis, ibh, wind, vh
Number of terms at each degree of interaction: 1 7 10
GCV 13.17126    RSS 3276.142    GRSq 0.7953999    RSq 0.8448459
> 
> cat("--- plot.earth and plot.earth.models ------------\n")
--- plot.earth and plot.earth.models ------------
> 
> a <- earth(O3 ~ ., data=ozone1) # formula interface
> 
> if (PLOT)
+     plot(a, caption="plot.earth test 1", col.rsq=3, col.loess=4, col.qq="pink",
+          col.vline=1, col.npreds=0, nresiduals=100, cum.grid="grid",
+          col.grid="linen", col.sel.grid="linen")
Warning: col.grid is deprecated.  Please use col.cum.grid instead.
> 
> set.seed(1)
> if (PLOT) {
+     plot(a, caption="plot.earth test 2", which=c(3,4,1), ylim=c(.2,.9),
+          id.n=20, legend.pos=c(10,.4), pch=20, lty.vline=1, cex.legend=1,
+          col.sel.grid="lightgray")
+ 
+     plot(a, caption="plot.earth test 3", which=c(2), main="test main")
+ }
> 
> a1 <- earth(ozone1[,c(2:4,10)], ozone1[,1])     # x,y interface
> 
> if (PLOT) {
+     plot(a, caption="plot.earth test 4", id.n=1)
+     set.seed(1)
+     plot.earth.models(a, which=1, ylim=c(.4,.8), jitter=.01)
+ 
+     plot.earth.models(a1)
+ 
+     plot.earth.models(list(a, a1), col.cum=c(3,4),  col.grsq=c(1,2), col.rsq=c(3,4),
+          col.npreds=1, col.vline=1, lty.vline=3,
+          legend.pos=c(5,.4), legend.text=c("a", "b", "c"), cex.legend=1.3)
+ }
> 
> cat("--- test minspan --------------------------------\n")
--- test minspan --------------------------------
> 
> a <- earth(O3 ~ ., data=ozone1, minspan=2)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, minspan=2)

               coefficients
(Intercept)       8.5631765
h(vh-5740)        0.0154112
h(5740-vh)       -0.0134986
h(9-wind)         0.3040866
h(humidity-39)    0.2419510
h(humidity-54)   -0.2271800
h(temp-58)        0.3788112
h(ibh-1046)      -0.0006033
h(1046-ibh)      -0.0029992
h(dpg-12)        -0.1073208
h(80-vis)         0.0456262
h(doy-89)         0.0469849
h(89-doy)        -0.1248560
h(doy-159)       -0.0911487

Selected 14 of 19 terms, and 8 of 9 predictors 
Importance: temp, ibh, doy, dpg, humidity, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 13 (additive model)
GCV 14.81911    RSS 4122.811    GRSq 0.7698025    RSq 0.8047487
> 
> a <- earth(O3 ~ ., data=ozone1, minspan=0)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, minspan=0)

               coefficients
(Intercept)       8.6910756
h(vh-5740)        0.0152607
h(5740-vh)       -0.0130076
h(9-wind)         0.3044601
h(humidity-41)    0.2753048
h(humidity-54)   -0.2615068
h(temp-58)        0.3801961
h(ibh-1069)      -0.0006189
h(1069-ibh)      -0.0029057
h(dpg-11)        -0.1060948
h(80-vis)         0.0459011
h(doy-89)         0.0471836
h(89-doy)        -0.1264530
h(doy-159)       -0.0915781

Selected 14 of 19 terms, and 8 of 9 predictors 
Importance: temp, ibh, doy, dpg, humidity, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 13 (additive model)
GCV 14.85938    RSS 4134.014    GRSq 0.769177    RSq 0.8042181
> 
> a <- earth(O3 ~ ., data=ozone1, minspan=-1) # minspan=-1 added in earth 2.4-0
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=ozone1, minspan=-1)

               coefficients
(Intercept)      13.9970155
h(5860-vh)       -0.0137766
h(wind-3)        -0.3449381
h(55-humidity)   -0.1312961
h(temp-58)        0.2781026
h(1108-ibh)      -0.0033010
h(dpg-10)        -0.0998088
h(ibt-121)        0.0325019
h(150-vis)        0.0232155
h(doy-92)         0.0413440
h(92-doy)        -0.1168261
h(doy-159)       -0.0847997

Selected 12 of 20 terms, and 9 of 9 predictors 
Importance: temp, humidity, dpg, doy, vh, ibh, vis, ibt, wind
Number of terms at each degree of interaction: 1 11 (additive model)
GCV 14.58982    RSS 4166.897    GRSq 0.7733643    RSq 0.8026608
> 
> cat("--- test multiple responses ---------------------\n")
--- test multiple responses ---------------------
> 
> # this uses the global matrix data.global (data.global[,1:2] is the response)
> 
> test.earth.two.responses <- function(itest, func1, func2,
+     degree=2, nk=51, plotit=PLOT, test.rsq=TRUE, trace=0, minspan=0,
+     test.mars.to.earth=FALSE, pmethod="backward")
+ {
+     if(typeof(func1) == "character")
+         funcnames <- paste("multiple responses", func1, func2)
+     else
+         funcnames <- paste("multiple responses", deparse(substitute(func1)), deparse(substitute(func2)))
+     cat("itest", sprintf("%-3d", itest), funcnames,
+         " degree", sprintf("%-2d", degree), "nk", sprintf("%-3g", nk), "\n\n")
+     gc()
+     fite <- earth(data.global[,c(-1,-2), drop=FALSE], data.global[,1:2],
+                 degree=degree, trace=trace, nk=nk, pmethod=pmethod, fast.k=-1, minspan=minspan)
+     printh(fite)
+     caption <- paste("itest ", itest, ": ", funcnames, " degree=", degree, " nk=", nk, sep="")
+     if(plotit) {
+         if(typeof(func1) == "character") {
+             plotmo(fite, caption=caption, nresponse=1)
+             plotmo(fite, nresponse=2)
+         } else {
+             plotmo(fite, func=func1, caption=caption, nresponse=1)
+             plotmo(fite, func=func2, nresponse=2)
+         }
+         plot(fite, caption=caption)
+         plot(fite, nresponse=2)
+     }
+     cat("\n")
+     if(test.mars.to.earth) {
+         cat("Testing mars.to.earth with a multiple response model\n")
+         fitm <- mars(data.global[,c(-1,-2), drop=FALSE], data.global[,1:2],
+                      degree=degree, trace=(trace!=0), nk=nk)
+         fitme <- mars.to.earth(fitm)
+         printh(fitme)
+         printh(summary(fitme))
+         if(plotit) {
+             plotmo(fitm, func=func1, caption=caption, nresponse=1)
+             plotmo(fitm, func=func2, nresponse=2)
+         }
+ # TODO following code causes error "nk" not found, looking in wrong environment?
+ #       cat("Expect warnings because of weights in the mars model\n")
+ #       fitm <- mars(data.global[,c(-1,-2), drop=FALSE], data.global[,1:2],
+ #                    degree=degree, trace=(trace!=0), nk=nk, wp=c(1,2))
+ #       fitme <- mars.to.earth(fitm)
+ #       printh(fitme)
+ #       printh(summary(fitme))
+     }
+     fite
+ }
> 
> x.global <- cbind(                                     x1, x2)
> data.global <- cbind(func1(x.global), func7(x.global), x1, x2)
> colnames(data.global) = c("func1", "func7", "x1", "x2")
> # expect pmethod="ex" cannot be used with multiple response models
> try(test.earth.two.responses(itest, func1, func7, nk=51, degree=1, pmethod="ex"))
itest 51  multiple responses func1 func7  degree 1  nk 51  

Error : pmethod == "exhaustive" cannot be used with multiple response models
       (y has 2 columns, use trace=4 to see y)
> # expect pmethod="seq" cannot be used with multiple response models
> try(test.earth.two.responses(itest, func1, func7, nk=51, degree=1, pmethod="seq"))
itest 51  multiple responses func1 func7  degree 1  nk 51  

Error : pmethod == "seqrep" cannot be used with multiple response models
       (y has 2 columns, use trace=4 to see y)
> itest <- itest+1; a <- test.earth.two.responses(itest, func1, func7, nk=51, degree=1)
itest 52  multiple responses func1 func7  degree 1  nk 51  

===fite 
Selected 9 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)

              GCV       RSS      GRSq       RSq
func1 0.002378554 0.1638586 0.9971927 0.9980268
func7 0.009641121 0.6641768 0.9812104 0.9867930
All   0.012019676 0.8280355 0.9911645 0.9937896

 grid:    x1         x2
 -0.02437858 0.03719751


 grid:    x1         x2
 -0.02437858 0.03719751


> printh(summary(a))
===summary(a) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      fast.k=-1, minspan=minspan)

                      func1      func7
(Intercept)      -1.4298232 -0.6422906
h(x1- -0.483966)  1.7380390 -1.5172222
h(-0.483966-x1)   1.4824026  4.0115608
h(x1- -0.23993)   0.9966967  5.4675942
h(x1-0.29412)    -1.0070324 -5.3210965
h(x1-0.422242)   -2.1817547 -3.2389148
h(x1-0.728679)   -2.2031033  1.9380614
h(x2- -0.342445)  0.9898526 -0.0118126
h(-0.342445-x2)  -1.0088884  0.0831623

Selected 9 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)

              GCV       RSS      GRSq       RSq
func1 0.002378554 0.1638586 0.9971927 0.9980268
func7 0.009641121 0.6641768 0.9812104 0.9867930
All   0.012019676 0.8280355 0.9911645 0.9937896
> printh(summary(a, style="bf"))
===summary(a, style = "bf") 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      fast.k=-1, minspan=minspan)

func1 =
  -1.429823
  +  1.738039 * bf1
  +  1.482403 * bf2
  + 0.9966967 * bf3
  -  1.007032 * bf4
  -  2.181755 * bf5
  -  2.203103 * bf6
  + 0.9898526 * bf7
  -  1.008888 * bf8

   bf1  h(x1--0.483966)
   bf2  h(-0.483966-x1)
   bf3  h(x1--0.23993)
   bf4  h(x1-0.29412)
   bf5  h(x1-0.422242)
   bf6  h(x1-0.728679)
   bf7  h(x2--0.342445)
   bf8  h(-0.342445-x2)

func7 =
  -0.6422906
  -   1.517222 * bf1
  +   4.011561 * bf2
  +   5.467594 * bf3
  -   5.321097 * bf4
  -   3.238915 * bf5
  +   1.938061 * bf6
  - 0.01181257 * bf7
  + 0.08316234 * bf8

   bf1  h(x1--0.483966)
   bf2  h(-0.483966-x1)
   bf3  h(x1--0.23993)
   bf4  h(x1-0.29412)
   bf5  h(x1-0.422242)
   bf6  h(x1-0.728679)
   bf7  h(x2--0.342445)
   bf8  h(-0.342445-x2)

Selected 9 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 8 (additive model)

              GCV       RSS      GRSq       RSq
func1 0.002378554 0.1638586 0.9971927 0.9980268
func7 0.009641121 0.6641768 0.9812104 0.9867930
All   0.012019676 0.8280355 0.9911645 0.9937896
> if (PLOT) {
+     plotmo(a, nresponse=1)     # test generation of caption based on response name
+     plotmo(a, nresponse=2)
+     plot(a, nresponse=1)
+     plot(a, nresponse=2)
+ }

 grid:    x1         x2
 -0.02437858 0.03719751


 grid:    x1         x2
 -0.02437858 0.03719751

> x.global <- cbind(                                     x1, x2)
> data.global <- cbind(func1(x.global), func7(x.global), x1, x2)
> colnames(data.global) = c("func1", 
+    "a.very.long.in.fact.extremely.long.response.name", 
+    "x1.a.very.long.in.fact.extremely.long.predictor.name", 
+    "x2")
> itest <- itest+1; a <- test.earth.two.responses(itest, func1, func7, nk=51, degree=3)
itest 53  multiple responses func1 func7  degree 3  nk 51  

===fite 
Selected 9 of 9 terms, and 2 of 2 predictors 
Importance: x1.a.very.long.in.fact.extremely.long.predictor.name, x2
Number of terms at each degree of interaction: 1 8 (additive model)

                                                         GCV       RSS
func1                                            0.002625519 0.1638586
a.very.long.in.fact.extremely.long.response.name 0.010642154 0.6641768
All                                              0.013267673 0.8280355
                                                      GRSq       RSq
func1                                            0.9969012 0.9980268
a.very.long.in.fact.extremely.long.response.name 0.9792595 0.9867930
All                                              0.9902471 0.9937896

 grid:    x1.a.very.long.in.fact.extremely.long.predictor.name         x2
                                                   -0.02437858 0.03719751


 grid:    x1.a.very.long.in.fact.extremely.long.predictor.name         x2
                                                   -0.02437858 0.03719751


> printh(summary(a))
===summary(a) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      fast.k=-1, minspan=minspan)

                                                                        func1
(Intercept)                                                        -1.4298232
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.483966)  1.7380390
h(-0.483966-x1.a.very.long.in.fact.extremely.long.predictor.name)   1.4824026
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.23993)   0.9966967
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.29412)    -1.0070324
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.422242)   -2.1817547
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.728679)   -2.2031033
h(x2- -0.342445)                                                    0.9898526
h(-0.342445-x2)                                                    -1.0088884
                                                                   a.very.long.in.fact.extremely.long.response.name
(Intercept)                                                                                              -0.6422906
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.483966)                                       -1.5172222
h(-0.483966-x1.a.very.long.in.fact.extremely.long.predictor.name)                                         4.0115608
h(x1.a.very.long.in.fact.extremely.long.predictor.name- -0.23993)                                         5.4675942
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.29412)                                          -5.3210965
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.422242)                                         -3.2389148
h(x1.a.very.long.in.fact.extremely.long.predictor.name-0.728679)                                          1.9380614
h(x2- -0.342445)                                                                                         -0.0118126
h(-0.342445-x2)                                                                                           0.0831623

Selected 9 of 9 terms, and 2 of 2 predictors 
Importance: x1.a.very.long.in.fact.extremely.long.predictor.name, x2
Number of terms at each degree of interaction: 1 8 (additive model)

                                                         GCV       RSS
func1                                            0.002625519 0.1638586
a.very.long.in.fact.extremely.long.response.name 0.010642154 0.6641768
All                                              0.013267673 0.8280355
                                                      GRSq       RSq
func1                                            0.9969012 0.9980268
a.very.long.in.fact.extremely.long.response.name 0.9792595 0.9867930
All                                              0.9902471 0.9937896
> print(evimp(a))
                                                     nsubsets   gcv    rss
x1.a.very.long.in.fact.extremely.long.predictor.name        8 100.0  100.0
x2                                                          6  66.9   63.6
> print.default(evimp(a))
                                                     col used nsubsets
x1.a.very.long.in.fact.extremely.long.predictor.name   1    1        8
x2                                                     2    1        6
                                                           gcv gcv.match
x1.a.very.long.in.fact.extremely.long.predictor.name 100.00000         1
x2                                                    66.88298         1
                                                           rss rss.match
x1.a.very.long.in.fact.extremely.long.predictor.name 100.00000         1
x2                                                    63.59638         1
attr(,"class")
[1] "evimp"
> 
> x.global <- cbind(                                           x1, x2, x3, x4, x5)
> data.global <- cbind(eqn56=eqn56(x.global), neg.eqn56noise(x.global), x1, x2, x3, x4, x5)
> colnames(data.global) = c("", "neg.eqn56noise", "x1", "x2", "x3", "x4", "x5")
> itest <- itest+1; a <- test.earth.two.responses(itest, eqn56, neg.eqn56noise, nk=51, degree=1)
itest 54  multiple responses eqn56 neg.eqn56noise  degree 1  nk 51  

===fite 
Selected 11 of 17 terms, and 5 of 5 predictors 
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 10 (additive model)

                     GCV       RSS      GRSq       RSq
y1             0.0888291  5.543824 0.9894559 0.9932858
neg.eqn56noise 1.1492076 71.722049 0.8747217 0.9202263
All            1.2380367 77.265873 0.9296481 0.9552019

 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


 grid:    x1         x2         x3          x4          x5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


> print(evimp(a))
   nsubsets   gcv    rss
x3       10 100.0  100.0
x2        9  81.9   80.7
x4        8  57.4   56.2
x1        7  45.7   44.4
x5        6  37.3   36.0
> print.default(evimp(a))
   col used nsubsets       gcv gcv.match       rss rss.match
x3   3    1       10 100.00000         1 100.00000         1
x2   2    1        9  81.93716         1  80.68965         1
x4   4    1        8  57.41495         1  56.24481         1
x1   1    1        7  45.69253         1  44.43055         1
x5   5    1        6  37.29910         1  36.01828         1
attr(,"class")
[1] "evimp"
> 
> x.global <- cbind(                                           x1, x2, x3, x4, x5)
> data.global <- cbind(eqn56=eqn56(x.global), neg.eqn56noise(x.global), x1, x2, x3, x4, x5)
> colnames(data.global) = NULL
> itest <- itest+1; a70 <- test.earth.two.responses(itest, eqn56, neg.eqn56noise, nk=51, degree=2)
itest 55  multiple responses eqn56 neg.eqn56noise  degree 2  nk 51  

===fite 
Selected 9 of 39 terms, and 5 of 5 predictors 
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 7 1

          GCV      RSS      GRSq       RSq
y1  0.1838928 11.47675 0.9781718 0.9861004
y2  1.3142182 82.02036 0.8567335 0.9087719
All 1.4981110 93.49711 0.9148693 0.9457912

 grid:    V1         V2         V3          V4          V5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


 grid:    V1         V2         V3          V4          V5
 -0.02437858 0.03719751 -0.2437968 -0.07448578 -0.04164241


> printh(summary(a70))
===summary(a70) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      fast.k=-1, minspan=minspan)

                                         y1          y2
(Intercept)                        1.274765  -1.0576119
h(x1-0.539683)                     8.849384  -6.8103056
h(x2-0.423488)                    25.293875 -26.2268279
h(x2-0.55997)                    -23.539326  23.6190394
h(x3-0.299159)                     3.046742  -3.6496469
h(0.299159-x3)                    -3.001095   2.4612943
h(x4- -0.296853)                   2.089118  -2.0268679
h(0.795697-x5)                    -1.041968   0.9713467
h(0.539683-x1) * h(-0.231392-x4)  -1.818073   3.3158828

Selected 9 of 39 terms, and 5 of 5 predictors 
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 7 1

          GCV      RSS      GRSq       RSq
y1  0.1838928 11.47675 0.9781718 0.9861004
y2  1.3142182 82.02036 0.8567335 0.9087719
All 1.4981110 93.49711 0.9148693 0.9457912
> printh(summary(a70, style="bf"))
===summary(a70, style = "bf") 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], trace=trace, degree=degree, nk=nk, pmethod=pmethod, 
      fast.k=-1, minspan=minspan)

y1 =
  1.274765
  +  8.849384 * bf1
  +  25.29387 * bf2
  -  23.53933 * bf3
  +  3.046742 * bf4
  -  3.001095 * bf5
  +  2.089118 * bf6
  -  1.041968 * bf7
  -  1.818073 * bf8 * bf9

   bf1  h(x1-0.539683)
   bf2  h(x2-0.423488)
   bf3  h(x2-0.55997)
   bf4  h(x3-0.299159)
   bf5  h(0.299159-x3)
   bf6  h(x4--0.296853)
   bf7  h(0.795697-x5)
   bf8  h(0.539683-x1)
   bf9  h(-0.231392-x4)

y2 =
  -1.057612
  -   6.810306 * bf1
  -   26.22683 * bf2
  +   23.61904 * bf3
  -   3.649647 * bf4
  +   2.461294 * bf5
  -   2.026868 * bf6
  +  0.9713467 * bf7
  +   3.315883 * bf8 * bf9

   bf1  h(x1-0.539683)
   bf2  h(x2-0.423488)
   bf3  h(x2-0.55997)
   bf4  h(x3-0.299159)
   bf5  h(0.299159-x3)
   bf6  h(x4--0.296853)
   bf7  h(0.795697-x5)
   bf8  h(0.539683-x1)
   bf9  h(-0.231392-x4)

Selected 9 of 39 terms, and 5 of 5 predictors 
Importance: x3, x2, x4, x1, x5
Number of terms at each degree of interaction: 1 7 1

          GCV      RSS      GRSq       RSq
y1  0.1838928 11.47675 0.9781718 0.9861004
y2  1.3142182 82.02036 0.8567335 0.9087719
All 1.4981110 93.49711 0.9148693 0.9457912
> 
> N1 <- 100
> set.seed(1)
> x1. <- runif(N1, -1, 1)
> x2. <- runif(N1, -1, 1)
> x3. <- runif(N1, -1, 1)
> x4. <- runif(N1, -1, 1)
> x5. <- runif(N1, -1, 1)
> 
> x.global <- cbind(                                        (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> data.global <- cbind(robotArm(x.global), eqn56(x.global), (x1.+1)/2, (x2.+2)/2, pi*(x3.+1), pi*(x4.+1), pi*x5./2 )
> colnames(x.global)    <- c(                "l1", "l2", "theta1", "theta2", "phi")
> colnames(data.global) <- c("arm", "eqn56", "l1", "l2", "theta1", "theta2", "phi")
> itest <- itest+1; test.earth.two.responses(itest, robotArm, eqn56, nk=51, degree=1)
itest 56  multiple responses robotArm eqn56  degree 1  nk 51  

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06160414 3.844714 0.6702662 0.7900348
eqn56 0.04258466 2.657709 0.9991105 0.9994336
All   0.10418880 6.502423 0.9978322 0.9986196

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06160414 3.844714 0.6702662 0.7900348
eqn56 0.04258466 2.657709 0.9991105 0.9994336
All   0.10418880 6.502423 0.9978322 0.9986196
> itest <- itest+1; test.earth.two.responses(itest, robotArm, eqn56, nk=51, degree=2, test.mars.to.earth=TRUE)
itest 57  multiple responses robotArm eqn56  degree 2  nk 51  

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07021027 3.844714 0.6242022 0.7900348
eqn56 0.04853376 2.657709 0.9989862 0.9994336
All   0.11874403 6.502423 0.9975293 0.9986196

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Testing mars.to.earth with a multiple response model
Converted mars(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
          1:2], degree=degree, nk=nk, trace.mars=(trace!=0))
to        earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
          1:2], degree=degree, nk=nk)
===fitme 
Selected 14 of 14 terms, and 5 of 5 predictors 
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 11 2

             GCV      RSS      GRSq       RSq
arm   0.07307979 3.231771 0.6088432 0.8235085
eqn56 0.02611358 1.154808 0.9994545 0.9997539
All   0.09919337 4.386579 0.9997589 0.9998912
===summary(fitme) 
Call: earth(x=data.global[, c(-1, -2), drop=FALSE], y=data.global[, 
      1:2], degree=degree, nk=nk)

                                           arm      eqn56
(Intercept)                         1.13711992 16.8172674
h(l1-0.434659)                      0.75446667  2.7922931
h(l1-0.712515)                      0.22095175  9.0847285
h(0.712515-l1)                     -0.29368398 -1.1263202
h(l2-0.680866)                      0.85296162  0.0155967
h(0.680866-l2)                     -0.44432945 -7.4472751
h(theta1-1.99268)                   0.01575202  3.0301091
h(1.99268-theta1)                   0.06299441 -2.9690537
h(theta2-3.09961)                  -0.19398400  2.0281862
h(3.09961-theta2)                  -0.15600166 -1.9774662
h(phi- -0.0759479)                 -0.23251894  0.9832517
h(-0.0759479-phi)                  -0.15019381 -0.9749834
h(0.434659-l1)                     -0.15076581 -0.0551910
h(l1-0.434659) * h(theta2-1.51306) -1.82393250 -0.3921191

Selected 14 of 14 terms, and 5 of 5 predictors 
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 11 2

             GCV      RSS      GRSq       RSq
arm   0.07307979 3.231771 0.6088432 0.8235085
eqn56 0.02611358 1.154808 0.9994545 0.9997539
All   0.09919337 4.386579 0.9997589 0.9998912

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174

Warning: predicted values in the "l1" graph (and others) are out of ylim=(0.15, 2.1).
         Use clip=FALSE to make this warning go away.

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174

Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07021027 3.844714 0.6242022 0.7900348
eqn56 0.04853376 2.657709 0.9989862 0.9994336
All   0.11874403 6.502423 0.9975293 0.9986196
> itest <- itest+1; test.earth.two.responses(itest, robotArm, eqn56, nk=201, degree=1)
itest 58  multiple responses robotArm eqn56  degree 1  nk 201 

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06160414 3.844714 0.6702662 0.7900348
eqn56 0.04258466 2.657709 0.9991105 0.9994336
All   0.10418880 6.502423 0.9978322 0.9986196

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.06160414 3.844714 0.6702662 0.7900348
eqn56 0.04258466 2.657709 0.9991105 0.9994336
All   0.10418880 6.502423 0.9978322 0.9986196
> itest <- itest+1; test.earth.two.responses(itest, robotArm, eqn56, nk=201, degree=2)
itest 59  multiple responses robotArm eqn56  degree 2  nk 201 

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07021027 3.844714 0.6242022 0.7900348
eqn56 0.04853376 2.657709 0.9989862 0.9994336
All   0.11874403 6.502423 0.9975293 0.9986196

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07021027 3.844714 0.6242022 0.7900348
eqn56 0.04853376 2.657709 0.9989862 0.9994336
All   0.11874403 6.502423 0.9975293 0.9986196
> itest <- itest+1; test.earth.two.responses(itest, robotArm, eqn56, nk=201, degree=10)
itest 60  multiple responses robotArm eqn56  degree 10 nk 201 

===fite 
Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07021027 3.844714 0.6242022 0.7900348
eqn56 0.04853376 2.657709 0.9989862 0.9994336
All   0.11874403 6.502423 0.9975293 0.9986196

 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


 grid:    l1       l2   theta1   theta2         phi
   0.4878107 1.018599 2.375682 2.907589 -0.06541174


Selected 11 of 11 terms, and 5 of 5 predictors 
Importance: theta1, theta2, l1, phi, l2
Number of terms at each degree of interaction: 1 10 (additive model)

             GCV      RSS      GRSq       RSq
arm   0.07021027 3.844714 0.6242022 0.7900348
eqn56 0.04853376 2.657709 0.9989862 0.9994336
All   0.11874403 6.502423 0.9975293 0.9986196
> 
> attach(ozone1)
> x.global <- cbind(                wind, humidity, temp, ibh, dpg, ibt, vis)
> data.global <- cbind(O3, doy, vh, wind, humidity, temp, ibh, dpg, ibt, vis)
> itest <- itest+1; test.earth.two.responses(itest, "O3", "doy", nk=51, degree=2)
itest 61  multiple responses O3 doy  degree 2  nk 51  

===fite 
Selected 24 of 49 terms, and 8 of 8 predictors 
Importance: wind, ibt, ibh, vis, temp, dpg, vh, humidity
Number of terms at each degree of interaction: 1 8 15

          GCV        RSS      GRSq       RSq
O3    23.9916    5359.02 0.6273183 0.7462033
doy 7228.4935 1614631.88 0.3385069 0.5495224
All 7252.4851 1619990.90 0.3401983 0.5506743

 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


Selected 24 of 49 terms, and 8 of 8 predictors 
Importance: wind, ibt, ibh, vis, temp, dpg, vh, humidity
Number of terms at each degree of interaction: 1 8 15

          GCV        RSS      GRSq       RSq
O3    23.9916    5359.02 0.6273183 0.7462033
doy 7228.4935 1614631.88 0.3385069 0.5495224
All 7252.4851 1619990.90 0.3401983 0.5506743
> detach(ozone1)
> 
> cat("--- formula based multiple response -------------\n")
--- formula based multiple response -------------
> 
> a2 <- earth(cbind(O3,doy) ~ ., data=ozone1, degree=2)
> if (PLOT) {
+     plotmo(a2, nresponse=1)                  # TODO1 delete
+     plotmo(a2, nresponse=1) # test generation of caption based on response name
+     plotmo(a2, nresponse=2)
+     plot(a2, nresponse=1) # TODO delete
+     plot(a2, nresponse=1)
+     plot(a2, nresponse=2)
+ }

 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120


 grid:    vh wind humidity temp    ibh dpg   ibt vis
        5760    5       64   62 2112.5  24 167.5 120

> 
> cat("--- test plot.earth.models with multiple responses ---\n")
--- test plot.earth.models with multiple responses ---
> 
> set.seed(1)
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> a2 <- earth(cbind(O3,doy) ~ ., data=ozone1, degree=2)
> b2 <- earth(cbind(O3,doy) ~ ., data=ozone1, degree=1)
> if (PLOT) {
+     plot.earth.models(list(a, a2), caption="plot.earth.models with multiple responses, list(a,a2)")
+     plot.earth.models(list(a2, a), caption="plot.earth.models with multiple responses, list(a2,a)",
+                       col.rsq=c(2,3), col.npreds=c(2,3))
+     plot.earth.models(list(a2, b2), caption="plot.earth.models with multiple responses, list(a2,b2)",
+                       col.rsq=c(2,3), col.npreds=c(4,5), jitter=.01, legend.pos="topleft")
+ }
> 
> cat("--- subset --------------------------------------\n")
--- subset --------------------------------------
> 
> set.seed(9)
> train.subset <- sample(1:nrow(ozone1), .8 * nrow(ozone1))
> test.subset <- (1:nrow(ozone1))[-train.subset]
> 
> # all the following models should be identical
> a <- earth(ozone1[,-1], ozone1[,1], subset=train.subset, nprune=7, degree=2)
> printh(a)
===a 
Selected 7 of 21 terms, and 5 of 9 predictors 
Importance: temp, ibt, doy, dpg, vis, ibh-unused, vh-unused, wind-unused, ...
Number of terms at each degree of interaction: 1 5 1
GCV 15.90111    RSS 3704.476    GRSq 0.7514625    RSq 0.7790043
> if (PLOT)
+     plotmo(a, caption="test subset: earth(ozone1[,-1], ozone1[,1], subset=train.subset)")

 grid:    vh wind humidity temp  ibh dpg   ibt vis   doy
        5765    5       64   62 2050  25 170.5 120 199.5

> 
> a <- earth(ozone1[train.subset,-1], ozone1[train.subset,1], nprune=7, degree=2)
> printh(a)
===a 
Selected 7 of 21 terms, and 5 of 9 predictors 
Importance: temp, ibt, doy, dpg, vis, ibh-unused, vh-unused, wind-unused, ...
Number of terms at each degree of interaction: 1 5 1
GCV 15.90111    RSS 3704.476    GRSq 0.7514625    RSq 0.7790043
> if (PLOT)
+     plotmo(a, caption="test subset: earth(ozone1[train.subset,-1], ozone1[train.subset,1]")

 grid:    vh wind humidity temp  ibh dpg   ibt vis   doy
        5765    5       64   62 2050  25 170.5 120 199.5

> 
> a <- earth(O3 ~ ., data=ozone1, subset=train.subset, nprune=7, degree=2)
> printh(a)
===a 
Selected 7 of 21 terms, and 5 of 9 predictors 
Importance: temp, ibt, doy, dpg, vis, ibh-unused, vh-unused, wind-unused, ...
Number of terms at each degree of interaction: 1 5 1
GCV 15.90111    RSS 3704.476    GRSq 0.7514625    RSq 0.7790043
> if (PLOT)
+     plotmo(a, caption="test subset: earth(O3 ~ ., data=ozone1, subset=train.subset")

 grid:    vh wind humidity temp  ibh dpg   ibt vis   doy
        5765    5       64   62 2050  25 170.5 120 199.5

> 
> y <- ozone1[test.subset, 1]
> yhat <- predict(a, newdata = ozone1[test.subset, -1])
> printh(1 - sum((y - yhat)^2)/sum((y - mean(y))^2)) # print RSquared
===1 - sum((y - yhat)^2)/sum((y - mean(y))^2) [1] 0.7194805
> 
> cat("--- update -------------------------\n")
--- update -------------------------
> 
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> printh(update(a, penalty = -1, ponly=TRUE))
===update(a, penalty = -1, ponly = TRUE) 
Selected 21 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 10 10
GCV 10.77088    RSS 3554.389    GRSq 0.8316684    RSq 0.8316684
> printh(update(a, penalty = 10, ponly=TRUE))
===update(a, penalty = 10, ponly = TRUE) 
Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 17.1834    RSS 3767.904    GRSq 0.733076    RSq 0.8215567
> a <- earth(O3 ~ ., data=ozone1, nk=31, pmethod="n", degree=2)
> a.none <- printh(update(a, nprune=10, pmethod="n"))
===update(a, nprune = 10, pmethod = "n") 
Selected 10 of 31 terms, and 5 of 9 predictors 
Importance: temp, humidity, ibt-unused, doy, dpg, ibh, vis-unused, ...
Number of terms at each degree of interaction: 1 6 3
GCV 13.83619    RSS 3938.796    GRSq 0.7850711    RSq 0.8134634
> printh(update(a.none, pmethod="b"))
===update(a.none, pmethod = "b") 
Selected 10 of 31 terms, and 7 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.83619    RSS 3938.796    GRSq 0.7850711    RSq 0.8134634
> printh(update(a.none, nprune=4, pmethod="e"))
===update(a.none, nprune = 4, pmethod = "e") 
Selected 4 of 31 terms, and 3 of 9 predictors 
Importance: temp, ibh, humidity, vh-unused, wind-unused, dpg-unused, ...
Number of terms at each degree of interaction: 1 2 1
GCV 18.55929    RSS 5813.122    GRSq 0.7117032    RSq 0.7246976
> a.updated <- update(a.none, nprune=10, pmethod="b")
> printh(a.updated)
===a.updated 
Selected 10 of 31 terms, and 7 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.83619    RSS 3938.796    GRSq 0.7850711    RSq 0.8134634
> a.backwards <- update(a, nprune=10, pmethod="b")
> printh(a.backwards)
===a.backwards 
Selected 10 of 31 terms, and 7 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.83619    RSS 3938.796    GRSq 0.7850711    RSq 0.8134634
> printh(all.equal(a.updated$bx, a.backwards$bx))
===all.equal(a.updated$bx, a.backwards$bx) [1] TRUE
> a <- earth(O3 ~ ., data=ozone1, nk=31, nprune=10, pmethod="b", degree=2)
> printh(a)
===a 
Selected 10 of 31 terms, and 7 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, vh-unused, ...
Number of terms at each degree of interaction: 1 5 4
GCV 13.83619    RSS 3938.796    GRSq 0.7850711    RSq 0.8134634
> printh(all.equal(a$bx, a.backwards$bx))
===all.equal(a$bx, a.backwards$bx) [1] TRUE
> 
> cat("--- Force.xtx.prune -----------------------------\n")
--- Force.xtx.prune -----------------------------
> 
> # expect pmethod="ex" cannot be used with Force.xtx.prune
> try(earth(Volume ~ ., data = trees, Force.xtx.prune=TRUE, pmethod="ex"))
Error : pmethod="exhaustive" cannot be used with "eval.subsets.xtx"
> 
> m1 <- earth(Volume ~ ., data = trees)
> m2 <- earth(Volume ~ ., data = trees, Force.xtx.prune=TRUE)
> check.models.equal(m1, m2, "Force.xtx.prune test 1", check.subsets=FALSE)
check.models.equal not identical: Force.xtx.prune test 1 [but within numerical tolerances]
> 
> m1 <- earth(O3 ~ wind+temp, data = ozone1, nk=51)
> m2 <- earth(O3 ~ wind+temp, data = ozone1, nk=51, Force.xtx.prune=TRUE)
> check.models.equal(m1, m2, "Force.xtx.prune test 2", check.subsets=FALSE)
check.models.equal not identical: Force.xtx.prune test 2 (m1$rsq 0.6647086 != m1$rsq 0.6647086) [but within numerical tolerances]
> 
> # TODO there appears to be a bug in leaps --- to see run the call below
> # with trace=4 and in the prune pass display note that at subset size 15
> # several terms are added and deleted -- but only one term should be added per step
> m1 <- earth(O3 ~ ., data = ozone1, nk=51, degree=2)
> m2 <- earth(O3 ~ ., data = ozone1, nk=51, degree=2, Force.xtx.prune=TRUE)
> check.models.equal(m1, m2, "Force.xtx.prune test 3", check.subsets=FALSE)
check.models.equal not identical: Force.xtx.prune test 3 (m1$rsq 0.8754213 != m1$rsq 0.8754213) [but within numerical tolerances]
> 
> cat("--- extractAIC.earth ----------------------------\n")
--- extractAIC.earth ----------------------------
> 
> a <-earth(O3 ~ ., data=ozone1, degree=2)
> cat("Ignore 10 warnings: extractAIC.earth: using GCV instead of AIC\n")
Ignore 10 warnings: extractAIC.earth: using GCV instead of AIC
> printh(drop1(a), expect.warning=TRUE)
===drop1(a)  expect warning -->Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Warning: extractAIC.earth: returning GCV instead of AIC
Single term deletions

Model:
O3 ~ vh + wind + humidity + temp + ibh + dpg + ibt + vis + doy
            Df    AIC
<none>         13.454
vh         0.0 13.452
wind     -10.0 14.222
humidity -10.0 15.048
temp      -7.5 13.134
ibh       -2.5 13.034
dpg        0.0 14.677
ibt       -5.0 13.858
vis        0.0 14.571
doy        0.0 14.567
> printh(drop1(a, warn=FALSE)) # repeat but with warnings suppressed
===drop1(a, warn = FALSE) 
Single term deletions

Model:
O3 ~ vh + wind + humidity + temp + ibh + dpg + ibt + vis + doy
            Df    AIC
<none>         13.454
vh         0.0 13.452
wind     -10.0 14.222
humidity -10.0 15.048
temp      -7.5 13.134
ibh       -2.5 13.034
dpg        0.0 14.677
ibt       -5.0 13.858
vis        0.0 14.571
doy        0.0 14.567
> 
> cat("--- fda and mda with earth -----------------------------------\n")
--- fda and mda with earth -----------------------------------
> 
> am <- fda(Species ~ ., data=iris, method=mars, degree=1, keepxy=TRUE)
> printh(am)
===am 
Call:
fda(formula = Species ~ ., data = iris, method = mars, degree = 1, 
    keepxy = TRUE)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 95.31 100.00 

Training Misclassification Error: 0.02 ( N = 150 )
> a <- fda(Species ~ ., data=iris, method=earth, degree=1, keepxy=TRUE)
> printh(a)
===a 
Call:
fda(formula = Species ~ ., data = iris, method = earth, degree = 1, 
    keepxy = TRUE)

Dimension: 2 

Percent Between-Group Variance Explained:
    v1     v2 
 92.84 100.00 

Training Misclassification Error: 0.02667 ( N = 150 )
> printh(confusion(a))
===confusion(a) 
            true
predicted    setosa versicolor virginica
  setosa         50          0         0
  versicolor      0         49         3
  virginica       0          1        47
attr(,"error")
[1] 0.02666667
> if (PLOT) {
+     par(mar=c(3, 3, 2, .5))  # small margins and text to pack figs in
+     par(mgp=c(1.6, 0.6, 0))  # flatten axis elements
+     par(oma=c(0,0,4,0))      # make space for caption
+     layout(rbind(c(1,1,0,0), c(2,3,4,5), c(6,7,8,9)), heights=c(2,1,1))
+     plot(a)
+     plotmo(a$fit, nresponse=1, ylim=c(-1.5,1.5), clip=FALSE, do.par=FALSE)
+     plotmo(a$fit, nresponse=2, ylim=c(-1.5,1.5), clip=FALSE, do.par=FALSE)
+     mtext("fda test", outer=TRUE, font=2, line=1.5, cex=1)
+ }

 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3


 grid:    Sepal.Length Sepal.Width Petal.Length Petal.Width
                   5.8           3         4.35         1.3

> 
> data(glass)
> set.seed(123)
> samp <- sample(c(1:214), size=100, replace=FALSE)
> glass.train <- glass[samp,]
> glass.test <- glass[-samp,]
> am <- mda(Type ~ ., data=glass.train, method=mars,  keepxy=TRUE, degree=2)
> a <-  mda(Type ~ ., data=glass.train, method=earth, keepxy=TRUE, degree=2, keep.fitted=TRUE)
> printh(am)
===am 
Call:
mda(formula = Type ~ ., data = glass.train, method = mars, keepxy = TRUE, 
    degree = 2)

Dimension: 10 

Percent Between-Group Variance Explained:
    v1     v2     v3     v4     v5     v6     v7     v8     v9    v10 
 54.22  83.23  89.89  93.80  96.18  98.10  99.06  99.87 100.00 100.00 

Training Misclassification Error: 0.28 ( N = 100 )

Deviance: 126.543 
> printh(a)
===a 
Call:
mda(formula = Type ~ ., data = glass.train, method = earth, keep.fitted = TRUE, 
    keepxy = TRUE, degree = 2)

Dimension: 11 

Percent Between-Group Variance Explained:
    v1     v2     v3     v4     v5     v6     v7     v8     v9    v10    v11 
 64.06  84.61  91.10  95.24  96.82  97.86  98.74  99.33  99.74  99.88 100.00 

Training Misclassification Error: 0.24 ( N = 100 )

Deviance: 163.766 
> cat("mda with mars  ", attr(confusion(am), "error"), "\n")
mda with mars   0.28 
> cat("mda with earth ", attr(confusion(a),  "error"), "\n")
mda with earth  0.24 
> if (PLOT) {
+     plot(a$fit, caption="mda on glass data")
+     plotmo(a$fit, nresponse=9, clip=FALSE, ylim=NA, caption="mda on glass data")
+ }

 grid:    RI     Na  Mg    Al    Si     K   Ca Ba Fe
     1.51762 13.235 3.5 1.335 72.85 0.545 8.54  0  0

> 
> cat("\n---- update and keepxy, formula interface --------------------------\n")

---- update and keepxy, formula interface --------------------------
> 
> new.trees <- trees + c(1,2,3,4)
> new.trees <- new.trees[, -c(20:23)]
> a.formula <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = trees)
> cat("\nupdate(a, trace=1)\n")

update(a, trace=1)
> a.formula.1update <- update(a.formula, trace=1)
update.earth: using 31 by 3 data argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Skipped forward pass
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.962 RSq 0.9757 
> a.formula.1  <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = trees)
> check.models.equal(a.formula.1update, a.formula.1, msg="a1update a1")
check.models.equal identical: a1update a1

> 
> cat("\nupdate(a.formula, data=new.trees, trace=1)\n")

update(a.formula, data=new.trees, trace=1)
> a.formula.2update <- update(a.formula, data=new.trees, trace=1)
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8, 10, 12
Reached delta RSq threshold (DeltaRSq 8.77394e-05 < 0.001) at 11 terms
After forward pass GRSq 0.71 RSq 0.9369
Prune method "backward" penalty 2 nprune 8: selected 4 of 8 terms, and 2 of 2 predictors
After backward pass GRSq 0.883 RSq 0.9251 
> a.formula.2  <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = new.trees)
> check.models.equal(a.formula.2update, a.formula.2, msg="a2update a2")
check.models.equal identical: a2update a2

> 
> cat("\nupdate(a.formula, wp=2, trace=1)\n")

update(a.formula, wp=2, trace=1)
> a.formula.3update <- update(a.formula, wp=2, trace=1)
update.earth: using 31 by 3 data argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8
Reached delta RSq threshold (DeltaRSq 0.000280038 < 0.001) at 7 terms
After forward pass GRSq 0.9372 RSq 0.9774
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.962 RSq 0.9757 
> a.formula.3  <- earth(Volume ~ ., subset=rep(TRUE, nrow(trees)), data = trees, wp=2)
> check.models.equal(a.formula.3update, a.formula.3, msg="a3update a3")
check.models.equal identical: a3update a3

> 
> cat("\nupdate(a.formula, subset=subset.new, trace=1)\n")

update(a.formula, subset=subset.new, trace=1)
> subset.new <- rep(TRUE, nrow(trees))
> subset.new[1:4] = FALSE
> a.formula.4update <- update(a.formula, subset=subset.new, trace=1)
update.earth: using 31 by 3 data argument from original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6
Reached delta RSq threshold (DeltaRSq 0.000205816 < 0.001) at 5 terms
After forward pass GRSq 0.925 RSq 0.9716
Prune method "backward" penalty 2 nprune 5: selected 4 of 5 terms, and 2 of 2 predictors
After backward pass GRSq 0.9474 RSq 0.9689 
> a.formula.4  <- earth(Volume ~ ., data = trees, subset=subset.new)
> check.models.equal(a.formula.4update, a.formula.4, msg="a4update a4")
check.models.equal identical: a4update a4

> 
> # now use keepxy=TRUE
> 
> a.formula <- earth(Volume ~ ., wp=1, data = trees, keepxy=TRUE)
> 
> cat("\nupdate(a.formula, trace=1)\n")

update(a.formula, trace=1)
> a.formula.5update <- update(a.formula, trace=1)
update.earth: using 31 by 3 data saved by keepxy in original call to earth
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Skipped forward pass
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.962 RSq 0.9757 
> a.formula.5  <- earth(Volume ~ ., wp=1, data = trees, keepxy=TRUE)
> check.models.equal(a.formula.5update, a.formula.5, msg="a5update a5")
check.models.equal identical: a5update a5

> 
> cat("\nupdate(a.formula, data=new.trees, trace=1)\n")

update(a.formula, data=new.trees, trace=1)
> a.formula.6update <- update(a.formula, data=new.trees, trace=1)
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8, 10, 12
Reached delta RSq threshold (DeltaRSq 8.77394e-05 < 0.001) at 11 terms
After forward pass GRSq 0.71 RSq 0.9369
Prune method "backward" penalty 2 nprune 8: selected 4 of 8 terms, and 2 of 2 predictors
After backward pass GRSq 0.883 RSq 0.9251 
> a.formula.6  <- earth(Volume ~ ., wp=1, data = new.trees, keepxy=TRUE)
> check.models.equal(a.formula.6update, a.formula.6, msg="a6update a6")
check.models.equal identical: a6update a6

> 
> cat("\nupdate(a.formula, wp=2, trace=1)\n")

update(a.formula, wp=2, trace=1)
> a.formula.7update <- update(a.formula, wp=2, trace=1)
update.earth: using 31 by 3 data saved by keepxy in original call to earth
x is a 31 by 2 matrix: 1=Girth, 2=Height
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4, 6, 8
Reached delta RSq threshold (DeltaRSq 0.000280038 < 0.001) at 7 terms
After forward pass GRSq 0.9372 RSq 0.9774
Prune method "backward" penalty 2 nprune 6: selected 4 of 6 terms, and 2 of 2 predictors
After backward pass GRSq 0.962 RSq 0.9757 
> a.formula.7  <- earth(Volume ~ ., wp=2, data = trees, keepxy=TRUE)
> check.models.equal(a.formula.7update, a.formula.7, msg="a7update a7")
check.models.equal identical: a7update a7

> 
> cat("\n----- update and keepxy, matrix interface--------------------------\n")

----- update and keepxy, matrix interface--------------------------
> 
> Volume <- trees$Volume
> x <- cbind(trees$Height, trees$Volume)
> colnames(x) <- c("Height", "Volume")
> 
> new.x <- cbind(new.trees$Height, new.trees$Volume)
> colnames(new.x) <- c("Height", "Volume")
> 
> a <- earth(x, Volume, subset=rep(TRUE, nrow(trees)))
> cat("\nupdate(a, trace=1)\n")

update(a, trace=1)
> a1update <- update(a, trace=1)
update.earth: using 31 by 2 x argument from original call to earth
update.earth: using 31 by 1 y argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Height, 2=Volume
y is a 31 by 1 matrix: 1=Volume
Skipped forward pass
Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
> a1  <- earth(x, Volume, subset=rep(TRUE, nrow(trees)))
> check.models.equal(a1update, a1, msg="a1update a1")
check.models.equal identical: a1update a1

> 
> cat("\nupdate(a, x=new.x, trace=1)\n")

update(a, x=new.x, trace=1)
> a2update <- update(a, x=new.x, trace=1)
update.earth: using 31 by 1 y argument from original call to earth
update.earth: using 31 by 1 subset argument from original call to earth
x is a 31 by 2 matrix: 1=Height, 2=Volume
y is a 31 by 1 matrix: 1=Volume
Forward pass term 1, 2, 4
Reached delta RSq threshold (DeltaRSq 0.000269988 < 0.001) at 3 terms
After forward pass GRSq 0.9919 RSq 0.9956
Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.9938 RSq 0.9954 
> a2  <- earth(new.x, Volume, subset=rep(TRUE, nrow(trees)))
> check.models.equal(a2update, a2, msg="a2update a2")
check.models.equal identical: a2update a2

> 
> cat("\nupdate(a, wp=2, trace=0)\n")

update(a, wp=2, trace=0)
> a3update <- update(a, wp=2, trace=0)
> a3  <- earth(x, Volume, subset=rep(TRUE, nrow(trees)), wp=2)
> check.models.equal(a3update, a3, msg="a3update a3")
check.models.equal identical: a3update a3

> 
> cat("\nupdate(a, subset=subset.new, trace=4)\n")

update(a, subset=subset.new, trace=4)
> subset.new <- rep(TRUE, nrow(trees))
> subset.new[1:4] = FALSE
> a4update <- update(a, subset=subset.new, trace=4)
update.earth: using 31 by 2 x argument from original call to earth
update.earth: using 31 by 1 y argument from original call to earth
Call: earth(x=x, y=Volume, subset=subset.new, trace=4)
x is a 31 by 2 matrix: 1=Height, 2=Volume
First few rows of x are
     Height Volume
[1,]     70   10.3
[2,]     65   10.3
[3,]     63   10.2
[4,]     72   16.4
[5,]     81   18.8
[6,]     83   19.7
y is a 31 by 1 matrix: 1=Volume
First few rows of y are
     Volume
[1,]   10.3
[2,]   10.3
[3,]   10.2
[4,]   16.4
[5,]   18.8
[6,]   19.7
Forward pass: minspan 4 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      1.0000 1.0000            1    2       Volume        15.6< 2       

Reached max RSq (RSq 1 > 0.999) at 3 terms
After forward pass GRSq 1 RSq 1
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
> a4  <- earth(x, Volume, subset=subset.new)
> check.models.equal(a4update, a4, msg="a4update a4")
check.models.equal identical: a4update a4

> 
> # now use keepxy=TRUE
> 
> a <- earth(x, Volume, wp=1, keepxy=TRUE)
> 
> cat("\nupdate(a, trace=4)\n")

update(a, trace=4)
> a5update <- update(a, trace=4)
update.earth: using 31 by 2 x saved by keepxy in original call to earth
update.earth: using 31 by 1 y saved by keepxy in original call to earth
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
Call: earth(x=structure(c(70, 65, 63, 72, 81, 83, 66, 75, 80, 75, 
      79, 76, 76, 69, 75, 74, 85, 86, 71, 64, 78, 80, 74, 72, 77, 81, 
      82, 80, 80, 80, 87, 10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6, 
      18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 33.8, 27.4, 
      25.7, 24.9, 34.5, 31.7, 36.3, 38.3, 42.6, 55.4, 55.7, 58.3, 51.5, 
      51, 77), .Dim=c(31L, 2L), .Dimnames=list(NULL, c("Height", 
      "Volume"))), y=structure(c(10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 
      15.6, 18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 33.8, ...
x is a 31 by 2 matrix: 1=Height, 2=Volume
First few rows of x are
     Height Volume
[1,]     70   10.3
[2,]     65   10.3
[3,]     63   10.2
[4,]     72   16.4
[5,]     81   18.8
[6,]     83   19.7
y is a 31 by 1 matrix: 1=Volume
First few rows of y are
     Volume
[1,]   10.3
[2,]   10.3
[3,]   10.2
[4,]   16.4
[5,]   18.8
[6,]   19.7
Skipped forward pass
Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 2 predictors
After backward pass GRSq 1 RSq 1 
> a5  <- earth(x, Volume, wp=1, keepxy=TRUE)
> check.models.equal(a5update, a5, msg="a5update a5")
check.models.equal identical: a5update a5

> 
> cat("\nupdate(a, x=new.x, trace=4)\n")

update(a, x=new.x, trace=4)
> a6update <- update(a, x=new.x, trace=4)
update.earth: using 31 by 1 y saved by keepxy in original call to earth
update.earth: using 1 by 1 wp saved by keepxy in original call to earth
Call: earth(x=new.x, y=structure(c(10.3, 10.3, 10.2, 16.4, 18.8, 
      19.7, 15.6, 18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 
      33.8, 27.4, 25.7, 24.9, 34.5, 31.7, 36.3, 38.3, 42.6, 55.4, 55.7, 
      58.3, 51.5, 51, 77), .Dim=structure(c(31L, 1L), .Names=c("nrow", 
      "ncol")), .Dimnames=list(NULL, "Volume")), wp=1, trace=4, 
      keepxy=TRUE)
x is a 31 by 2 matrix: 1=Height, 2=Volume
First few rows of x are
     Height Volume
[1,]     74   13.3
[2,]     66   14.3
[3,]     65   11.2
[4,]     75   18.4
[5,]     85   21.8
[6,]     84   23.7
y is a 31 by 1 matrix: 1=Volume
First few rows of y are
     Volume
[1,]   10.3
[2,]   10.3
[3,]   10.2
[4,]   16.4
[5,]   18.8
[6,]   19.7
Forward pass: minspan 4 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.9938 0.9954       0.9954    2       Volume        36.8  2   3   
4      0.9919 0.9956      0.00027    1       Height          75  4   5   reject term

Reached delta RSq threshold (DeltaRSq 0.000269988 < 0.001) at 3 terms
After forward pass GRSq 0.9919 RSq 0.9956
Forward pass complete: 3 terms

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.8057  0.8307     0.8057      1  1 2
chosen    3      0.9938  0.9954     0.1882      1  1 2 3

Prune method "backward" penalty 2 nprune 3: selected 3 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.9938 RSq 0.9954 
> a6  <- earth(new.x, Volume, wp=1, keepxy=TRUE)
> check.models.equal(a6update, a6, msg="\"allowed\" function a6update a6")
check.models.equal identical: "allowed" function a6update a6

> 
> cat("\nupdate(a, wp=2)\n")

update(a, wp=2)
> a7update <- update(a, wp=2)
> a7  <- earth(x, Volume, wp=2, keepxy=TRUE)
> check.models.equal(a7update, a7, msg="\"allowed\" function a7update a7")
check.models.equal identical: "allowed" function a7update a7

> 
> cat("--- \"allowed\" argument -----------------\n")
--- "allowed" argument -----------------
> 
> example1  <- function(degree, pred, parents)
+ {
+     pred != 2  # disallow predictor 2, which is "Height"
+ }
> a1 <- earth(Volume ~ ., data = trees, allowed = example1)
> printh(summary(a1))
===summary(a1) 
Call: earth(formula=Volume~., data=trees, allowed=example1)

            coefficients
(Intercept)    29.748216
h(Girth-14)     6.648628
h(14-Girth)    -3.513957

Selected 3 of 3 terms, and 1 of 2 predictors 
Importance: Girth, Height-unused
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 14.37228    RSS 313.4085    GRSq 0.9485251    RSq 0.9613366
> 
> example1a  <- function(degree, pred, parents, namesx)
+ {
+     namesx[pred] != "Height"  # disallow "Height"
+ }
> a1a <- earth(Volume ~ ., data = trees, allowed = example1a)
> check.models.equal(a1, a1a, msg="\"allowed\" function a1 a1a")
check.models.equal identical: "allowed" function a1 a1a

> 
> iheight <- 0
> example1b  <- function(degree, pred, parents, namesx, first)
+ {
+     if (first) {
+         iheight <<- which(namesx == "Height") # note use of <<- not <-
+         if (length(iheight) != 1)
+             stop("could not find Height in ", paste(namesx, collapse=" "))
+     }
+     pred != iheight
+ }
> a1b <- earth(Volume ~ ., data = trees, allowed = example1b)
> check.models.equal(a1, a1a, msg="\"allowed\" function a1 a1b")
check.models.equal identical: "allowed" function a1 a1b

> 
> example2 <- function(degree, pred, parents)
+ {
+     # disallow humidity in terms of degree > 1
+     # 3 is the "humidity" column in the input matrix
+     if (degree > 1 && (pred == 3 || parents[3]))
+         return(FALSE)
+     TRUE
+ }
> a2 <- earth(O3 ~ ., data = ozone1, degree = 2, allowed = example2)
> printh(summary(a2))
===summary(a2) 
Call: earth(formula=O3~., data=ozone1, degree=2, allowed=example2)

                         coefficients
(Intercept)                12.0269062
h(vh-5740)                  0.0219633
h(5740-vh)                 -0.0205129
h(temp-58)                  0.3462684
h(ibh-1069)                -0.0013262
h(dpg-11)                  -0.0735542
h(11-dpg)                  -0.0852630
h(80-vis)                   0.0684005
h(doy-89)                   0.0569436
h(89-doy)                  -0.1059973
h(doy-159)                 -0.0967263
h(vh-5740) * h(dpg-54)     -0.0032672
h(wind-6) * h(1069-ibh)    -0.0072612
h(ibh-1069) * h(doy-278)    0.0000133
h(ibh-1069) * h(278-doy)    0.0000053

Selected 15 of 20 terms, and 7 of 9 predictors 
Importance: temp, doy, ibh, dpg, vh, vis, wind, humidity-unused, ...
Number of terms at each degree of interaction: 1 10 4
GCV 15.04844    RSS 3941.596    GRSq 0.7662402    RSq 0.8133308
> example3 <- function(degree, pred, parents)
+ {
+     # allow only humidity and temp in terms of degree > 1
+     # 3 and 4 are the "humidity" and "temp" columns
+     allowed.set = c(3,4)
+     if (degree > 1 && (all(allowed.set != pred) || any(parents[-allowed.set])))
+         return(FALSE)
+     TRUE
+ }
> a3 <- earth(O3 ~ ., data = ozone1, degree = 2, allowed = example3)
> printh(summary(a3))
===summary(a3) 
Call: earth(formula=O3~., data=ozone1, degree=2, allowed=example3)

                            coefficients
(Intercept)                   12.0804175
h(5860-vh)                    -0.0130080
h(wind-6)                     -0.5820960
h(temp-58)                     0.2576218
h(1069-ibh)                   -0.0028695
h(dpg-11)                     -0.1012778
h(11-dpg)                     -0.0653277
h(ibt-116)                     0.0448906
h(200-vis)                     0.0180651
h(doy-89)                      0.0423010
h(89-doy)                     -0.1111172
h(doy-151)                    -0.0797847
h(56-humidity) * h(temp-58)   -0.0167523

Selected 13 of 20 terms, and 9 of 9 predictors 
Importance: temp, vis, doy, dpg, humidity, vh, ibh, ibt, wind
Number of terms at each degree of interaction: 1 11 1
GCV 13.82952    RSS 3746.583    GRSq 0.7851747    RSq 0.8225664
> 
> ihumidity <- 0
> itemp <- 0
> example3a  <- function(degree, pred, parents, namesx, first)
+ {
+     if (first) {
+         ihumidity <<- which(namesx == "humidity") # note use of <<- not <-
+         if (length(ihumidity) != 1)
+             stop("could not find humidity in ", paste(namesx, collapse=" "))
+         itemp <<- which(namesx == "temp") # note use of <<- not <-
+         if (length(itemp) != 1)
+             stop("could not find temp in ", paste(namesx, collapse=" "))
+     }
+     # allow only humidity and temp in terms of degree > 1
+     allowed.set = c(ihumidity, itemp)
+     if (degree > 1 &&
+            (all(allowed.set != pred) || any(parents[-allowed.set])))
+         return(FALSE)
+     TRUE
+ }
> a3a <- earth(O3 ~ ., data = ozone1, degree = 2, allowed = example3)
> check.models.equal(a3, a3a, msg="\"allowed\" function a3 a3a")
check.models.equal identical: "allowed" function a3 a3a

> 
> # "allowed" function checks, these check error handling by forcing an error
> 
> cat("Expect an error here ")
Expect an error here > z <- try(earth(Volume ~ ., data = trees, allowed = 99))
Error in check.allowed.arg(allowed) : 
  your "allowed" argument is not a function
> if (class(z) != "try-error")
+     stop("test failed")
> 
> example7  <- function(degree, pred) pred!=2
> cat("Expect an error here ")
Expect an error here > z <- try(earth(Volume ~ ., data = trees, allowed = example7))
Error : your "allowed" function does not have the correct number of arguments
  The "allowed" function needs the following arguments (but namesx and first are optional):
      degree pred parents namesx first
> if (class(z) != "try-error")
+     stop("test failed")
> 
> example8  <- function(degree, pred, parents99) pred!=2
> cat("Expect an error here ")
Expect an error here > z <- try(earth(Volume ~ ., data = trees, allowed = example8))
Error :   The "allowed" function needs the following arguments (but namesx and first are optional):
      degree pred parents namesx first
  You have:
      degree pred parents99
> if (class(z) != "try-error")
+     stop("test failed")
> 
> example9  <- function(degree, pred, parents, namesx99) pred!=2
> cat("Expect an error here ")
Expect an error here > z <- try(earth(Volume ~ ., data = trees, allowed = example9))
Error :   The "allowed" function needs the following arguments (but namesx and first are optional):
      degree pred parents namesx first
  You have:
      degree pred parents namesx99
> if (class(z) != "try-error")
+     stop("test failed")
> 
> cat("--- beta cache -------------------------\n")
--- beta cache -------------------------
> 
> a1 <- earth(O3 ~ ., data = ozone1, degree = 3)
> a2 <- earth(O3 ~ ., data = ozone1, degree = 3, Use.beta.cache=FALSE)
> a1$call <- NULL
> a2$call <- NULL
> stopifnot(identical(a1, a2))
> 
> cat("--- test \"call\" printing in earth.default and summary.earth ---\n")
--- test "call" printing in earth.default and summary.earth ---
> # we want to make sure that long x or y aren't printed but short ones are
> 
> x = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0)
> 
> y = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+       0,1,2,3,4,5,6,7,8,9,0)
> 
> a <- earth(x = x, y=y, trace=5)
Call: earth(x=x, y=y, trace=5)
x is a 101 by 1 matrix: 1=x
Contents of x are
       x
  [1,] 0
  [2,] 1
  [3,] 2
  [4,] 3
  [5,] 4
  [6,] 5
  [7,] 6
  [8,] 7
  [9,] 8
 [10,] 9
 [11,] 0
 [12,] 1
 [13,] 2
 [14,] 3
 [15,] 4
 [16,] 5
 [17,] 6
 [18,] 7
 [19,] 8
 [20,] 9
 [21,] 0
 [22,] 1
 [23,] 2
 [24,] 3
 [25,] 4
 [26,] 5
 [27,] 6
 [28,] 7
 [29,] 8
 [30,] 9
 [31,] 0
 [32,] 1
 [33,] 2
 [34,] 3
 [35,] 4
 [36,] 5
 [37,] 6
 [38,] 7
 [39,] 8
 [40,] 9
 [41,] 0
 [42,] 1
 [43,] 2
 [44,] 3
 [45,] 4
 [46,] 5
 [47,] 6
 [48,] 7
 [49,] 8
 [50,] 9
 [51,] 0
 [52,] 1
 [53,] 2
 [54,] 3
 [55,] 4
 [56,] 5
 [57,] 6
 [58,] 7
 [59,] 8
 [60,] 9
 [61,] 0
 [62,] 1
 [63,] 2
 [64,] 3
 [65,] 4
 [66,] 5
 [67,] 6
 [68,] 7
 [69,] 8
 [70,] 9
 [71,] 0
 [72,] 1
 [73,] 2
 [74,] 3
 [75,] 4
 [76,] 5
 [77,] 6
 [78,] 7
 [79,] 8
 [80,] 9
 [81,] 0
 [82,] 1
 [83,] 2
 [84,] 3
 [85,] 4
 [86,] 5
 [87,] 6
 [88,] 7
 [89,] 8
 [90,] 9
 [91,] 0
 [92,] 1
 [93,] 2
 [94,] 3
 [95,] 4
 [96,] 5
 [97,] 6
 [98,] 7
 [99,] 8
[100,] 9
[101,] 0
y is a 101 by 1 matrix: 1=y
Contents of y are
       y
  [1,] 0
  [2,] 1
  [3,] 2
  [4,] 3
  [5,] 4
  [6,] 5
  [7,] 6
  [8,] 7
  [9,] 8
 [10,] 9
 [11,] 0
 [12,] 1
 [13,] 2
 [14,] 3
 [15,] 4
 [16,] 5
 [17,] 6
 [18,] 7
 [19,] 8
 [20,] 9
 [21,] 0
 [22,] 1
 [23,] 2
 [24,] 3
 [25,] 4
 [26,] 5
 [27,] 6
 [28,] 7
 [29,] 8
 [30,] 9
 [31,] 0
 [32,] 1
 [33,] 2
 [34,] 3
 [35,] 4
 [36,] 5
 [37,] 6
 [38,] 7
 [39,] 8
 [40,] 9
 [41,] 0
 [42,] 1
 [43,] 2
 [44,] 3
 [45,] 4
 [46,] 5
 [47,] 6
 [48,] 7
 [49,] 8
 [50,] 9
 [51,] 0
 [52,] 1
 [53,] 2
 [54,] 3
 [55,] 4
 [56,] 5
 [57,] 6
 [58,] 7
 [59,] 8
 [60,] 9
 [61,] 0
 [62,] 1
 [63,] 2
 [64,] 3
 [65,] 4
 [66,] 5
 [67,] 6
 [68,] 7
 [69,] 8
 [70,] 9
 [71,] 0
 [72,] 1
 [73,] 2
 [74,] 3
 [75,] 4
 [76,] 5
 [77,] 6
 [78,] 7
 [79,] 8
 [80,] 9
 [81,] 0
 [82,] 1
 [83,] 2
 [84,] 3
 [85,] 4
 [86,] 5
 [87,] 6
 [88,] 7
 [89,] 8
 [90,] 9
 [91,] 0
 [92,] 1
 [93,] 2
 [94,] 3
 [95,] 4
 [96,] 5
 [97,] 6
 [98,] 7
 [99,] 8
[100,] 9
[101,] 0
earth.c version 3.2-1
BetaCache 3.53 kB
Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      1.0000 1.0000            1    1            x           0< 2       

Reached max RSq (RSq 1 > 0.999) at 3 terms
After forward pass GRSq 1 RSq 1
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> 
> a.longx  <- earth(x = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   y=y,
+                   trace=4)
Call: earth(x="[102, 1]-too-long-to-display", y=y, trace=4)
x is a 101 by 1 matrix: 1=x
First few rows of x are
     x
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5
y is a 101 by 1 matrix: 1=y
First few rows of y are
     y
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5
Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      1.0000 1.0000            1    1            x           0< 2       

Reached max RSq (RSq 1 > 0.999) at 3 terms
After forward pass GRSq 1 RSq 1
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> 
> a.longy  <- earth(x = x,
+                   y = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   trace=4)
Call: earth(x=x, y="[102, 1]-too-long-to-display", trace=4)
x is a 101 by 1 matrix: 1=x
First few rows of x are
     x
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5
y is a 101 by 1 matrix: 1=y
First few rows of y are
     y
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5
Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      1.0000 1.0000            1    1            x           0< 2       

Reached max RSq (RSq 1 > 0.999) at 3 terms
After forward pass GRSq 1 RSq 1
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> 
> a.longxy <- earth(x = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   y = c(0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
+                         0,1,2,3,4,5,6,7,8,9,0),
+                   trace=4)
Call: earth(x="[102, 1]-too-long-to-display", y="[102, 1]-too-long-to-display", 
      trace=4)
x is a 101 by 1 matrix: 1=x
First few rows of x are
     x
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5
y is a 101 by 1 matrix: 1=y
First few rows of y are
     y
[1,] 0
[2,] 1
[3,] 2
[4,] 3
[5,] 4
[6,] 5
Forward pass: minspan 4 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      1.0000 1.0000            1    1            x           0< 2       

Reached max RSq (RSq 1 > 0.999) at 3 terms
After forward pass GRSq 1 RSq 1
Forward pass complete: 3 terms (2 terms used)

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
chosen    2      1.0000  1.0000     1.0000      1  1 2

Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 1 RSq 1 
> printh(summary(a))
===summary(a) 
Call: earth(x=x, y=y, trace=5)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 9.44066e-29    RSS 8.97704e-27    GRSq 1    RSq 1
> printh(summary(a.longx))
===summary(a.longx) 
Call: earth(x="[102, 1]-too-long-to-display", y=y, trace=4)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 9.44066e-29    RSS 8.97704e-27    GRSq 1    RSq 1
> printh(summary(a.longy))
===summary(a.longy) 
Call: earth(x=x, y="[102, 1]-too-long-to-display", trace=4)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 9.44066e-29    RSS 8.97704e-27    GRSq 1    RSq 1
> printh(summary(a.longxy))
===summary(a.longxy) 
Call: earth(x="[102, 1]-too-long-to-display", y="[102, 1]-too-long-to-display", 
      trace=4)

             coefficients
(Intercept) -7.070164e-16
x            1.000000e+00

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 9.44066e-29    RSS 8.97704e-27    GRSq 1    RSq 1
> printh(summary(a.longxy, style="bf"))
===summary(a.longxy, style = "bf") 
Call: earth(x="[102, 1]-too-long-to-display", y="[102, 1]-too-long-to-display", 
      trace=4)

y =
  -7.070164e-16
  + 1 * bf1

   bf1  x

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: x
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 9.44066e-29    RSS 8.97704e-27    GRSq 1    RSq 1
> 
> cat("--- factors with x,y interface -------------------------\n")
--- factors with x,y interface -------------------------
> # this also tests for integer variables in the input matrix
> data(etitanic)
> attach(etitanic)
> a1 <- earth(pclass, sex, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 2 matrix: 1=2nd, 2=3rd
y is a 1046 by 1 matrix: 1=sex
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0133 0.0180      0.01797    2          3rd           0< 2       
4      0.0116 0.0210     0.003025    1          2nd           0< 3       
6      0.0068 0.0210            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.006792 RSq 0.021
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 2 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.01326 RSq 0.01797 
> printh(summary(a1))
===summary(a1) 
Call: earth(x=pclass, y=sex, trace=2, degree=2)

            coefficients
(Intercept)    0.5669725
3rd            0.1296343

Selected 2 of 3 terms, and 1 of 2 predictors 
Importance: 3rd, 2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> printh(summary(a1, style="bf"))
===summary(a1, style = "bf") 
Call: earth(x=pclass, y=sex, trace=2, degree=2)

sex =
  0.5669725
  + 0.1296343 * bf1

   bf1  3rd

Selected 2 of 3 terms, and 1 of 2 predictors 
Importance: 3rd, 2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> if (PLOT)
+     plot(a1)
> a2 <- earth(sex, pclass, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 1 matrix: 1=sex
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0073 0.0120      0.01202    1          sex           0< 2       
4      0.0025 0.0120            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 3 terms
After forward pass GRSq 0.002501 RSq 0.01202
Forward pass complete: 3 terms (2 terms used)
Prune method "backward" penalty 3 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 0.00728 RSq 0.01202 
> printh(summary(a2))
===summary(a2) 
Call: earth(x=sex, y=pclass, trace=2, degree=2)

                   1st         2nd       3rd
(Intercept)  0.3427835  0.26546392 0.3917526
sex         -0.1133002 -0.02534234 0.1386426

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: sex
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq          RSq
1st 0.1961073 203.7578  0.010414990 0.0151441824
2nd 0.1883694 195.7180 -0.003997793 0.0008002778
3rd 0.2467207 256.3457  0.013257223 0.0179728324
All 0.6311974 655.8215  0.007279765 0.0120239411
> if (PLOT)
+     plot(a2)
> a3 <- earth(pclass, age, degree=2, trace=2)        # x=unordered y=numeric
x is a 1046 by 2 matrix: 1=2nd, 2=3rd
y is a 1046 by 1 matrix: 1=age
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.1094 0.1136       0.1136    2          3rd           0< 2       
4      0.1640 0.1720      0.05838    1          2nd           0< 3       
6      0.1600 0.1720            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.16 RSq 0.172
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.164 RSq 0.172 
> printh(summary(a3))
===summary(a3) 
Call: earth(x=pclass, y=age, trace=2, degree=2)

            coefficients
(Intercept)    39.159918
2nd            -9.653213
3rd           -14.343551

Selected 3 of 3 terms, and 2 of 2 predictors 
Importance: 3rd, 2nd
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 173.8417    RSS 179758.3    GRSq 0.1640128    RSq 0.1719935
> if (PLOT)
+     plot(a3)
> a4 <- earth(age, pclass, degree=2, trace=2)        # x=numeric y=unordered
x is a 1046 by 1 matrix: 1=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0893 0.0980      0.09797    1          age          26  2   3   
4      0.0891 0.1021     0.004178    1          age          55  4       
6      0.0881 0.1055     0.003357    1          age          16  5       
8      0.0849 0.1067      0.00116    1          age          44  6       
10     0.0813 0.1075    0.0008104    1          age          48  7       reject term

Reached delta RSq threshold (DeltaRSq 0.000810417 < 0.001) at 9 terms
After forward pass GRSq 0.08129 RSq 0.1075
Forward pass complete: 9 terms (6 terms used)
Prune method "backward" penalty 3 nprune 6: selected 2 of 6 terms, and 1 of 1 predictors
After backward pass GRSq 0.09302 RSq 0.09735 
> printh(summary(a4))
===summary(a4) 
Call: earth(x=age, y=pclass, trace=2, degree=2)

                   1st           2nd         3rd
(Intercept) 0.06439450  0.2563335580  0.67927195
h(age-16)   0.01388561 -0.0004566659 -0.01342895

Selected 2 of 6 terms, and 1 of 1 predictors 
Importance: age
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq        RSq
1st 0.1670033 173.5184  0.157277818 0.16130516
2nd 0.1884855 195.8387 -0.004616749 0.00018428
3rd 0.2211945 229.8237  0.115347486 0.11957521
All 0.5766834 599.1808  0.093017132 0.09735157
> if (PLOT)
+     plot(a4)
> a5 <- earth(etitanic[,c(2:4)], pclass, degree=2, trace=2)  # x=mixed  y=unordered
x is a 1046 by 3 matrix: 1=survived, 2=sexmale, 3=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0893 0.0980      0.09797    3          age          26  2   3   
4      0.1500 0.1622       0.0642    1     survived           0< 4       
6      0.1557 0.1758      0.01364    3          age          16  5   6   4   
8      0.1603 0.1842     0.008445    2      sexmale           0< 7       4   
10     0.1631 0.1909     0.006652    2      sexmale           0< 8       
12     0.1616 0.1934     0.002532    3          age          56  9       
14     0.1598 0.1956     0.002142    2      sexmale           0< 10      2   
16     0.1532 0.1971      0.00157    3          age          55  11  12  10  
18     0.1497 0.1978    0.0006704    3          age          44  13      reject term

Reached delta RSq threshold (DeltaRSq 0.000670385 < 0.001) at 17 terms
After forward pass GRSq 0.1497 RSq 0.1978
Forward pass complete: 17 terms (12 terms used)
Prune method "backward" penalty 3 nprune 12: selected 9 of 12 terms, and 3 of 3 predictors
After backward pass GRSq 0.1631 RSq 0.1949 
> printh(summary(a5))
===summary(a5) 
Call: earth(x=etitanic[, c(2:4)], y=pclass, trace=2, degree=2)

                             1st          2nd         3rd
(Intercept)          -0.01985123  0.229009299  0.79084193
survived              0.36426631  0.158983782 -0.52325009
h(age-26)             0.01542210 -0.006911119 -0.00851098
h(26-age)            -0.00062287 -0.015746198  0.01636907
survived * sexmale   -0.08275489 -0.308771690  0.39152658
survived * h(16-age) -0.02134375  0.038966434 -0.01762268
sexmale * h(age-26)   0.00618934  0.007551127 -0.01374047
sexmale * h(age-55)  -0.02575309 -0.002002911  0.02775600
sexmale * h(55-age)   0.00185826  0.002877292 -0.00473556

Selected 9 of 12 terms, and 3 of 3 predictors 
Importance: age, survived, sexmale
Number of terms at each degree of interaction: 1 3 5

          GCV      RSS       GRSq        RSq
1st 0.1505645 151.2302 0.24023053 0.26903432
2nd 0.1845750 185.3911 0.01622629 0.05352236
3rd 0.1969663 197.8372 0.21224655 0.24211125
All 0.5321058 534.4585 0.16312688 0.19485376
> if (PLOT)
+     plot(a5)
> a6 <- earth(etitanic[,c(1,3,4,5,6)], survived, degree=2, trace=2)  # x=mixed y=unordered
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, 6=parch
y is a 1046 by 1 matrix: 1=survived
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.2860 0.2894       0.2894    3      sexmale           0< 2       
4      0.3297 0.3361      0.04669    2    pclass3rd           0< 3       
6      0.3588 0.3710      0.03488    4          age          16  4   5   2   
8      0.3962 0.4106      0.03954    1    pclass2nd           0< 6       2   
10     0.4143 0.4338       0.0232    5        sibsp           4  7   8   4   
12     0.4133 0.4383     0.004574    6        parch           1  9   10  
14     0.4150 0.4427      0.00437    2    pclass3rd           0< 11      2   
16     0.4116 0.4449     0.002169    5        sibsp           1  12  13  2   
18     0.4108 0.4469     0.002011    1    pclass2nd           0< 14      13  
20     0.4069 0.4487     0.001831    4          age          64  15  16  

Reached max number of terms 21
After forward pass GRSq 0.4069 RSq 0.4487
Forward pass complete: 21 terms (16 terms used)
Prune method "backward" penalty 3 nprune 16: selected 9 of 16 terms, and 6 of 6 predictors
After backward pass GRSq 0.4222 RSq 0.4441 
> printh(summary(a6))
===summary(a6) 
Call: earth(x=etitanic[, c(1, 3, 4, 5, 6)], y=survived, trace=2, 
      degree=2)

                       coefficients
(Intercept)              0.85375046
pclass3rd               -0.86859514
sexmale                 -0.59566715
h(64-age)                0.00352860
pclass2nd * sexmale     -0.15663098
pclass2nd * h(1-parch)  -0.12839750
pclass3rd * sexmale      0.23757830
pclass3rd * h(4-sibsp)   0.10407473
sexmale * h(16-age)      0.03649943

Selected 9 of 16 terms, and 6 of 6 predictors 
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch
Number of terms at each degree of interaction: 1 3 5
GCV 0.1398544    RSS 140.4728    GRSq 0.422183    RSq 0.4440888
> if (PLOT)
+     plot(a6)
> a7 <- earth(etitanic[,c(2,3,5,6)], etitanic[,c(1,4)], degree=2, trace=2)  # x=mixed y=mixed
x is a 1046 by 4 matrix: 1=survived, 2=sexmale, 3=sibsp, 4=parch
y is a 1046 by 4 matrix: 1=pclass1st, 2=pclass2nd, 3=pclass3rd, 4=age
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0813 0.0901      0.09011    4        parch           2  2   3   
4      0.1049 0.1219      0.03183    3        sibsp           1  4   5   
6      0.1068 0.1323      0.01034    4        parch           1  6   7   4   
8      0.1085 0.1381     0.005851    4        parch           3  8       
10     0.1093 0.1431     0.004932    3        sibsp           2  9       
12     0.1042 0.1465     0.003484    4        parch           1  10  11  5   
14     0.1024 0.1490     0.002449    2      sexmale           0< 12      3   
16     0.0997 0.1506     0.001629    1     survived           0< 13      4   
18     0.0971 0.1524     0.001744    1     survived           0< 14      10  
20     0.0902 0.1543     0.001933    3        sibsp           1  15  16  2   

Reached max number of terms 21
After forward pass GRSq 0.09017 RSq 0.1543
Forward pass complete: 21 terms (16 terms used)
Prune method "backward" penalty 3 nprune 16: selected 8 of 16 terms, and 2 of 4 predictors
After backward pass GRSq 0.1125 RSq 0.1419 
> printh(summary(a7))
===summary(a7) 
Call: earth(x=etitanic[, c(2, 3, 5, 6)], y=etitanic[, c(1, 4)], 
      trace=2, degree=2)

                          pclass1st   pclass2nd   pclass3rd        age
(Intercept)              0.36759244  0.34147958  0.29092798  22.822807
h(sibsp-1)              -0.10467262 -0.03174855  0.13642116 -13.226278
h(sibsp-2)              -0.04080832 -0.07667103  0.11747935   9.156604
h(parch-2)              -0.05834115 -0.02741839  0.08575954  18.747474
h(2-parch)              -0.04862108 -0.04762889  0.09624997   4.598584
h(parch-3)              -0.05044140 -0.12627113  0.17671253 -18.686121
h(sibsp-1) * h(parch-1)  0.05619704 -0.01433876 -0.04185828   3.419645
h(sibsp-1) * h(1-parch)  0.04891458  0.06481914 -0.11373372  11.180686

Selected 8 of 16 terms, and 2 of 4 predictors 
Importance: sibsp, parch, survived-unused, sexmale-unused
Number of terms at each degree of interaction: 1 5 2

                 GCV        RSS        GRSq        RSq
pclass1st   0.201372    203.250 -0.01614889 0.01759983
pclass2nd   0.190423    192.199 -0.01494384 0.01876486
pclass3rd   0.244868    247.152  0.02066653 0.05319252
age       184.489610 186210.381  0.11280797 0.14227373
All       185.126273 186852.982  0.11246009 0.14193740
> if (PLOT)
+     plot(a7)
> 
> cat("--- factors with formula interface -------------------------\n")
--- factors with formula interface -------------------------
> # these correspond to the models above (except a7 which is a multiple response model)
> a1f <- earth(sex ~ pclass, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 2 matrix: 1=pclass2nd, 2=pclass3rd
y is a 1046 by 1 matrix: 1=male
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0133 0.0180      0.01797    2    pclass3rd           0< 2       
4      0.0116 0.0210     0.003025    1    pclass2nd           0< 3       
6      0.0068 0.0210            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.006792 RSq 0.021
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 2 of 3 terms, and 1 of 2 predictors
After backward pass GRSq 0.01326 RSq 0.01797 
> printh(summary(a1f))
===summary(a1f) 
Call: earth(formula=sex~pclass, trace=2, degree=2)

            coefficients
(Intercept)    0.5669725
pclass3rd      0.1296343

Selected 2 of 3 terms, and 1 of 2 predictors 
Importance: pclass3rd, pclass2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> printh(summary(a1f, style="bf"))
===summary(a1f, style = "bf") 
Call: earth(formula=sex~pclass, trace=2, degree=2)

male =
  0.5669725
  + 0.1296343 * bf1

   bf1  pclass3rd

Selected 2 of 3 terms, and 1 of 2 predictors 
Importance: pclass3rd, pclass2nd-unused
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 0.2306901    RSS 239.6897    GRSq 0.01325722    RSq 0.01797283
> if (PLOT)
+     plot(a1f)
> a2f <- earth(pclass ~ sex, degree=2, trace=2)        # x=unordered y=unordered
x is a 1046 by 1 matrix: 1=sexmale
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0073 0.0120      0.01202    1      sexmale           0< 2       
4      0.0025 0.0120            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 3 terms
After forward pass GRSq 0.002501 RSq 0.01202
Forward pass complete: 3 terms (2 terms used)
Prune method "backward" penalty 3 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 0.00728 RSq 0.01202 
> printh(summary(a2f))
===summary(a2f) 
Call: earth(formula=pclass~sex, trace=2, degree=2)

                   1st         2nd       3rd
(Intercept)  0.3427835  0.26546392 0.3917526
sexmale     -0.1133002 -0.02534234 0.1386426

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: sexmale
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq          RSq
1st 0.1961073 203.7578  0.010414990 0.0151441824
2nd 0.1883694 195.7180 -0.003997793 0.0008002778
3rd 0.2467207 256.3457  0.013257223 0.0179728324
All 0.6311974 655.8215  0.007279765 0.0120239411
> if (PLOT)
+     plot(a2f)
> a3f <- earth(age ~ pclass, degree=2, trace=2)        # x=unordered y=numeric
x is a 1046 by 2 matrix: 1=pclass2nd, 2=pclass3rd
y is a 1046 by 1 matrix: 1=age
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.1094 0.1136       0.1136    2    pclass3rd           0< 2       
4      0.1640 0.1720      0.05838    1    pclass2nd           0< 3       
6      0.1600 0.1720            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.16 RSq 0.172
Forward pass complete: 5 terms (3 terms used)
Prune method "backward" penalty 3 nprune 3: selected 3 of 3 terms, and 2 of 2 predictors
After backward pass GRSq 0.164 RSq 0.172 
> printh(summary(a3f))
===summary(a3f) 
Call: earth(formula=age~pclass, trace=2, degree=2)

            coefficients
(Intercept)    39.159918
pclass2nd      -9.653213
pclass3rd     -14.343551

Selected 3 of 3 terms, and 2 of 2 predictors 
Importance: pclass3rd, pclass2nd
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 173.8417    RSS 179758.3    GRSq 0.1640128    RSq 0.1719935
> if (PLOT)
+     plot(a3f)
> a4f <- earth(pclass ~ age, degree=2, trace=2)        # x=numeric y=unordered
x is a 1046 by 1 matrix: 1=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 5 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0893 0.0980      0.09797    1          age          26  2   3   
4      0.0891 0.1021     0.004178    1          age          55  4       
6      0.0881 0.1055     0.003357    1          age          16  5       
8      0.0849 0.1067      0.00116    1          age          44  6       
10     0.0813 0.1075    0.0008104    1          age          48  7       reject term

Reached delta RSq threshold (DeltaRSq 0.000810417 < 0.001) at 9 terms
After forward pass GRSq 0.08129 RSq 0.1075
Forward pass complete: 9 terms (6 terms used)
Prune method "backward" penalty 3 nprune 6: selected 2 of 6 terms, and 1 of 1 predictors
After backward pass GRSq 0.09302 RSq 0.09735 
> printh(summary(a4f))
===summary(a4f) 
Call: earth(formula=pclass~age, trace=2, degree=2)

                   1st           2nd         3rd
(Intercept) 0.06439450  0.2563335580  0.67927195
h(age-16)   0.01388561 -0.0004566659 -0.01342895

Selected 2 of 6 terms, and 1 of 1 predictors 
Importance: age
Number of terms at each degree of interaction: 1 1 (additive model)

          GCV      RSS         GRSq        RSq
1st 0.1670033 173.5184  0.157277818 0.16130516
2nd 0.1884855 195.8387 -0.004616749 0.00018428
3rd 0.2211945 229.8237  0.115347486 0.11957521
All 0.5766834 599.1808  0.093017132 0.09735157
> if (PLOT)
+     plot(a4f)
> a5f <- earth(pclass ~ survived + sex + age, data=etitanic, degree=2, trace=2)  # x=mixed y=unordered
x is a 1046 by 3 matrix: 1=survived, 2=sexmale, 3=age
y is a 1046 by 3 matrix: 1=1st, 2=2nd, 3=3rd
Forward pass: minspan 6 endspan 8

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.0893 0.0980      0.09797    3          age          26  2   3   
4      0.1500 0.1622       0.0642    1     survived           0< 4       
6      0.1557 0.1758      0.01364    3          age          16  5   6   4   
8      0.1603 0.1842     0.008445    2      sexmale           0< 7       4   
10     0.1631 0.1909     0.006652    2      sexmale           0< 8       
12     0.1616 0.1934     0.002532    3          age          56  9       
14     0.1598 0.1956     0.002142    2      sexmale           0< 10      2   
16     0.1532 0.1971      0.00157    3          age          55  11  12  10  
18     0.1497 0.1978    0.0006704    3          age          44  13      reject term

Reached delta RSq threshold (DeltaRSq 0.000670385 < 0.001) at 17 terms
After forward pass GRSq 0.1497 RSq 0.1978
Forward pass complete: 17 terms (12 terms used)
Prune method "backward" penalty 3 nprune 12: selected 9 of 12 terms, and 3 of 3 predictors
After backward pass GRSq 0.1631 RSq 0.1949 
> printh(summary(a5f))
===summary(a5f) 
Call: earth(formula=pclass~survived+sex+age, data=etitanic, 
      trace=2, degree=2)

                             1st          2nd         3rd
(Intercept)          -0.01985123  0.229009299  0.79084193
survived              0.36426631  0.158983782 -0.52325009
h(age-26)             0.01542210 -0.006911119 -0.00851098
h(26-age)            -0.00062287 -0.015746198  0.01636907
survived * sexmale   -0.08275489 -0.308771690  0.39152658
survived * h(16-age) -0.02134375  0.038966434 -0.01762268
sexmale * h(age-26)   0.00618934  0.007551127 -0.01374047
sexmale * h(age-55)  -0.02575309 -0.002002911  0.02775600
sexmale * h(55-age)   0.00185826  0.002877292 -0.00473556

Selected 9 of 12 terms, and 3 of 3 predictors 
Importance: age, survived, sexmale
Number of terms at each degree of interaction: 1 3 5

          GCV      RSS       GRSq        RSq
1st 0.1505645 151.2302 0.24023053 0.26903432
2nd 0.1845750 185.3911 0.01622629 0.05352236
3rd 0.1969663 197.8372 0.21224655 0.24211125
All 0.5321058 534.4585 0.16312688 0.19485376
> if (PLOT)
+     plot(a5f)
> a6f <- earth(survived ~ ., data=etitanic, degree=2, trace=2)  # x=mixed y=unordered
x is a 1046 by 6 matrix: 1=pclass2nd, 2=pclass3rd, 3=sexmale, 4=age, 5=sibsp, 6=parch
y is a 1046 by 1 matrix: 1=survived
Forward pass: minspan 6 endspan 9

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.2860 0.2894       0.2894    3      sexmale           0< 2       
4      0.3297 0.3361      0.04669    2    pclass3rd           0< 3       
6      0.3588 0.3710      0.03488    4          age          16  4   5   2   
8      0.3962 0.4106      0.03954    1    pclass2nd           0< 6       2   
10     0.4143 0.4338       0.0232    5        sibsp           4  7   8   4   
12     0.4133 0.4383     0.004574    6        parch           1  9   10  
14     0.4150 0.4427      0.00437    2    pclass3rd           0< 11      2   
16     0.4116 0.4449     0.002169    5        sibsp           1  12  13  2   
18     0.4108 0.4469     0.002011    1    pclass2nd           0< 14      13  
20     0.4069 0.4487     0.001831    4          age          64  15  16  

Reached max number of terms 21
After forward pass GRSq 0.4069 RSq 0.4487
Forward pass complete: 21 terms (16 terms used)
Prune method "backward" penalty 3 nprune 16: selected 9 of 16 terms, and 6 of 6 predictors
After backward pass GRSq 0.4222 RSq 0.4441 
> printh(summary(a6f))
===summary(a6f) 
Call: earth(formula=survived~., data=etitanic, trace=2, degree=2)

                       coefficients
(Intercept)              0.85375046
pclass3rd               -0.86859514
sexmale                 -0.59566715
h(64-age)                0.00352860
pclass2nd * sexmale     -0.15663098
pclass2nd * h(1-parch)  -0.12839750
pclass3rd * sexmale      0.23757830
pclass3rd * h(4-sibsp)   0.10407473
sexmale * h(16-age)      0.03649943

Selected 9 of 16 terms, and 6 of 6 predictors 
Importance: sexmale, pclass3rd, pclass2nd, age, sibsp, parch
Number of terms at each degree of interaction: 1 3 5
GCV 0.1398544    RSS 140.4728    GRSq 0.422183    RSq 0.4440888
> if (PLOT)
+     plot(a6f)
> detach(etitanic)
> 
> # basic test with ordered factors
> ff <- factor(substring("statistics", 1:10, 1:10), levels=letters, ordered=TRUE)
> ff <- c(ff, ff, ff)
> vowels = (ff == 1 | ff == 9) * 3
> printh(head(ff))
===head(ff) 
[1] 19 20  1 20  9 19
> printh(head(vowels))
===head(vowels) 
[1] 0 0 3 0 3 0
> a8 <- earth(ff, vowels, degree=1, trace=2)        # x=ordered y=numeric
x is a 30 by 1 matrix: 1=ff
y is a 30 by 1 matrix: 1=vowels
Forward pass: minspan 3 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.5906 0.6958       0.6958    1           ff           9  2   3   
4      0.5250 0.7012     0.005454    1           ff          19  4       
6      0.4302 0.7012            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 5 terms
After forward pass GRSq 0.4302 RSq 0.7012
Forward pass complete: 5 terms (4 terms used)
Prune method "backward" penalty 2 nprune 4: selected 3 of 4 terms, and 1 of 1 predictors
After backward pass GRSq 0.5906 RSq 0.6958 
> printh(summary(a8))
===summary(a8) 
Call: earth(x=ff, y=vowels, trace=2, degree=1)

            coefficients
(Intercept)    2.7464305
h(ff-9)       -0.2609730
h(9-ff)       -0.1445003

Selected 3 of 4 terms, and 1 of 1 predictors 
Importance: ff
Number of terms at each degree of interaction: 1 2 (additive model)
GCV 0.828019    RSS 17.2504    GRSq 0.5906149    RSq 0.6957602
> if (PLOT)
+     plot(a8)
> a9 <- earth(vowels, ff, degree=1, trace=2)        # x=numeric y=ordered
x is a 30 by 1 matrix: 1=vowels
y is a 30 by 1 matrix: 1=ff
Forward pass: minspan 3 endspan 7

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.3877 0.4693       0.4693    1       vowels           0< 2       
4      0.2858 0.4693            0    -                                reject term

Reached delta RSq threshold (DeltaRSq 0 < 0.001) at 3 terms
After forward pass GRSq 0.2858 RSq 0.4693
Forward pass complete: 3 terms (2 terms used)
Prune method "backward" penalty 2 nprune 2: selected 2 of 2 terms, and 1 of 1 predictors
After backward pass GRSq 0.3877 RSq 0.4693 
> if (PLOT)
+     plot(a9)
> printh(summary(a9))
===summary(a9) 
Call: earth(x=vowels, y=ff, trace=2, degree=1)

            coefficients
(Intercept)    17.142857
vowels         -3.603175

Selected 2 of 2 terms, and 1 of 1 predictors 
Importance: vowels
Number of terms at each degree of interaction: 1 1 (additive model)
GCV 34.2622    RSS 832.5714    GRSq 0.38772    RSq 0.4692603
> 
> cat("--- wp argument---------------------------------\n")
--- wp argument---------------------------------
> set.seed(79)
> NWP <- 100
> x1 <- runif(NWP)
> x2 <- runif(NWP)
> y1 <- (x1 > .5) + .3 * runif(1)
> y2 <- sin(3 * x2) + .3 * runif(1)
> myw <- 10
> m <- mars(cbind(x1,x2), cbind(y1, y2))
> me1 <- mars.to.earth(m)
Converted mars(x=cbind(x1, x2), y=cbind(y1, y2))
to        earth(x=cbind(x1, x2), y=cbind(y1, y2))
> printh(me1)
===me1 
Selected 7 of 11 terms, and 2 of 2 predictors 
Importance: object has no prune.terms, call update() on the model to fix that
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0243352048 1.84193165 0.9045963 0.9263227
y2  0.0008402802 0.06360081 0.9917729 0.9936465
All 0.0251754850 1.90553246 0.9298631 0.9458355
> e1 <- earth(cbind(x1,x2), cbind(y1, y2))
> printh(e1)
===e1 
Selected 7 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0198479574 1.50229190 0.9221881 0.9399083
y2  0.0007267033 0.05500417 0.9928850 0.9945053
All 0.0205746607 1.55729607 0.9424021 0.9555190
> e2 <- earth(cbind(x1,x2), cbind(y1, y2),  wp=c(1,1))
> printh(e2)
===e2 
Selected 7 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0198479574 1.50229190 0.9221881 0.9399083
y2  0.0007267033 0.05500417 0.9928850 0.9945053
All 0.0205746607 1.55729607 0.9424021 0.9555190
> e1$call <- NULL
> e2$call <- NULL
> e1$wp <- NULL
> e2$wp <- NULL
> stopifnot(identical(e1, e2))
> e3 <- earth(cbind(x1,x2), cbind(y1, y2),  wp=c(.001,1))
> printh(e3)
===e3 
Selected 7 of 8 terms, and 2 of 2 predictors 
Importance: x2, x1
Number of terms at each degree of interaction: 1 6 (additive model)

            GCV       RSS      GRSq       RSq
y1  0.058928797 4.4603206 0.7689755 0.8215872
y2  0.000290747 0.0220067 0.9971533 0.9978016
All 0.000698654 0.0528811 0.9965849 0.9973626
> wp <- c(1, 2)
> e3 <- earth(cbind(x1,x2), cbind(y1, y2),  wp=wp)
> printh(e3)
===e3 
Selected 7 of 9 terms, and 2 of 2 predictors 
Importance: x1, x2
Number of terms at each degree of interaction: 1 6 (additive model)

             GCV        RSS      GRSq       RSq
y1  0.0198479574 1.50229190 0.9221881 0.9399083
y2  0.0007267033 0.05500417 0.9928850 0.9945053
All 0.0142009094 1.07486683 0.9536270 0.9641876
> m3 <- mars(cbind(x1,x2), cbind(y1, y2),  wp=wp)
> cat("response weights: wp", wp, "earth gcv", e3$gcv,
+     "mars gcv", m3$gcv, "mars gcv*length(wp)",
+     m3$gcv * length(wp), "\n")
response weights: wp 1 2 earth gcv 0.01420091 mars gcv 0.008665047 mars gcv*length(wp) 0.01733009 
> 
> e4 <- earth(cbind(O3, O3) ~ ., data=ozone1, wp=c(1, .01))
> printh(e4) # both sub models should be the same
===e4 
Selected 14 of 19 terms, and 8 of 9 predictors 
Importance: temp, ibh, doy, dpg, humidity, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 13 (additive model)

          GCV      RSS     GRSq       RSq
O3   14.85938 4134.014 0.769177 0.8042181
O3.1 14.85938 4134.014 0.769177 0.8042181
All  29.71875 8268.028 0.769177 0.8042181
> printh(summary(e4))
===summary(e4) 
Call: earth(formula=cbind(O3, O3)~., data=ozone1, wp=c(1, 0.01))

                       O3       O3.1
(Intercept)     8.6910756  8.6910756
h(vh-5740)      0.0152607  0.0152607
h(5740-vh)     -0.0130076 -0.0130076
h(9-wind)       0.3044601  0.3044601
h(humidity-41)  0.2753048  0.2753048
h(humidity-54) -0.2615068 -0.2615068
h(temp-58)      0.3801961  0.3801961
h(ibh-1069)    -0.0006189 -0.0006189
h(1069-ibh)    -0.0029057 -0.0029057
h(dpg-11)      -0.1060948 -0.1060948
h(80-vis)       0.0459011  0.0459011
h(doy-89)       0.0471836  0.0471836
h(89-doy)      -0.1264530 -0.1264530
h(doy-159)     -0.0915781 -0.0915781

Selected 14 of 19 terms, and 8 of 9 predictors 
Importance: temp, ibh, doy, dpg, humidity, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 13 (additive model)

          GCV      RSS     GRSq       RSq
O3   14.85938 4134.014 0.769177 0.8042181
O3.1 14.85938 4134.014 0.769177 0.8042181
All  29.71875 8268.028 0.769177 0.8042181
> 
> # wp with formula interface
> e5 <- earth(cbind(O3, wind) ~ ., data=ozone1, wp=c(1, 1))
> printh(e5)
===e5 
Selected 13 of 19 terms, and 8 of 8 predictors 
Importance: temp, humidity, dpg, doy, vh, vis, ibh, ibt
Number of terms at each degree of interaction: 1 12 (additive model)

           GCV       RSS      GRSq       RSq
O3   14.910671 4203.2278 0.7683802 0.8009402
wind  3.516638  991.3189 0.2176825 0.3276569
All  18.427309 5194.5467 0.7324365 0.7700493
> printh(summary(e5))
===summary(e5) 
Call: earth(formula=cbind(O3, wind)~., data=ozone1, wp=c(1, 
      1))

                       O3       wind
(Intercept)     8.8975799  5.5306309
h(vh-5590)      0.0175357 -0.0065858
h(5590-vh)     -0.0176371  0.0137453
h(54-humidity) -0.1463676  0.0152480
h(temp-56)      0.2417855  0.0362342
h(1069-ibh)    -0.0033904 -0.0008738
h(dpg-13)      -0.1036180  0.0004931
h(ibt-120)      0.0332302 -0.0035322
h(150-vis)      0.0219728  0.0004762
h(doy-89)       0.0388114  0.0092403
h(89-doy)      -0.1179689 -0.0062293
h(doy-159)     -0.0891210 -0.0036602
h(doy-295)      0.0320409 -0.0530228

Selected 13 of 19 terms, and 8 of 8 predictors 
Importance: temp, humidity, dpg, doy, vh, vis, ibh, ibt
Number of terms at each degree of interaction: 1 12 (additive model)

           GCV       RSS      GRSq       RSq
O3   14.910671 4203.2278 0.7683802 0.8009402
wind  3.516638  991.3189 0.2176825 0.3276569
All  18.427309 5194.5467 0.7324365 0.7700493
> e5 <- earth(cbind(O3, wind) ~ ., data=ozone1, wp=c(.3, 1))
> printh(e5)
===e5 
Selected 11 of 19 terms, and 7 of 8 predictors 
Importance: temp, ibh, doy, humidity, dpg, vh, vis, ibt-unused
Number of terms at each degree of interaction: 1 10 (additive model)

           GCV       RSS      GRSq       RSq
O3   15.251832 4412.9097 0.7630807 0.7910099
wind  3.395719  982.5049 0.2445824 0.3336349
All  12.263490 3548.2735 0.6651832 0.7046531
> printh(summary(e5))
===summary(e5) 
Call: earth(formula=cbind(O3, wind)~., data=ozone1, wp=c(0.3, 
      1))

                       O3       wind
(Intercept)     7.0820415  4.7325056
h(vh-5590)      0.0166151 -0.0037805
h(5590-vh)     -0.0117055  0.0128097
h(humidity-32)  0.0890914  0.0108111
h(temp-55)      0.3683121  0.0296566
h(ibh-1069)    -0.0004386  0.0002888
h(dpg-13)      -0.0846832  0.0005698
h(200-vis)      0.0168935 -0.0008678
h(89-doy)      -0.1572485 -0.0115979
h(doy-151)     -0.0372604  0.0030611
h(doy-295)      0.0232080 -0.0410423

Selected 11 of 19 terms, and 7 of 8 predictors 
Importance: temp, ibh, doy, humidity, dpg, vh, vis, ibt-unused
Number of terms at each degree of interaction: 1 10 (additive model)

           GCV       RSS      GRSq       RSq
O3   15.251832 4412.9097 0.7630807 0.7910099
wind  3.395719  982.5049 0.2445824 0.3336349
All  12.263490 3548.2735 0.6651832 0.7046531
> # wp with factors
> e6 <- earth(pclass ~ ., data=etitanic, degree=2, wp=c(.001,.001,1))
> printh(e6)
===e6 
Selected 9 of 17 terms, and 5 of 5 predictors 
Importance: age, survived, sexmale, sibsp, parch
Number of terms at each degree of interaction: 1 5 3

          GCV      RSS        GRSq        RSq
1st 0.1497326 150.3947 0.244428124 0.27307278
2nd 0.1873313 188.1596 0.001534961 0.03938799
3rd 0.1880052 188.8365 0.248086069 0.27659204
All 0.5638989 566.3922 0.247898454 0.27641154
> printh(summary(e6))
===summary(e6) 
Call: earth(formula=pclass~., data=etitanic, wp=c(0.001, 0.001, 
      1), degree=2)

                                1st          2nd         3rd
(Intercept)            -0.046470069  0.275516956  0.77095311
survived                0.305886574  0.170417323 -0.47630390
sexmale                 0.141655736  0.192253371 -0.33390911
h(age-9)                0.011633728 -0.003257022 -0.00837671
h(sibsp-1)             -0.017983966 -0.104457784  0.12244175
h(parch-2)             -0.122022417 -0.080155412  0.20217783
survived * sexmale     -0.074297809 -0.292618103  0.36691591
sexmale * h(1-sibsp)   -0.121552766 -0.076623569  0.19817634
h(57-age) * h(2-parch) -0.001684795 -0.001304900  0.00298970

Selected 9 of 17 terms, and 5 of 5 predictors 
Importance: age, survived, sexmale, sibsp, parch
Number of terms at each degree of interaction: 1 5 3

          GCV      RSS        GRSq        RSq
1st 0.1497326 150.3947 0.244428124 0.27307278
2nd 0.1873313 188.1596 0.001534961 0.03938799
3rd 0.1880052 188.8365 0.248086069 0.27659204
All 0.5638989 566.3922 0.247898454 0.27641154
> e7 <- earth(pclass ~ ., data=etitanic, degree=2, wp=c(1,.001,.001))
> printh(e7)
===e7 
Selected 10 of 17 terms, and 5 of 5 predictors 
Importance: age, parch, survived, sibsp, sexmale
Number of terms at each degree of interaction: 1 3 6

          GCV      RSS        GRSq        RSq
1st 0.1461088 146.0399  0.26271447 0.29412181
2nd 0.1917340 191.6435 -0.02193112 0.02160173
3rd 0.1992300 199.1360  0.20319295 0.23713582
All 0.4386221 438.4151  0.26237064 0.29379263
> printh(summary(e7))
===summary(e7) 
Call: earth(formula=pclass~., data=etitanic, wp=c(1, 0.001, 
      0.001), degree=2)

                                1st          2nd         3rd
(Intercept)              0.13016325  0.217987052  0.65184970
survived                 0.48145605 -0.164704732 -0.31675132
h(age-54)                0.06364148 -0.013012632 -0.05062884
h(2-parch)               0.15725209  0.104936890 -0.26218898
survived * h(52-age)    -0.00878278  0.007876497  0.00090628
sexmale * h(age-26)      0.00662605 -0.002482539 -0.00414351
h(age-55) * h(2-parch)  -0.03868850  0.004555687  0.03413281
h(55-age) * h(2-parch)  -0.00446982 -0.002538479  0.00700829
h(sibsp-1) * h(2-parch) -0.06034474 -0.022889942  0.08323468
h(1-sibsp) * h(2-parch) -0.06850803 -0.025926745  0.09443478

Selected 10 of 17 terms, and 5 of 5 predictors 
Importance: age, parch, survived, sibsp, sexmale
Number of terms at each degree of interaction: 1 3 6

          GCV      RSS        GRSq        RSq
1st 0.1461088 146.0399  0.26271447 0.29412181
2nd 0.1917340 191.6435 -0.02193112 0.02160173
3rd 0.1992300 199.1360  0.20319295 0.23713582
All 0.4386221 438.4151  0.26237064 0.29379263
> if (PLOT)
+     plot(e7, col.residuals=as.numeric(etitanic$pclass)+1)
> 
> cat("--- earth.regress ---------------------------------\n")
--- earth.regress ---------------------------------
> 
> msg = "earth.regress with trees data, single response, no weights"
> cat("Test:", msg, "\n")
Test: earth.regress with trees data, single response, no weights 
> 
> data(trees)
> y <- trees$Volume
> x <- cbind(trees$Girth, trees$Height)
> colnames(x) <- c("girth", "height")
> 
> a.lm <- lm(y ~ x)
> a.lm.rss <- sum((a.lm$fitted.values - y)^2)
> if (is.null(dim(a.lm$coefficients)))
+     dim(a.lm$coefficients) <- c(length(a.lm$coefficients), 1)
> a <- earth:::earth.regress(x, y)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]"))
> check.fuzzy.equal(a.lm$residuals, a$residuals, msg=paste("residuals [", msg, "]"))
> 
> msg = "earth.regress with ozone1 data, multiple responses, no weights"
> cat("Test:", msg, "\n")
Test: earth.regress with ozone1 data, multiple responses, no weights 
> 
> data(ozone1)
> y <- cbind(ozone1$O3, ozone1$O3 ^ 2)
> colnames(y) <- c("O3", "O32")
> x <- cbind(ozone1$wind, ozone1$humidity, ozone1$temp)
> colnames(x) <- c("wind", "humidity", "temp")
> 
> a.lm <- lm(y ~ x)
> a.lm.rss <- sum((a.lm$fitted.values - y)^2)
> a <- earth:::earth.regress(x, y)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]"))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm$residuals, a$residuals, msg=paste("residuals [", msg, "]", sep=""))
> 
> msg = "earth.regress with ozone1 data, multiple responses with case weights"
> cat("Test:", msg, "\n")
Test: earth.regress with ozone1 data, multiple responses with case weights 
> 
> # options(digits=10)
> weights. <- rep(.5, nrow(x))
> weights.[1] <- 1
> weights.[2] <- 2
> weights.[3] <- 3
> weights.[4] <- 4
> weights.[5] <- 5
> a.lm <- lm(y ~ x, weights=weights.)
> # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> a.lm.rss <- sum(a.lm$residuals^2)
> a <- earth:::earth.regress(x, y, weights=weights.)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm$residuals, a$residuals, msg=paste("residuals [", msg, "]", sep=""))
> 
> msg = "earth.regress case weights with zero weights 1"
> cat("Test:", msg, "\n")
Test: earth.regress case weights with zero weights 1 
> 
> weights. <- rep(1, nrow(x))
> weights.[2] <- 0
> weights.[4] <- 0
> a.lm <- lm(y ~ x, weights=weights.)
> # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> a.lm.rss <- sum(a.lm$residuals^2)
> a <- earth:::earth.regress(x, y, weights=weights.)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> # options(digits=10)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> 
> msg = "earth.regress case weights with zero weights 2"
> cat("Test:", msg, "\n")
Test: earth.regress case weights with zero weights 2 
> weights. <- rep(1, nrow(x))
> weights.[5] <- 0
> weights.[6] <- 0
> weights.[7] <- 0
> weights.[21] <- 0
> weights.[22] <- 0
> weights.[23] <- 0
> weights.[24] <- 0
> weights.[25] <- 0
> weights.[26] <- 0
> weights.[27] <- 0
> a.lm <- lm(y ~ x, weights=weights.)
> # a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> a.lm.rss <- sum(a.lm$residuals^2)
> a <- earth:::earth.regress(x, y, weights=weights.)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> 
> msg = "earth.regress case weights with zero weights and missing columns 1"
> cat("Test:", msg, "\n")
Test: earth.regress case weights with zero weights and missing columns 1 
> x <- cbind(ozone1$wind, ozone1$humidity, ozone1$temp, ozone1$wind^2, ozone1$humidity^2, ozone1$temp^2)
> weights. <- rep(1, nrow(x))
> weights.[5] <- 0
> weights.[6] <- 0
> weights.[7] <- 0
> weights.[21] <- 0
> weights.[22] <- 0
> weights.[23] <- 0
> weights.[24] <- 0
> weights.[25] <- 0
> weights.[26] <- 0
> weights.[27] <- 0
> colnames(x) <- c("wind", "humidity", "temp", "wind2", "humidity2", "temp2")
> used.cols = as.logical(c(1,0,1,0,1,1))
> x.missing <- x[,used.cols]
> a.lm <- lm(y ~ x.missing, weights=weights.)
> a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> a.lm.rss <- sum(a.lm$residuals^2)
> a <- earth:::earth.regress(x, y, weights=weights., used.cols=used.cols)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> 
> msg = "earth.regress case weights with zero weights and missing columns 2"
> cat("Test:", msg, "\n")
Test: earth.regress case weights with zero weights and missing columns 2 
> x <- cbind(ozone1$wind, ozone1$humidity, ozone1$temp, ozone1$wind^2, ozone1$humidity^2, ozone1$temp^2)
> weights. <- rep(1, nrow(x))
> weights.[5] <- .1
> weights.[6] <- .2
> weights.[7] <- 1.9
> weights.[21] <- .59
> colnames(x) <- c("wind", "humidity", "temp", "wind2", "humidity2", "temp2")
> used.cols = as.logical(c(0,1,0,0,1,0))
> x.missing <- x[,used.cols]
> a.lm <- lm(y ~ x.missing, weights=weights.)
> a.lm.rss <- sum((a.lm$fitted.values - y)^2) # line below is equivalent
> a.lm.rss <- sum(a.lm$residuals^2)
> a <- earth:::earth.regress(x, y, weights=weights., used.cols=used.cols)
> rownames(a.lm$coefficients) <- rownames(a$coefficients)
> check.fuzzy.equal(a.lm$coefficients, a$coefficients, msg=paste("coefficients [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm.rss, a$rss, msg=paste("rss [", msg, "]", sep=""))
> check.fuzzy.equal(a.lm$residuals, a$residuals, fuzz=1e-6, msg=paste("residuals [", msg, "]", sep=""))
> 
> cat("---standard method functions ------------------------\n")
---standard method functions ------------------------
> 
> short.etitanic <- etitanic[seq(from=1, to=1000, by=20),]
> a1 <- earth(pclass ~ ., data=short.etitanic, glm=list(family=binomial), trace=0)
> printh(variable.names(a1))
===variable.names(a1) 
[1] "survived" "sexmale"  "age"      "sibsp"    "parch"   
> printh(case.names(a1))
===case.names(a1) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> printh(case.names(a1, use.names=FALSE))
===case.names(a1, use.names = FALSE) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> 
> named.short.etitanic <- short.etitanic
> rownames(named.short.etitanic) <- paste("xx", 1:nrow(named.short.etitanic))
> a2 <- earth(pclass ~ ., data=named.short.etitanic, glm=list(family=binomial), trace=0)
> printh(variable.names(a2))
===variable.names(a2) 
[1] "survived" "sexmale"  "age"      "sibsp"    "parch"   
> printh(case.names(a2))
===case.names(a2) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> printh(case.names(a2, use.names=FALSE))
===case.names(a2, use.names = FALSE) 
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> 
> printh(deviance(a1), expect.warning=TRUE)
===deviance(a1)  expect warning -->Warning: deviance.earth: returning earth (not GLM) deviance
[1] 25.48701
> printh(deviance(a1, warn=FALSE))
===deviance(a1, warn = FALSE) [1] 25.48701
> printh(effects(a1), expect.warning=TRUE)
===effects(a1)  expect warning -->Warning: effects.earth: returning NULL
NULL
> printh(effects(a1, warn=FALSE))
===effects(a1, warn = FALSE) NULL
> printh(family(a1))
===family(a1) 

Family: binomial 
Link function: logit 

> printh(anova(a1), expect.warning=TRUE)
===anova(a1)  expect warning -->Warning: anova.earth: returning NULL
NULL
> printh(anova(a1, warn=FALSE))
===anova(a1, warn = FALSE) NULL
> printh(family(a1))
===family(a1) 

Family: binomial 
Link function: logit 

> 
> # TODO removed because causes different results on different machines
> # cat("--- thresh=0 -----------------------------------------\n")
> #
> # a.no.thresh <- earth(O3 ~ ., data = ozone1, thresh=0, nk=1000, degree=2, trace=4)
> # printh(a.no.thresh)
> # printh(summary(a.no.thresh))
> # plotmo(a.no.thresh, degree1=1, degree2=c(4,9,16), clip=0, , caption="test with thresh=0")
> 
> # test the way plotmo gets the data with earth with a formula interface
> # use strange data name se to make sure eval gets correct environment (don't pick up se in plotmo)
> se <- ozone1
> a <- earth(O3 ~ ., data=se, degree=2, keepxy=0)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=0, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> plotmo(a, trace=2, caption="getdata earth test1")

--get.plotmo.x for earth object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using x from "se" passed to earth 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got x with colnames from object$call$formula

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using y from "se" passed to earth 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got y from object$call$formula
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 50 min 10.95348 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0   258.0000
[2,]                     0   250.7143
[3,]                     0   243.4286
[4,]                     0   236.1429
[5,]                     0   228.8571
[6,]                     0   221.5714
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 50 min 3.947176 max 15.71664
                                      value 3.947176 4.279536 4.611896 4.944256 5.276616 5.608977 5.941337 6.273697 6.606057 6.938417 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 24 min 10.96742 max 15.3705
                                      value 15.3705 15.32647 15.28244 15.23841 15.21639 15.15034 14.99624 14.93019 14.77608 14.71004 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4         0  56.00000                         0
[2,]           1          4         0  48.71429                         0
[3,]           1          4         0  41.42857                         0
[4,]           1          4         0  34.14286                         0
[5,]           1          4         0  26.85714                         0
[6,]           1          4         0  19.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 50 min 7.391714 max 15.38381
                                      value 7.391714 8.438414 9.485115 10.53182 11.57852 12.62522 13.67192 14.71862 15.38381 15.21443 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 220 min 0.3980991 max 15.3705
                                      value 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 11.6274 7.884299 4.141199 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 400 min -0.6569983 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 400 min -12.89537 max 39.83191
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
get.earth.x from model.matrix.earth from predict.earth: data after call to model.frame is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of data after call to model.frame are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]             108254.00       65.5
[2,]              79177.32       65.5
[3,]              50100.63       65.5
[4,]              21023.95       65.5
[5,]                  0.00       65.5
[6,]                  0.00       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "O3" returned length 400 min 5.537547 max 14.25387
                                      value 5.537547 7.878725 10.2199 12.56108 14.25387 14.25387 14.25387 14.25387 14.25387 14.25387 ...


ylim 1.37159 37.17335 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.37 37.2 cex 0.66
persp(humidity:temp) theta -35 ylim 1.37 37.2 cex 0.66
persp(temp:dpg) theta 235 ylim 1.37 37.2 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.37 37.2 cex 0.66

> a <- earth(O3 ~ ., data=se, degree=2, keepxy=1)
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> plotmo(a, trace=1, caption="getdata earth test2")

--get.plotmo.x for earth object

get.data.for.formula: using x from object$data 
got x with colnames from object$call$formula

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

get.data.for.formula: using y from object$data 
got y from object$call$formula
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.earth(xgrid, type="response") column "O3" returned length 50 min 10.95348 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

predict.earth(xgrid, type="response") column "O3" returned length 220 min 0.3980991 max 15.3705
                                      value 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 11.6274 7.884299 4.141199 ...

ylim 1.37159 37.17335 

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

persp(wind:vis) theta 145 ylim 1.37 37.2 cex 0.66
persp(humidity:temp) theta -35 ylim 1.37 37.2 cex 0.66
persp(temp:dpg) theta 235 ylim 1.37 37.2 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.37 37.2 cex 0.66
> a <- earth(O3 ~ ., data=se, degree=2, keepxy=1)
> se <- NULL
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> plotmo(a, trace=FALSE, caption="getdata earth test3")

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> se <- ozone1
> a <- earth(O3 ~ ., data=se, degree=2, keepxy=0)
> se <- NULL
> printh(summary(a))
===summary(a) 
Call: earth(formula=O3~., data=se, keepxy=0, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> z <- try(plotmo(a, trace=2, caption="getdata earth test4"))

--get.plotmo.x for earth object

formula O3 ~ .
stripped formula O3~.
Error : the data "se" passed to earth is no longer available (use keepxy=TRUE in the call to earth?)
       (tried object$data, object$x and call$se)
> if (class(z) != "try-error")
+     stop("test failed")
> 
> # test the way plotmo gets the data with earth with the default interface
> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=0)
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=0, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> plotmo(a, trace=2, caption="getdata earth test5")

--get.plotmo.x for earth object

got x with colnames from object$call$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$call$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.95348 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0   258.0000
[2,]                     0   250.7143
[3,]                     0   243.4286
[4,]                     0   236.1429
[5,]                     0   228.8571
[6,]                     0   221.5714
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 3.947176 max 15.71664
                                      value 3.947176 4.279536 4.611896 4.944256 5.276616 5.608977 5.941337 6.273697 6.606057 6.938417 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.96742 max 15.3705
                                      value 15.3705 15.32647 15.28244 15.23841 15.21639 15.15034 14.99624 14.93019 14.77608 14.71004 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4         0  56.00000                         0
[2,]           1          4         0  48.71429                         0
[3,]           1          4         0  41.42857                         0
[4,]           1          4         0  34.14286                         0
[5,]           1          4         0  26.85714                         0
[6,]           1          4         0  19.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.391714 max 15.38381
                                      value 7.391714 8.438414 9.485115 10.53182 11.57852 12.62522 13.67192 14.71862 15.38381 15.21443 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.3980991 max 15.3705
                                      value 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 11.6274 7.884299 4.141199 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -0.6569983 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -12.89537 max 39.83191
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]             108254.00       65.5
[2,]              79177.32       65.5
[3,]              50100.63       65.5
[4,]              21023.95       65.5
[5,]                  0.00       65.5
[6,]                  0.00       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.537547 max 14.25387
                                      value 5.537547 7.878725 10.2199 12.56108 14.25387 14.25387 14.25387 14.25387 14.25387 14.25387 ...


ylim 1.37159 37.17335 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.37 37.2 cex 0.66
persp(humidity:temp) theta -35 ylim 1.37 37.2 cex 0.66
persp(temp:dpg) theta 235 ylim 1.37 37.2 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.37 37.2 cex 0.66

> a <- earth(se[,2:10], se[,1], degree=2, keepxy=1)
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> plotmo(a, trace=2, caption="getdata earth test6")

--get.plotmo.x for earth object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$y
get.plotmo.y column "se[,1]" returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.95348 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0   258.0000
[2,]                     0   250.7143
[3,]                     0   243.4286
[4,]                     0   236.1429
[5,]                     0   228.8571
[6,]                     0   221.5714
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 3.947176 max 15.71664
                                      value 3.947176 4.279536 4.611896 4.944256 5.276616 5.608977 5.941337 6.273697 6.606057 6.938417 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.96742 max 15.3705
                                      value 15.3705 15.32647 15.28244 15.23841 15.21639 15.15034 14.99624 14.93019 14.77608 14.71004 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4         0  56.00000                         0
[2,]           1          4         0  48.71429                         0
[3,]           1          4         0  41.42857                         0
[4,]           1          4         0  34.14286                         0
[5,]           1          4         0  26.85714                         0
[6,]           1          4         0  19.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.391714 max 15.38381
                                      value 7.391714 8.438414 9.485115 10.53182 11.57852 12.62522 13.67192 14.71862 15.38381 15.21443 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.3980991 max 15.3705
                                      value 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 11.6274 7.884299 4.141199 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -0.6569983 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -12.89537 max 39.83191
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]             108254.00       65.5
[2,]              79177.32       65.5
[3,]              50100.63       65.5
[4,]              21023.95       65.5
[5,]                  0.00       65.5
[6,]                  0.00       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.537547 max 14.25387
                                      value 5.537547 7.878725 10.2199 12.56108 14.25387 14.25387 14.25387 14.25387 14.25387 14.25387 ...


ylim 1.37159 37.17335 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.37 37.2 cex 0.66
persp(humidity:temp) theta -35 ylim 1.37 37.2 cex 0.66
persp(temp:dpg) theta 235 ylim 1.37 37.2 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.37 37.2 cex 0.66

> a <- earth(se[,2:10], se[,1], degree=2, keepxy=1)
> se <- NULL
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=1, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> plotmo(a, trace=2, caption="getdata earth test7")

--get.plotmo.x for earth object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$y
get.plotmo.y column "se[,1]" returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.95348 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0   258.0000
[2,]                     0   250.7143
[3,]                     0   243.4286
[4,]                     0   236.1429
[5,]                     0   228.8571
[6,]                     0   221.5714
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 3.947176 max 15.71664
                                      value 3.947176 4.279536 4.611896 4.944256 5.276616 5.608977 5.941337 6.273697 6.606057 6.938417 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.96742 max 15.3705
                                      value 15.3705 15.32647 15.28244 15.23841 15.21639 15.15034 14.99624 14.93019 14.77608 14.71004 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4         0  56.00000                         0
[2,]           1          4         0  48.71429                         0
[3,]           1          4         0  41.42857                         0
[4,]           1          4         0  34.14286                         0
[5,]           1          4         0  26.85714                         0
[6,]           1          4         0  19.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.391714 max 15.38381
                                      value 7.391714 8.438414 9.485115 10.53182 11.57852 12.62522 13.67192 14.71862 15.38381 15.21443 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.3980991 max 15.3705
                                      value 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 11.6274 7.884299 4.141199 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -0.6569983 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -12.89537 max 39.83191
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]             108254.00       65.5
[2,]              79177.32       65.5
[3,]              50100.63       65.5
[4,]              21023.95       65.5
[5,]                  0.00       65.5
[6,]                  0.00       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.537547 max 14.25387
                                      value 5.537547 7.878725 10.2199 12.56108 14.25387 14.25387 14.25387 14.25387 14.25387 14.25387 ...


ylim 1.37159 37.17335 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.37 37.2 cex 0.66
persp(humidity:temp) theta -35 ylim 1.37 37.2 cex 0.66
persp(temp:dpg) theta 235 ylim 1.37 37.2 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.37 37.2 cex 0.66

> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=0)
> se <- NULL
> z <- try(plotmo(a, trace=2, caption="getdata earth test8"))

--get.plotmo.x for earth object

Looked unsuccessfully for an x in the following places:

(i) object$x:
NULL

(ii) object$call$formula:
NULL

(iii) object$call$x:
NULL

Error : get.plotmo.x.default cannot get the x matrix
       (tried object$x, object$call$formula, and object$call$x)
> if (class(z) != "try-error")
+     stop("test failed")
> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=0)
> # expect Error: get.plotmo.x.default cannot get the x matrix
> # TODO error message could be improved here
> se$vh <- NULL # vh is unused (but plotmo still needs it --- why?)
> z <- try(plotmo(a, trace=2, caption="getdata earth test9"))

--get.plotmo.x for earth object

Looked unsuccessfully for an x in the following places:

(i) object$x:
NULL

(ii) object$call$formula:
NULL

(iii) object$call$x:
`[.data.frame`(se, , 2:10) : undefined columns selected

Error : get.plotmo.x.default cannot get the x matrix
       (tried object$x, object$call$formula, and object$call$x)
> if (class(z) != "try-error")
+     stop("test failed")
> se <- ozone1
> a <- earth(se[,2:10], se[,1], degree=2, keepxy=TRUE)
> se$vh <- NULL # vh is unused (but plotmo still needs it --- why?)
> printh(summary(a))
===summary(a) 
Call: earth(x=se[, 2:10], y=se[, 1], keepxy=TRUE, degree=2)

                            coefficients
(Intercept)                   14.8885242
h(temp-58)                     0.3207913
h(233-ibt)                    -0.0456181
h(200-vis)                     0.0220154
h(doy-89)                     -0.0232471
h(89-doy)                     -0.1436648
h(wind-7) * h(200-vis)        -0.0187155
h(56-humidity) * h(temp-58)   -0.0209600
h(temp-58) * h(dpg-54)        -0.0189092
h(temp-58) * h(54-dpg)         0.0041001
h(1069-ibh) * h(44-dpg)       -0.0000805

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.45447    RSS 3767.904    GRSq 0.7910006    RSq 0.8215567
> plotmo(a, trace=2, caption="getdata earth test9")

--get.plotmo.x for earth object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for earth object

got y from object$y
get.plotmo.y column "se[,1]" returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for earth object

singles: 4 temp, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for earth object

pairs:
     [,1]         [,2]    
[1,] "2 wind"     "8 vis" 
[2,] "3 humidity" "4 temp"
[3,] "4 temp"     "6 dpg" 
[4,] "5 ibh"      "6 dpg" 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3 5760    5       64 27.77551 2112.5  24 167.5 120 205.5
4 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
5 5760    5       64 30.55102 2112.5  24 167.5 120 205.5
6 5760    5       64 31.93878 2112.5  24 167.5 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 10.95348 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg        ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.000000 120 205.5
2 5760    5       64   62 2112.5  24 -17.714286 120 205.5
3 5760    5       64   62 2112.5  24 -10.428571 120 205.5
4 5760    5       64   62 2112.5  24  -3.142857 120 205.5
5 5760    5       64   62 2112.5  24   4.142857 120 205.5
6 5760    5       64   62 2112.5  24  11.428571 120 205.5
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0   258.0000
[2,]                     0   250.7143
[3,]                     0   243.4286
[4,]                     0   236.1429
[5,]                     0   228.8571
[6,]                     0   221.5714
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 3.947176 max 15.71664
                                      value 3.947176 4.279536 4.611896 4.944256 5.276616 5.608977 5.941337 6.273697 6.606057 6.938417 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 24 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5       64   62 2112.5  24 167.5   0 205.5
2 5760    5       64   62 2112.5  24 167.5   2 205.5
3 5760    5       64   62 2112.5  24 167.5   4 205.5
4 5760    5       64   62 2112.5  24 167.5   6 205.5
5 5760    5       64   62 2112.5  24 167.5   7 205.5
6 5760    5       64   62 2112.5  24 167.5  10 205.5
predict.earth: bx is a 24 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        198                    0
[3,]                    0                  120        196                    0
[4,]                    0                  120        194                    0
[5,]                    0                  120        193                    0
[6,]                    0                  120        190                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 24 min 10.96742 max 15.3705
                                      value 15.3705 15.32647 15.28244 15.23841 15.21639 15.15034 14.99624 14.93019 14.77608 14.71004 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

get.earth.x from model.matrix.earth from predict.earth: x is a 50 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis      doy
1 5760    5       64   62 2112.5  24 167.5 120 33.00000
2 5760    5       64   62 2112.5  24 167.5 120 40.28571
3 5760    5       64   62 2112.5  24 167.5 120 47.57143
4 5760    5       64   62 2112.5  24 167.5 120 54.85714
5 5760    5       64   62 2112.5  24 167.5 120 62.14286
6 5760    5       64   62 2112.5  24 167.5 120 69.42857
predict.earth: bx is a 50 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4         0  56.00000                         0
[2,]           1          4         0  48.71429                         0
[3,]           1          4         0  41.42857                         0
[4,]           1          4         0  34.14286                         0
[5,]           1          4         0  26.85714                         0
[6,]           1          4         0  19.57143                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120         80                    0
[2,]                    0                  120         80                    0
[3,]                    0                  120         80                    0
[4,]                    0                  120         80                    0
[5,]                    0                  120         80                    0
[6,]                    0                  120         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 50 min 7.391714 max 15.38381
                                      value 7.391714 8.438414 9.485115 10.53182 11.57852 12.62522 13.67192 14.71862 15.38381 15.21443 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for degree2 plot "wind:vis" with newdata[220,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5   0 205.5
2   5760    2       64   62 2112.5  24 167.5   0 205.5
3   5760    3       64   62 2112.5  24 167.5   0 205.5
... 5760    4       64   62 2112.5  24 167.5   0 205.5
220 5760   11       64   62 2112.5  24 167.5 350 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 220 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    0       64   62 2112.5  24 167.5   0 205.5
2 5760    2       64   62 2112.5  24 167.5   0 205.5
3 5760    3       64   62 2112.5  24 167.5   0 205.5
4 5760    4       64   62 2112.5  24 167.5   0 205.5
5 5760    5       64   62 2112.5  24 167.5   0 205.5
6 5760    6       64   62 2112.5  24 167.5   0 205.5
predict.earth: bx is a 220 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  120        200                    0
[2,]                    0                  120        200                    0
[3,]                    0                  120        200                    0
[4,]                    0                  120        200                    0
[5,]                    0                  120        200                    0
[6,]                    0                  120        200                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 220 min 0.3980991 max 15.3705
                                      value 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 15.3705 11.6274 7.884299 4.141199 ...

plotmo.predict(type="response") for degree2 plot "humidity:temp" with newdata[400,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2   5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3   5760    5 26.78947   25 2112.5  24 167.5 120 205.5
... 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
400 5760    5 93.00000   93 2112.5  24 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp    ibh dpg   ibt vis   doy
1 5760    5 19.00000   25 2112.5  24 167.5 120 205.5
2 5760    5 22.89474   25 2112.5  24 167.5 120 205.5
3 5760    5 26.78947   25 2112.5  24 167.5 120 205.5
4 5760    5 30.68421   25 2112.5  24 167.5 120 205.5
5 5760    5 34.57895   25 2112.5  24 167.5 120 205.5
6 5760    5 38.47368   25 2112.5  24 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -0.6569983 max 26.48623
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "temp:dpg" with newdata[400,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2   5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3   5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
... 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
400 5760    5       64 93.00000 2112.5 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5 -69 167.5 120 205.5
2 5760    5       64 28.57895 2112.5 -69 167.5 120 205.5
3 5760    5       64 32.15789 2112.5 -69 167.5 120 205.5
4 5760    5       64 35.73684 2112.5 -69 167.5 120 205.5
5 5760    5       64 39.31579 2112.5 -69 167.5 120 205.5
6 5760    5       64 42.89474 2112.5 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          0     116.5         0                         0
[2,]           1          0     116.5         0                         0
[3,]           1          0     116.5         0                         0
[4,]           1          0     116.5         0                         0
[5,]           1          0     116.5         0                         0
[6,]           1          0     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                    0         80                    0
[2,]                    0                    0         80                    0
[3,]                    0                    0         80                    0
[4,]                    0                    0         80                    0
[5,]                    0                    0         80                    0
[6,]                    0                    0         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]                     0       65.5
[2,]                     0       65.5
[3,]                     0       65.5
[4,]                     0       65.5
[5,]                     0       65.5
[6,]                     0       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min -12.89537 max 39.83191
                                      value 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 10.95348 ...

plotmo.predict(type="response") for degree2 plot "ibh:dpg" with newdata[400,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000 -69 167.5 120 205.5
2   5760    5       64   62  368.3158 -69 167.5 120 205.5
3   5760    5       64   62  625.6316 -69 167.5 120 205.5
... 5760    5       64   62  882.9474 -69 167.5 120 205.5
400 5760    5       64   62 5000.0000 107 167.5 120 205.5

get.earth.x from model.matrix.earth from predict.earth: x is a 400 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
    vh wind humidity temp       ibh dpg   ibt vis   doy
1 5760    5       64   62  111.0000 -69 167.5 120 205.5
2 5760    5       64   62  368.3158 -69 167.5 120 205.5
3 5760    5       64   62  625.6316 -69 167.5 120 205.5
4 5760    5       64   62  882.9474 -69 167.5 120 205.5
5 5760    5       64   62 1140.2632 -69 167.5 120 205.5
6 5760    5       64   62 1397.5789 -69 167.5 120 205.5
predict.earth: bx is a 400 by 11 matrix: 1=(Intercept), 2=h(temp-58), 3=h(doy-89), 4=h(89-doy), 5=h(56-humidity)*h(temp-58), 6=h(temp-58)*h(dpg-54), 7=h(temp-58)*h(54-dpg), 8=h(200-vis), 9=h(wind-7)*h(200-vis), 10=h(1069-ibh)*h(44-dpg), 11=h(233-ibt)
First few rows of bx are
     (Intercept) h(temp-58) h(doy-89) h(89-doy) h(56-humidity)*h(temp-58)
[1,]           1          4     116.5         0                         0
[2,]           1          4     116.5         0                         0
[3,]           1          4     116.5         0                         0
[4,]           1          4     116.5         0                         0
[5,]           1          4     116.5         0                         0
[6,]           1          4     116.5         0                         0
     h(temp-58)*h(dpg-54) h(temp-58)*h(54-dpg) h(200-vis) h(wind-7)*h(200-vis)
[1,]                    0                  492         80                    0
[2,]                    0                  492         80                    0
[3,]                    0                  492         80                    0
[4,]                    0                  492         80                    0
[5,]                    0                  492         80                    0
[6,]                    0                  492         80                    0
     h(1069-ibh)*h(44-dpg) h(233-ibt)
[1,]             108254.00       65.5
[2,]              79177.32       65.5
[3,]              50100.63       65.5
[4,]              21023.95       65.5
[5,]                  0.00       65.5
[6,]                  0.00       65.5
predict.earth: returning earth predictions 
predict.earth(xgrid, type="response") column "se[,1]" returned length 400 min 5.537547 max 14.25387
                                      value 5.537547 7.878725 10.2199 12.56108 14.25387 14.25387 14.25387 14.25387 14.25387 14.25387 ...


ylim 1.37159 37.17335 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5


--plot.degree2(draw.plot=TRUE)

persp(wind:vis) theta 145 ylim 1.37 37.2 cex 0.66
persp(humidity:temp) theta -35 ylim 1.37 37.2 cex 0.66
persp(temp:dpg) theta 235 ylim 1.37 37.2 cex 0.66
persp(ibh:dpg) theta 235 ylim 1.37 37.2 cex 0.66

> 
> # test the way plotmo gets the data with lm
> se <- ozone1
> a <- lm(O3 ~ ., data=se)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared: 0.7012,	Adjusted R-squared: 0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16 

> plotmo(a, trace=0, caption="getdata lm test1")

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, x=1)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, x = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared: 0.7012,	Adjusted R-squared: 0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16 

> plotmo(a, trace=0, caption="getdata lm test2")

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, y=1)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, y = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared: 0.7012,	Adjusted R-squared: 0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16 

> plotmo(a, trace=2, caption="getdata lm test3")

--get.plotmo.x for lm object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using x from "se" passed to lm 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got x with colnames from object$call$formula

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

got y from object$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 wind, 3 humidity, 4 temp, 5 ibh, 6 dpg, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from "se" passed to lm 
term.labels: vh wind humidity temp ibh dpg ibt vis doy 
considering vh
considering wind
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,9]:
          vh wind humidity temp    ibh dpg   ibt vis   doy
1   5320.000    5       64   62 2112.5  24 167.5 120 205.5
2   5332.857    5       64   62 2112.5  24 167.5 120 205.5
3   5345.714    5       64   62 2112.5  24 167.5 120 205.5
... 5358.571    5       64   62 2112.5  24 167.5 120 205.5
50  5950.000    5       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.57289 max 14.99199
                                   value 14.99199 14.92221 14.85243 14.78265 14.71288 14.6431 14.57332 14.50354 14.43377 14.36399 ...

plotmo.predict(type="response") for degree1 plot "wind" with newdata[11,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5 120 205.5
2   5760    2       64   62 2112.5  24 167.5 120 205.5
3   5760    3       64   62 2112.5  24 167.5 120 205.5
... 5760    4       64   62 2112.5  24 167.5 120 205.5
11  5760   11       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 11 min 12.27655 max 12.87696
                                   value 12.87696 12.7678 12.71322 12.65863 12.60405 12.54947 12.49488 12.4403 12.38572 12.33113 ...

plotmo.predict(type="response") for degree1 plot "humidity" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   62 2112.5  24 167.5 120 205.5
2   5760    5 20.51020   62 2112.5  24 167.5 120 205.5
3   5760    5 22.02041   62 2112.5  24 167.5 120 205.5
... 5760    5 23.53061   62 2112.5  24 167.5 120 205.5
50  5760    5 93.00000   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 8.960214 max 14.9523
                                   value 8.960214 9.082502 9.204789 9.327076 9.449364 9.571651 9.693939 9.816226 9.938514 10.0608 ...

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 2.408729 max 21.14607
                                   value 2.408729 2.791124 3.173519 3.555914 3.938309 4.320703 4.703098 5.085493 5.467888 5.850282 ...

plotmo.predict(type="response") for degree1 plot "ibh" with newdata[50,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000  24 167.5 120 205.5
2   5760    5       64   62  210.7755  24 167.5 120 205.5
3   5760    5       64   62  310.5510  24 167.5 120 205.5
... 5760    5       64   62  410.3265  24 167.5 120 205.5
50  5760    5       64   62 5000.0000  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.92886 max 13.07206
                                   value 13.07206 13.04873 13.0254 13.00207 12.97874 12.95541 12.93208 12.90875 12.88542 12.86209 ...

plotmo.predict(type="response") for degree1 plot "dpg" with newdata[50,9]:
      vh wind humidity temp    ibh       dpg   ibt vis   doy
1   5760    5       64   62 2112.5 -69.00000 167.5 120 205.5
2   5760    5       64   62 2112.5 -65.40816 167.5 120 205.5
3   5760    5       64   62 2112.5 -61.81633 167.5 120 205.5
... 5760    5       64   62 2112.5 -58.22449 167.5 120 205.5
50  5760    5       64   62 2112.5 107.00000 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 12.32493 max 12.9168
                                   value 12.9168 12.90472 12.89264 12.88056 12.86848 12.8564 12.84432 12.83224 12.82016 12.80809 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 6.89813 max 17.48002
                                   value 6.89813 7.114087 7.330043 7.546 7.761957 7.977914 8.193871 8.409828 8.625785 8.841742 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

predict.lm(xgrid, type="response") returned length 24 min 10.76612 max 13.56297
                                   value 13.56297 13.54698 13.531 13.51502 13.50703 13.48306 13.42712 13.40315 13.34721 13.32324 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

predict.lm(xgrid, type="response") returned length 50 min 10.92151 max 14.17715
                                   value 14.17715 14.11071 14.04427 13.97783 13.91138 13.84494 13.7785 13.71206 13.64562 13.57918 ...

ylim 2.408729 21.14607 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, x=1, y=1)
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, x = 1, y = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared: 0.7012,	Adjusted R-squared: 0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16 

> plotmo(a, trace=2, caption="getdata lm test3")

--get.plotmo.x for lm object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

got y from object$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 wind, 3 humidity, 4 temp, 5 ibh, 6 dpg, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from object$x 
term.labels: `(Intercept)` vh wind humidity temp ibh dpg ibt vis doy 
considering `(Intercept)`
considering vh
considering wind
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,9]:
          vh wind humidity temp    ibh dpg   ibt vis   doy
1   5320.000    5       64   62 2112.5  24 167.5 120 205.5
2   5332.857    5       64   62 2112.5  24 167.5 120 205.5
3   5345.714    5       64   62 2112.5  24 167.5 120 205.5
... 5358.571    5       64   62 2112.5  24 167.5 120 205.5
50  5950.000    5       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.57289 max 14.99199
                                   value 14.99199 14.92221 14.85243 14.78265 14.71288 14.6431 14.57332 14.50354 14.43377 14.36399 ...

plotmo.predict(type="response") for degree1 plot "wind" with newdata[11,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5 120 205.5
2   5760    2       64   62 2112.5  24 167.5 120 205.5
3   5760    3       64   62 2112.5  24 167.5 120 205.5
... 5760    4       64   62 2112.5  24 167.5 120 205.5
11  5760   11       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 11 min 12.27655 max 12.87696
                                   value 12.87696 12.7678 12.71322 12.65863 12.60405 12.54947 12.49488 12.4403 12.38572 12.33113 ...

plotmo.predict(type="response") for degree1 plot "humidity" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   62 2112.5  24 167.5 120 205.5
2   5760    5 20.51020   62 2112.5  24 167.5 120 205.5
3   5760    5 22.02041   62 2112.5  24 167.5 120 205.5
... 5760    5 23.53061   62 2112.5  24 167.5 120 205.5
50  5760    5 93.00000   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 8.960214 max 14.9523
                                   value 8.960214 9.082502 9.204789 9.327076 9.449364 9.571651 9.693939 9.816226 9.938514 10.0608 ...

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 2.408729 max 21.14607
                                   value 2.408729 2.791124 3.173519 3.555914 3.938309 4.320703 4.703098 5.085493 5.467888 5.850282 ...

plotmo.predict(type="response") for degree1 plot "ibh" with newdata[50,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000  24 167.5 120 205.5
2   5760    5       64   62  210.7755  24 167.5 120 205.5
3   5760    5       64   62  310.5510  24 167.5 120 205.5
... 5760    5       64   62  410.3265  24 167.5 120 205.5
50  5760    5       64   62 5000.0000  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.92886 max 13.07206
                                   value 13.07206 13.04873 13.0254 13.00207 12.97874 12.95541 12.93208 12.90875 12.88542 12.86209 ...

plotmo.predict(type="response") for degree1 plot "dpg" with newdata[50,9]:
      vh wind humidity temp    ibh       dpg   ibt vis   doy
1   5760    5       64   62 2112.5 -69.00000 167.5 120 205.5
2   5760    5       64   62 2112.5 -65.40816 167.5 120 205.5
3   5760    5       64   62 2112.5 -61.81633 167.5 120 205.5
... 5760    5       64   62 2112.5 -58.22449 167.5 120 205.5
50  5760    5       64   62 2112.5 107.00000 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 12.32493 max 12.9168
                                   value 12.9168 12.90472 12.89264 12.88056 12.86848 12.8564 12.84432 12.83224 12.82016 12.80809 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 6.89813 max 17.48002
                                   value 6.89813 7.114087 7.330043 7.546 7.761957 7.977914 8.193871 8.409828 8.625785 8.841742 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

predict.lm(xgrid, type="response") returned length 24 min 10.76612 max 13.56297
                                   value 13.56297 13.54698 13.531 13.51502 13.50703 13.48306 13.42712 13.40315 13.34721 13.32324 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

predict.lm(xgrid, type="response") returned length 50 min 10.92151 max 14.17715
                                   value 14.17715 14.11071 14.04427 13.97783 13.91138 13.84494 13.7785 13.71206 13.64562 13.57918 ...

ylim 2.408729 21.14607 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- lm(O3 ~ ., data=se, x=0, y=1)
> se <- NULL
> z <- try(plotmo(a, trace=2, caption="getdata lm test4"))

--get.plotmo.x for lm object

formula O3 ~ .
stripped formula O3~.
Error : the data "se" passed to lm is no longer available (use x=TRUE in the call to lm?)
       (tried object$data, object$x and call$se)
> if (class(z) != "try-error")
+     stop("test failed")
> se <- ozone1
> a <- lm(O3 ~ ., data=se, x=1, y=1)
> se <- NULL
> printh(summary(a))
===summary(a) 

Call:
lm(formula = O3 ~ ., data = se, x = 1, y = 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-12.1011  -2.9289  -0.2715   2.7080  13.3687 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept) 20.3135755 29.5193067   0.688  0.49186    
vh          -0.0054271  0.0053985  -1.005  0.31551    
wind        -0.0545832  0.1348425  -0.405  0.68590    
humidity     0.0809741  0.0188394   4.298 2.29e-05 ***
temp         0.2755492  0.0497912   5.534 6.52e-08 ***
ibh         -0.0002338  0.0002956  -0.791  0.42944    
dpg         -0.0033629  0.0112805  -0.298  0.76581    
ibt          0.0296411  0.0136088   2.178  0.03013 *  
vis         -0.0079910  0.0037503  -2.131  0.03387 *  
doy         -0.0091194  0.0027745  -3.287  0.00113 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Residual standard error: 4.441 on 320 degrees of freedom
Multiple R-squared: 0.7012,	Adjusted R-squared: 0.6927 
F-statistic: 83.42 on 9 and 320 DF,  p-value: < 2.2e-16 

> plotmo(a, trace=2, caption="getdata lm test5")

--get.plotmo.x for lm object

got x with colnames from object$x

x[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

nlevels: vh=53 wind=11 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

got y from object$y
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 wind, 3 humidity, 4 temp, 5 ibh, 6 dpg, 7 ibt, 8 vis, 9 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from object$x 
term.labels: `(Intercept)` vh wind humidity temp ibh dpg ibt vis doy 
considering `(Intercept)`
considering vh
considering wind
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,9]:
          vh wind humidity temp    ibh dpg   ibt vis   doy
1   5320.000    5       64   62 2112.5  24 167.5 120 205.5
2   5332.857    5       64   62 2112.5  24 167.5 120 205.5
3   5345.714    5       64   62 2112.5  24 167.5 120 205.5
... 5358.571    5       64   62 2112.5  24 167.5 120 205.5
50  5950.000    5       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.57289 max 14.99199
                                   value 14.99199 14.92221 14.85243 14.78265 14.71288 14.6431 14.57332 14.50354 14.43377 14.36399 ...

plotmo.predict(type="response") for degree1 plot "wind" with newdata[11,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    0       64   62 2112.5  24 167.5 120 205.5
2   5760    2       64   62 2112.5  24 167.5 120 205.5
3   5760    3       64   62 2112.5  24 167.5 120 205.5
... 5760    4       64   62 2112.5  24 167.5 120 205.5
11  5760   11       64   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 11 min 12.27655 max 12.87696
                                   value 12.87696 12.7678 12.71322 12.65863 12.60405 12.54947 12.49488 12.4403 12.38572 12.33113 ...

plotmo.predict(type="response") for degree1 plot "humidity" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5 19.00000   62 2112.5  24 167.5 120 205.5
2   5760    5 20.51020   62 2112.5  24 167.5 120 205.5
3   5760    5 22.02041   62 2112.5  24 167.5 120 205.5
... 5760    5 23.53061   62 2112.5  24 167.5 120 205.5
50  5760    5 93.00000   62 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 8.960214 max 14.9523
                                   value 8.960214 9.082502 9.204789 9.327076 9.449364 9.571651 9.693939 9.816226 9.938514 10.0608 ...

plotmo.predict(type="response") for degree1 plot "temp" with newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 2.408729 max 21.14607
                                   value 2.408729 2.791124 3.173519 3.555914 3.938309 4.320703 4.703098 5.085493 5.467888 5.850282 ...

plotmo.predict(type="response") for degree1 plot "ibh" with newdata[50,9]:
      vh wind humidity temp       ibh dpg   ibt vis   doy
1   5760    5       64   62  111.0000  24 167.5 120 205.5
2   5760    5       64   62  210.7755  24 167.5 120 205.5
3   5760    5       64   62  310.5510  24 167.5 120 205.5
... 5760    5       64   62  410.3265  24 167.5 120 205.5
50  5760    5       64   62 5000.0000  24 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 11.92886 max 13.07206
                                   value 13.07206 13.04873 13.0254 13.00207 12.97874 12.95541 12.93208 12.90875 12.88542 12.86209 ...

plotmo.predict(type="response") for degree1 plot "dpg" with newdata[50,9]:
      vh wind humidity temp    ibh       dpg   ibt vis   doy
1   5760    5       64   62 2112.5 -69.00000 167.5 120 205.5
2   5760    5       64   62 2112.5 -65.40816 167.5 120 205.5
3   5760    5       64   62 2112.5 -61.81633 167.5 120 205.5
... 5760    5       64   62 2112.5 -58.22449 167.5 120 205.5
50  5760    5       64   62 2112.5 107.00000 167.5 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 12.32493 max 12.9168
                                   value 12.9168 12.90472 12.89264 12.88056 12.86848 12.8564 12.84432 12.83224 12.82016 12.80809 ...

plotmo.predict(type="response") for degree1 plot "ibt" with newdata[50,9]:
      vh wind humidity temp    ibh dpg        ibt vis   doy
1   5760    5       64   62 2112.5  24 -25.000000 120 205.5
2   5760    5       64   62 2112.5  24 -17.714286 120 205.5
3   5760    5       64   62 2112.5  24 -10.428571 120 205.5
... 5760    5       64   62 2112.5  24  -3.142857 120 205.5
50  5760    5       64   62 2112.5  24 332.000000 120 205.5

predict.lm(xgrid, type="response") returned length 50 min 6.89813 max 17.48002
                                   value 6.89813 7.114087 7.330043 7.546 7.761957 7.977914 8.193871 8.409828 8.625785 8.841742 ...

plotmo.predict(type="response") for degree1 plot "vis" with newdata[24,9]:
      vh wind humidity temp    ibh dpg   ibt vis   doy
1   5760    5       64   62 2112.5  24 167.5   0 205.5
2   5760    5       64   62 2112.5  24 167.5   2 205.5
3   5760    5       64   62 2112.5  24 167.5   4 205.5
... 5760    5       64   62 2112.5  24 167.5   6 205.5
24  5760    5       64   62 2112.5  24 167.5 350 205.5

predict.lm(xgrid, type="response") returned length 24 min 10.76612 max 13.56297
                                   value 13.56297 13.54698 13.531 13.51502 13.50703 13.48306 13.42712 13.40315 13.34721 13.32324 ...

plotmo.predict(type="response") for degree1 plot "doy" with newdata[50,9]:
      vh wind humidity temp    ibh dpg   ibt vis       doy
1   5760    5       64   62 2112.5  24 167.5 120  33.00000
2   5760    5       64   62 2112.5  24 167.5 120  40.28571
3   5760    5       64   62 2112.5  24 167.5 120  47.57143
... 5760    5       64   62 2112.5  24 167.5 120  54.85714
50  5760    5       64   62 2112.5  24 167.5 120 390.00000

predict.lm(xgrid, type="response") returned length 50 min 10.92151 max 14.17715
                                   value 14.17715 14.11071 14.04427 13.97783 13.91138 13.84494 13.7785 13.71206 13.64562 13.57918 ...

ylim 2.408729 21.14607 

--plot.degree1(draw.plot=TRUE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> se <- ozone1
> a <- lm(O3 ~ ., data=se)
> se$wind <- NULL
> z <- try(plotmo(a, trace=2, caption="getdata lm test6"))

--get.plotmo.x for lm object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using x from "se" passed to lm 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got x with colnames from object$call$formula

x[330,8]:
      vh humidity temp  ibh dpg ibt vis doy
1   5710       28   40 2693 -25  87 250  33
2   5700       37   45  590 -24 128 100  34
3   5760       51   54 1450  25 139  60  35
... 5720       69   35 1568  15 121  60  36
330 5550       85   39 5000   8  44 100 390

nlevels: vh=53 humidity=65 temp=63 ibh=196 dpg=128 ibt=193 vis=24 doy=325 

--get.plotmo.y for lm object

formula O3 ~ .
stripped formula O3~.
get.data.for.formula: using y from "se" passed to lm 
about to eval model.frame(formula=O3~., data=structure(list(O3=c(3, 
    5, 5, 6, 4, 4, 6, 7, 4, 6, 5, 4, 4, 7, 5, 9, 4, 3, 4, 4, 5, 6, 
    9, 6, 6, 11, 10, 7, 12, 9, 2, 3, 3, 2, 3, 3, 4, 6, 8, 6, 4, 3, 
    7, 11, 13, 6, 5, 4, 4, 6, 10, 15, 23, 17, 7, 2, 3, 3, 4, 6, 7, 
    7, 6, 3, 2, 8, 12, 12, 16, 9, 24, 13, 8, 10, 8, 9, 10, 14, 9, 
    11, 7, 9, 12, 12, 8, 9, 5, 4, 4, 9, 13, 5, 10, 10, 7, 5, 4, 7, 
    3, 4, 7, 11, 15, 22, 17, 7, 10, 19, 18, 12, 6, 9, 19, 21, 29, 
    16, 11, 2, 12, 16, 22, 20, 27, 33, 25, 31, 18, 24, 16, 12, 9, ...
got y from object$call$formula
get.plotmo.y returned length 330 min 1 max 38
             value 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--get.plotmo.singles for lm object

singles: 1 vh, 2 humidity, 3 temp, 4 ibh, 5 dpg, 6 ibt, 7 vis, 8 doy 

--get.plotmo.pairs for lm object

get.data.for.formula: using x from "se" passed to lm 
term.labels: vh humidity temp ibh dpg ibt vis doy 
considering vh
considering humidity
considering temp
considering ibh
considering dpg
considering ibt
considering vis
considering doy
no pairs

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for degree1 plot "vh" with newdata[50,8]:
          vh humidity temp    ibh dpg   ibt vis   doy
1   5320.000       64   62 2112.5  24 167.5 120 205.5
2   5332.857       64   62 2112.5  24 167.5 120 205.5
3   5345.714       64   62 2112.5  24 167.5 120 205.5
... 5358.571       64   62 2112.5  24 167.5 120 205.5
50  5950.000       64   62 2112.5  24 167.5 120 205.5

Error in eval(expr, envir, enclos) : object 'wind' not found
> if (class(z) != "try-error")
+     stop("test failed")
> 
> cat("test fixed.point warning in print.summary.earth\n")
test fixed.point warning in print.summary.earth
> options(digits=3)
> et <- etitanic
> et$age <- 1000 * et$age
> a <- earth(survived~., data=et)
> print(summary(a))
Call: earth(formula=survived~., data=et)

             coefficients
(Intercept)        1.0947
pclass2nd         -0.2114
pclass3rd         -0.3413
sexmale           -0.4851
h(age-10000)       0.0000
h(10000-age)       0.0000
h(sibsp-1)        -0.0970
h(parch-1)        -0.0627
h(1-parch)        -0.0902

Selected 9 of 10 terms, and 6 of 6 predictors 
Importance: sexmale, pclass3rd, age, pclass2nd, sibsp, parch
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.152    RSS 154    GRSq 0.372    RSq 0.391
> print(summary(a, fixed.point=FALSE))
Call: earth(formula=survived~., data=et)

             coefficients
(Intercept)      1.09e+00
pclass2nd       -2.11e-01
pclass3rd       -3.41e-01
sexmale         -4.85e-01
h(age-10000)    -4.22e-06
h(10000-age)     2.57e-05
h(sibsp-1)      -9.70e-02
h(parch-1)      -6.27e-02
h(1-parch)      -9.02e-02

Selected 9 of 10 terms, and 6 of 6 predictors 
Importance: sexmale, pclass3rd, age, pclass2nd, sibsp, parch
Number of terms at each degree of interaction: 1 8 (additive model)
GCV 0.152    RSS 154    GRSq 0.372    RSq 0.391
> options(digits=7) # back to default
> 
> cat("--- ../../tests/test.earth.R -------------------------\n")
--- ../../tests/test.earth.R -------------------------
> 
> options(options.old)
> source("../../tests/test.earth.R")
Call: earth(formula=O3~., data=ozone1, trace=4, degree=2)
x is a 330 by 9 matrix: 1=vh, 2=wind, 3=humidity, 4=temp, 5=ibh, 6=dpg, 7=ibt, 8=vis, 9=doy
First few rows of x are
       vh wind humidity temp  ibh dpg ibt vis doy
[1,] 5710    4       28   40 2693 -25  87 250  33
[2,] 5700    3       37   45  590 -24 128 100  34
[3,] 5760    3       51   54 1450  25 139  60  35
[4,] 5720    4       69   35 1568  15 121  60  36
[5,] 5790    6       19   45 2631 -33 123 100  37
[6,] 5790    3       25   55  554 -28 182 250  38
y is a 330 by 1 matrix: 1=O3
First few rows of y are
     O3
[1,]  3
[2,]  5
[3,]  5
[4,]  6
[5,]  4
[6,]  4
Forward pass: minspan 6 endspan 10

         GRSq    RSq     DeltaRSq Pred     PredName         Cut  Terms   ParentTerm
1      0.0000 0.0000                                             1
2      0.6493 0.6599       0.6599    4         temp          58  2   3   
4      0.6908 0.7094      0.04948    5          ibh        1069  4   5   
6      0.7110 0.7368      0.02744    9          doy          89  6   7   
8      0.7300 0.7618        0.025    3     humidity          56  8   9   2   
10     0.7546 0.7904      0.02865    6          dpg          54  10  11  2   
12     0.7597 0.8015       0.0111    8          vis         200  12  13  
14     0.7633 0.8110     0.009428    2         wind           7  14  15  13  
16     0.7637 0.8177     0.006729    6          dpg          44  16  17  5   
18     0.7678 0.8270     0.009305    7          ibt         233  18  19  
20     0.7659 0.8317     0.004672    9          doy         159  20  21  2   

Reached max number of terms 21
After forward pass GRSq 0.7659 RSq 0.8317
Forward pass complete: 21 terms

Subset size        GRSq     RSq  DeltaGRSq nPreds  Terms (col nbr in bx)
          1      0.0000  0.0000     0.0000      0  1
          2      0.6408  0.6462     0.6408      1  1 2
          3      0.6909  0.7002     0.0501      2  1 2 4
          4      0.7018  0.7153     0.0109      3  1 2 9 19
          5      0.7108  0.7281     0.0090      4  1 2 6 9 19
          6      0.7377  0.7573     0.0269      4  1 2 6 7 9 19
          7      0.7566  0.7783     0.0189      5  1 2 6 7 9 11 19
          8      0.7657  0.7900     0.0091      6  1 2 6 7 9 11 13 19
          9      0.7768  0.8031     0.0111      7  1 2 6 7 9 11 13 17 19
         10      0.7851  0.8135     0.0082      7  1 2 6 7 9 10 11 13 17 19
chosen   11      0.7910  0.8216     0.0059      8  1 2 6 7 9 10 11 13 14 17 19
         12      0.7897  0.8234    -0.0013      8  1 2 6 7 9 10 11 13 14 17 19 20
         13      0.7895  0.8261    -0.0002      8  1 2 6 7 9 10 11 13 14 17 19 20 21
         14      0.7872  0.8272    -0.0023      8  1 2 5 6 7 9 10 11 13 14 17 19 20 21
         15      0.7854  0.8286    -0.0018      8  1 2 5 6 7 9 10 11 13 14 16 17 19 20 21
         16      0.7833  0.8298    -0.0021      8  1 2 5 6 7 9 10 11 13 14 15 16 17 19 20 21
         17      0.7804  0.8306    -0.0028      8  1 2 5 6 7 8 9 10 11 13 14 15 16 17 19 20 21
         18      0.7772  0.8310    -0.0032      8  1 2 4 5 6 7 8 9 10 11 13 14 15 16 17 19 20 21
         19      0.7738  0.8314    -0.0034      8  1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 19 20 21
         20      0.7700  0.8316    -0.0038      8  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 20 21
         21      0.7659  0.8317    -0.0040      8  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21

Prune method "backward" penalty 3 nprune 21: selected 11 of 21 terms, and 8 of 9 predictors
After backward pass GRSq 0.791 RSq 0.8216 
Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.5    RSS 3768    GRSq 0.791    RSq 0.822
Call: earth(formula=O3~., data=ozone1, trace=4, degree=2)

                            coefficients
(Intercept)                       14.889
h(temp-58)                         0.321
h(233-ibt)                        -0.046
h(200-vis)                         0.022
h(doy-89)                         -0.023
h(89-doy)                         -0.144
h(wind-7) * h(200-vis)            -0.019
h(56-humidity) * h(temp-58)       -0.021
h(temp-58) * h(dpg-54)            -0.019
h(temp-58) * h(54-dpg)             0.004
h(1069-ibh) * h(44-dpg)            0.000

Selected 11 of 21 terms, and 8 of 9 predictors 
Importance: temp, humidity, ibt, doy, dpg, ibh, vis, wind, vh-unused
Number of terms at each degree of interaction: 1 5 5
GCV 13.5    RSS 3768    GRSq 0.791    RSq 0.822
          nsubsets   gcv    rss
temp            10 100.0  100.0
humidity         8  35.6   38.4
ibt              8  35.6   38.4
doy              7  33.6   36.0
dpg              5  25.9   28.0
ibh              4  30.9>  32.3>
vis              4  20.8   22.9
wind             1   8.7    9.9
vh-unused        0   0.0    0.0
Selected 5 of 21 terms, and 4 of 9 predictors 
Importance: temp, humidity, ibt, ibh-unused, doy, vh-unused, wind-unused, ...
Number of terms at each degree of interaction: 1 3 1
GCV 18.6    RSS 5741    GRSq 0.711    RSq 0.728

0 1 2 
1 3 1 
[1] 0 1 1 1 1 1 1 2 2
[1] "vh"       "wind"     "humidity"
[1] 5741
[1] 1 2 5 3 4
       O3
[1,] 6.63
Selected 14 of 19 terms, and 8 of 9 predictors 
Importance: temp, ibh, doy, dpg, humidity, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 13 (additive model)
GCV 14.8126    RSS 4121    GRSq 0.769904    RSq 0.804834
Call: earth(formula=O3~., data=ozone1, degree=1, minspan=1)

O3 =
  8.56555
  +   0.0153584 * pmax(0,       vh -     5740) 
  -   0.0135079 * pmax(0,     5740 -       vh) 
  +    0.303387 * pmax(0,        9 -     wind) 
  +     0.24189 * pmax(0, humidity -       39) 
  -    0.227282 * pmax(0, humidity -       54) 
  +    0.378576 * pmax(0,     temp -       58) 
  - 0.000600086 * pmax(0,      ibh -     1023) 
  -  0.00313283 * pmax(0,     1023 -      ibh) 
  -    0.107166 * pmax(0,      dpg -       12) 
  +   0.0456812 * pmax(0,       80 -      vis) 
  +   0.0469864 * pmax(0,      doy -       89) 
  -    0.124658 * pmax(0,       89 -      doy) 
  -   0.0911118 * pmax(0,      doy -      159) 

Selected 14 of 19 terms, and 8 of 9 predictors 
Importance: temp, ibh, doy, dpg, humidity, vh, vis, wind, ibt-unused
Number of terms at each degree of interaction: 1 13 (additive model)
GCV 14.8126    RSS 4121    GRSq 0.769904    RSq 0.804834
> 
> if(!interactive()) {
+     dev.off()         # finish postscript plot
+     q(runLast=FALSE)  # needed else R prints the time on exit (R2.5 and higher) which messes up the diffs
+ }
